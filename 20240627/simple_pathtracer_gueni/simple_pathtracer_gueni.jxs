<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iFrame" type="int" default="0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform int iFrame;
uniform samplerCube iChannel0;

#define NUM_SPHERES 12
#define NUM_BOUNCES 8
#define NUM_SAMPLES 8


const float PI = 3.14159265359; 
const float TWO_PI = 2.0 * PI;
const float INFINITY = 1.0 / 0.0;

const float DIFFUSE = 0.;
const float REFLECT = 1.;
const uint REFRACT = 2U;

uint rng; // random number generator state

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Sphere  {
    float radius;
    vec3 center;
    vec3 albedo;
    vec3 emissive;
    float roughness;
};

uint wang_hash(inout uint seed)
{
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}

float random_float_01()
{
    return float(wang_hash(rng)) / float(0xFFFFFFFFU);
}
 
vec3 random_unit_vector()
{
    float z = random_float_01() * 2.0 - 1.0;
    float a = random_float_01() * TWO_PI;
    float r = sqrt(1.0 - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

vec3 random_in_hemisphere(vec3 n)
{
    vec3 v = random_unit_vector();
    return (dot(v,n) > 0.0) ? v : -v;
}    

vec3 visualize_normal(in vec3 normal)
{
  return (vec3(1.0) + normal * vec3(1, -1, -1)) * 0.5;
}

bool ray_sphere_intersect_v1(in Ray r, in Sphere s, out float t)
{
  vec3 m = r.origin - s.center;
  float b = dot(m, r.direction);
  float c = dot(m, m) - s.radius * s.radius;

  if (c > 0.0 && b > 0.0)
    return false;

  float discr = b * b - c;

  if (discr < 0.0f)
    return false;

  t = -b - sqrt(discr);

  if (t < 0.0)
  {  
    t = 0.0;
  }
  
  return true;
}

vec3 render(in Ray ray, in Sphere[NUM_SPHERES] spheres)
{
    vec3 color      = vec3(0.0);
    vec3 throughput = vec3(1.0);
    
    for (int b = 0; b < NUM_BOUNCES; b++) {
    
        int i = -1;
        float t = INFINITY, c = INFINITY;

        for (int s = 0; s < NUM_SPHERES; s++) {
            if (ray_sphere_intersect_v1(ray, spheres[s], t) && (0.0 < t && t < c)){        
                i = s, c = t;
            }
        }
        
        if (i != -1) {
            vec3 point  = ray.origin + ray.direction * c;
            vec3 normal = normalize(point - spheres[i].center);

#if 0
            color = visualize_normal(normal);
#else    
            float nudge = 0.01;
            ray.origin    = point + normal * nudge;
            
            float cos_theta = 1.0;
            
            vec3 reflected = reflect(ray.direction, normal);
            vec3 diffuse = random_in_hemisphere(normal);
            
            ray.direction = mix(diffuse, reflected, pow(spheres[i].roughness, 2.));
            
#if 0                            
            if (spheres[i].type == REFLECT){
                ray.direction = reflect(ray.direction, normal);
            } else {
                //cos_theta = -dot(normal, ray.direction) * 2.;
                ray.direction = normalize(normal + random_unit_vector());
                ray.direction = random_in_hemisphere(normal);
            }
#endif     
            
            color      += (spheres[i].emissive * throughput);
            throughput *= (spheres[i].albedo);  
#endif
        } else {
            break; 
        }
    }
    return color;
}

void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    vec2 uv = (fragCoord.xy - 0.5 * viewPort.xy) / viewPort.y;
    
    
    rng = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) 
        * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);
        
    
    vec2 jitter = vec2(random_float_01(), random_float_01());
    jitter *= 0.001;
    
    uv += jitter;

    
    vec3 red   = vec3(0.7,0.1,0.1);
    vec3 grey  = vec3(0.7f, 0.7f, 0.7f);
    vec3 green = vec3(0.1,0.7,0.1);
    vec3 black = vec3(0,0,0);
    vec3 white = vec3(1,1,1);
    vec3 light = vec3(1.0f, 0.9f, 0.7f) * 10.0f;
    vec3 s0    = vec3(0.75f, 0.9f, 0.9f);
    vec3 s1    = vec3(0.9f, 0.75f, 0.9f);
    vec3 s2    = vec3(0.9f, 0.9f, 0.75f);
    vec3 light2 = s2 * 10.0;
    vec3 light3 = grey * 2.;

    float r = 5000.0;
    float rh = 2.;
    float rs = 0.7;
    float h = r + rh;
    float w = r + 2.8;
    Sphere spheres[NUM_SPHERES];
    
    int i = 0;
    
    // light
    spheres[i++] = Sphere(0.8, vec3(+0.0, 2.4, 5), s2,  light2, DIFFUSE);
    
    // spheres
    spheres[i++] = Sphere(rs, vec3(-1.5, -rh + rs, 5), s0,  black, 0.5);
    spheres[i++] = Sphere(0.5, vec3(+0.0, -1.5, 4.3), s2,  black, .3);
    spheres[i++] = Sphere(rs, vec3(+1.5, -rh + rs, 5), s1,  black, 1.); 
    spheres[i++] = Sphere(0.6, vec3(-.5, 0, 5), s1,  black, .7); 
    spheres[i++] = Sphere(0.4, vec3(1.3, .5, 5), s1,  black, 0.); 
    
    // walls
    spheres[i++] = Sphere(r, vec3(0,0,h+4.0), grey,  black, DIFFUSE); // back
    spheres[i++] = Sphere(r, vec3(0,-h,0),    grey,  black, DIFFUSE); // bottom
    spheres[i++] = Sphere(r, vec3(0,+h,0),    grey,  black, DIFFUSE); // top
    spheres[i++] = Sphere(r, vec3(-w,0,0),    red,   black, DIFFUSE); // left
    spheres[i++] = Sphere(r, vec3(+w,0,0),    green, black, DIFFUSE); // right
    
    Ray ray = Ray(vec3(0.0), normalize(vec3(uv.x, uv.y, 1.0)));  

    vec3 color;
    
    for (int i = 0; i < NUM_SAMPLES; ++i) {
        color += render(ray, spheres);
    }
    
    color /= float(NUM_SAMPLES);
    
    // vec3 last_frame_color = texture(iChannel0, fragCoord / viewPort.xy).rgb;
    // Normalize fragment coordinates to range [-1, 1]
    vec2 npc = (fragCoord / viewPort.xy) * 2.0 - 1.0;
    
    // Create a direction vector for the cube map
    vec3 cubeSamp = normalize(vec3(npc, 1.0)); 

    // Sample the cube map using the direction vector
    vec3 last_frame_color = texture(iChannel0, cubeSamp).rgb; 
    color = mix(last_frame_color, color, 1.0 / float(iFrame + 1));

    outColor = vec4(color, 1.0);
}
]]>
</program>
</language>
</jittershader>
