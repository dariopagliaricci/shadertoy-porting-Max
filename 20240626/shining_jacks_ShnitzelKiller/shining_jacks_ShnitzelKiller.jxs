<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iFrame" type="int" default="0" />
	<param name="iMouse" type="vec4" default="0 0 0 0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iMouse" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform int iFrame;
uniform vec4 iMouse;
uniform samplerCube iChannel0;

#define FOV 1.9
#define FOCAL_DIST 7.
#define LENS_DIST 1.
#define APERTURE 0.1
#define MAXSTEP 100
#define TOL 0.01
#define MAXDIST 100.
#define EPS 0.02
#define BOUNCES 8
#define SCATTER_FACTOR 0.1
#define SHARP 4.
#define RADIUS 0.6
#define RINGRAD 3.
#define RINGPERIOD 6.
#define PERIOD 3.2
#define HEIGHT 0.7
#define PI 3.1415926
#define RENDERS_PER_FRAME 3
#define SKYCOL vec3(0.0, 0.0, 0.0)
#define ATMOSPHERE_TRANSMISSION 0.9
    
vec2 condmin(in vec2 d1, in vec2 d2) {
    return vec2(min(d1.x, d2.x), mix(d1.y, d2.y, step(d2.x, d1.x)));
}

vec2 map(in vec3 ro) {
    vec2 d = vec2(1e10, 0);
    ro.z = 5.-abs(-ro.z+5.);
    d = condmin(d, vec2(ro.z, 1));
    ro.xy = mod(ro.xy+0.5*PERIOD, PERIOD)-0.5*PERIOD;
    float metadist = length(ro-vec3(0, 0, HEIGHT))-RADIUS*1.2;
    for (int i=0; i<2; i++) {
        for (int j=0; j<2; j++) {
            float otherdist = length(ro - vec3(i*2-1, j*2-1, HEIGHT))-RADIUS;
            metadist = -log(exp(-SHARP * metadist) + exp(-SHARP * otherdist))/SHARP;
        }
    }
    d = condmin(d, vec2(metadist, 2.));
    return d;
}

vec3 getnormal(vec3 ro) {
    vec2 d = vec2(TOL, 0.0);
    return normalize(vec3(
        map(ro+d.xyy).x-map(ro-d.xyy).x,
        map(ro+d.yxy).x-map(ro-d.yxy).x,
        map(ro+d.yyx).x-map(ro-d.yyx).x));
}

vec2 raymarch(in vec3 eye, in vec3 rd) {
    
    float t = 0.0;
    for (int i=0; i<MAXSTEP; i++) {
        vec3 pos = eye + rd*t;
        vec2 dist = map(pos);
        t += dist.x;
        if (abs(dist.x) < TOL) {
            return vec2(t, dist.y);
        } else if (t > MAXDIST) break;
    }
    return vec2(t, 0.);
}

uint seed;

uint wang_hash()
{
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}

float GetRandom()
{
    return float(wang_hash()) / 4294967296.0;
}

vec2 GetRandom2(){return vec2(GetRandom(), GetRandom());}

vec3 randnorm() {
    vec2 utheta = GetRandom2() * 2. - 1.;
    utheta.y *= PI;
    float rho = sqrt(1.-utheta.x * utheta.x);
    return vec3(cos(utheta.y)*rho, sin(utheta.y)*rho, utheta.x);
}

vec3 pathtrace(in vec3 eye, in vec3 rd) {
    vec3 col = vec3(0.);
    vec3 thru = vec3(1.);
    for (int i=0; i<BOUNCES; i++) {
        vec2 d = raymarch(eye, rd);
        thru *= pow(ATMOSPHERE_TRANSMISSION, d.x);
        if (d.y < 0.5) {
            col += thru * SKYCOL;
            break;
        }
        eye = eye + d.x * rd;
        vec3 n = getnormal(eye);
        vec3 nr = randnorm();
        vec3 nref = reflect(rd, n);
		nr = mix(nref, normalize(n + nr), SCATTER_FACTOR);
        vec3 albedo = vec3(1.);
        vec3 emissive = vec3(0.);
        if (d.y < 1.5) {
            albedo = vec3(0.3, 0.7, 0.9);
        } else if (d.y < 2.5) {
            float fac = 1.-smoothstep(0., RADIUS+0.5, length(mod(eye.xy+0.5*PERIOD, PERIOD)-0.5*PERIOD));
            vec2 id = floor(eye.xy/PERIOD + 0.5);
            id = mod(id, RINGPERIOD)-RINGPERIOD*0.5;
            float fac2 = length(id) - RINGRAD;
            fac2 = max(0., 1.-fac2*fac2);
            fac *= fac2;
            albedo = vec3(0.6, 0.9, 0.5);
            emissive = fac * 10.*vec3(0.4, 0.1, 0.0);
        }
        
        col += thru * emissive;
        thru *= albedo;
        
        float maxthru = max(thru.x, max(thru.y, thru.z));
        if (GetRandom() > maxthru) {
            break;
        }
        thru *= 1.0/maxthru;
        
        rd = nr;
        eye += EPS * rd;
    }
    return col;
}


void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    seed = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);
    //camera position
	float mouseY = iMouse.y < 1. ? 0.5 : (1.0-1.15*iMouse.y/viewPort.y) * 0.5 * PI;
    float mouseX = iMouse.x < 1. ? 0.25 : -(iMouse.x/viewPort.x) * 2. * PI;
    vec3 eyeo = 7.*vec3(cos(mouseX) * cos(mouseY), sin(mouseX) * cos(mouseY), sin(mouseY));
    vec3 w = -normalize(eyeo);
    vec3 u = normalize(cross(w, vec3(0., 0., 1.)));
    vec3 v = cross(u, w);
    // vec4 oldCol = texture(iChannel0, fragCoord/viewPort.xy);
     // Convert fragCoord to a normalized device coordinate space
    vec2 uv = (fragCoord / viewPort) * 2.0 - 1.0;
    
    // Create a direction vector for the cubemap sampling
    vec3 direction = vec3(uv, 1.0);
    
    // Sample the cubemap using the direction vector
    vec4 oldCol = texture(iChannel0, direction);

    bool dirty = iMouse.z > 1. || iMouse.w > 1. || iFrame == 0;
    float oldWeight = oldCol.w;
    //if (dirty) {
    //    fragColor = vec4(pathtrace(eye, rd, 0.), 1.);
    //} else {
    if (dirty) oldWeight = 0.0;
        for (int i=0; i<RENDERS_PER_FRAME; i++) {
            fragCoord += GetRandom2() - 0.5;
    
            vec2 uv = (fragCoord - viewPort.xy * 0.5)/viewPort.x * FOV;
            vec2 c = cos(uv);
            vec2 s = sin(uv);
            vec3 rd = normalize(s.x * c.y * u + s.y * v + c.x * c.y * w);
            vec3 focalPt = eyeo + rd * FOCAL_DIST;
            vec2 rtheta = GetRandom2();
            float sampledist = sqrt(rtheta.x);
            vec2 xy = APERTURE * sampledist * vec2(sin(rtheta.y), cos(rtheta.y));
            vec3 eye = eyeo + LENS_DIST * rd + u * xy.x + v * xy.y;
            rd = normalize(focalPt - eye);
            vec3 col = pathtrace(eye, rd);
            float newWeight = oldWeight + 1.0;
            oldCol.xyz = (oldCol.xyz * oldWeight + col) / newWeight;
            oldWeight = newWeight;
        }
        outColor = vec4(oldCol.xyz,oldWeight);
    //}
    
}
]]>
</program>
</language>
</jittershader>
