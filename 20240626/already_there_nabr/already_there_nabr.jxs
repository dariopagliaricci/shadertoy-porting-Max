<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iFrame" type="int" default="0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform int iFrame;
uniform samplerCube iChannel0;

// hash and seed demofox>website>pathtracing-tutorial
uint wang_hash(inout uint seed){seed=uint(seed^uint(61))^uint(seed>>uint(16));seed*=uint(9);seed=seed^(seed>>4);seed*=uint(0x27d4eb2d);seed=seed^(seed>>15);return seed;}
float hashf(inout uint state){return float(wang_hash(state))/4294967296.;}
//smoothUnion and sdBox by iq>website
float sU( float d1, float d2, float k ){float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );return mix( d2, d1, h ) - k*h*(1.0-h); }
float sdBox(vec3 p, vec3 s) {p = abs(p) - s;return length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);}
#define dmin(a,b)((a.x<b.x)?a:b)
vec2 f(vec3 p) 
{   
    float c = 2.5;
    //room
    float rm = sdBox(vec3(p.x, p.y-.4, p.z), vec3(3, 1.5, 5.));
    rm = abs(rm);
    //door
    float lt = sdBox(vec3(p.x, p.y+.15, p.z+4.95), vec3(.25, .5, .15));
    float ppz = (p.z +1.2);
    //circular lights
    vec3 vslt = vec3(.8 * .5 - mod( max(0., cos(.2*p.z) + atan(p.y, p.x) ), .8),  length(p.xy) - 1.25,
    ppz - c * clamp(round(ppz / c), -1., 1.5) );
    vslt = abs(vslt) - vec3(.01, .01, 1.);
    float slt = length(max(vec3(0), vslt)) + min(max(vslt.x, max(vslt.y, vslt.z)), 0.) -0.01;
    //tubelights
    float lz = p.z - c * clamp(round(p.z / c), -1., 1.);
    float rr = length(vec2(min(-(length(vec2(p.x, p.y)) - 1.25), max(-1., p.y + .75)), lz)) - .05;
    //frame 
    float fr = sdBox(vec3(lz,length(vec2(max(1., abs(p.x)),min(p.y - .45, -max(0.5, abs(p.y + .1) - .4)))) - 1.6, lz),vec3(.1, .05, 1));
    //connections
    float hlt = sdBox(vec3(2.*.5-mod(max(0.,atan(p.y, p.x) * 7.639), 2.),lz, length(vec2(p.x, p.y)) - 1.4), vec3(.1, .05, .3));
    //path
    float wlk = sdBox(vec3(p.x,p.y+.7,p.z), vec3(.35, .05, 3.8));
    
    return dmin(dmin(vec2(min(sU(fr, hlt, .1), rm), 11), dmin(vec2(rr, 7),vec2(min(slt, lt), 5))), vec2(wlk, 13));;
}
void main() 
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    if(iFrame > 0)
    // outColor = texelFetch(iChannel0, ivec2(fragCoord), 0);
    outColor = texture(iChannel0, vec3(fragCoord, 0.0));
    vec3 col = vec3(1e-6);
    vec2 R = viewPort.xy,  h = vec2(0);
    uint seed = (uint(fragCoord.x) * 1973u + uint(fragCoord.y) * 9277u + uint(iFrame) * 2669u) | 1u;
    vec2 jjt = vec2(cos(R.y*hashf(seed)),sin(R.y*hashf(seed))),st =((fragCoord+jjt)*2.-R)/R.y;
    vec3 ro = vec3(0,0,4.9),rd = normalize(vec3(st,-1.7));
    vec3 memi = vec3(0), hput = vec3(.974);
    if(abs(st.x)<1.3)
    for(int b = 1; b < 6 + min(iFrame, 0); b++) 
    {
        float t = 0.;
        for(int i = 0; i < 80; i++) 
        {
            h = f(ro + t * rd );
            if(abs(h.x) < t *.001 || t > 10.)break;
            t += h.x;
        }
       ro += t * rd;
       //lights  - backward tracing from an artistically thought light source
       vec3 ld = (h.y!=13.&&h.y!=7.)?(vec3(0, 3, .5 ) - ro):(vec3(0, 1., -5. ) + ro);
       ld = normalize(ld);
       //http://lolengine.net/blog/2013/09/21/picking-orthogonal-vector-combing-coconuts
       vec3 u = ((ld.x > ld.z ) ? vec3(-ld.y, ld.x, 0.) : vec3(0., -ld.z, ld.y)), v = cross(ld, u);
       float phi = hashf(seed) * 6.283185, th = hashf(seed) * 2. - 1.,sth = sin(th);
       rd =  normalize(u * cos(phi) * sth + v * sin(phi) * sth + ld * cos(th));
       //dim the tube lights
       if(h.y==5.){hput = vec3(.9);memi=vec3(.3);}
       if(h.y==7.){hput = vec3(.1);memi=vec3(.1);}
       col += memi * hput;
    }
    //reinhard gamma
    col= col/(1.+col); 
    outColor += vec4(pow(col,vec3(0.4545)),1);
}
]]>
</program>
</language>
</jittershader>
