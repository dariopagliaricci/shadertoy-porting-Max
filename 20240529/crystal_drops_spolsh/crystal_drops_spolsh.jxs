<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iMouse" type="vec3" default="0 0 0" />
	<param name="iChannel0" type="int" default="1" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iMouse" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform vec3 iMouse;
uniform samplerCube iChannel0;


// Crystal Drops
// by Michal 'spolsh' Klos 2017

// comment to animate camera endlessly
// #define SLOMO_LOOP

#define R viewPort
// #define F gl_FragCoord
#define F fragCoord
#define M iMouse

#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)

float T = 0.0;

vec4 hash41(float p)
{ // by Dave_Hoskins
	vec4 p4 = fract(vec4(p) * HASHSCALE4);
    p4 += dot(p4, p4.wzxy+19.19);
    return fract((p4.xxyz+p4.yzzw)*p4.zywx);    
}

// polynomial smooth min (k = 0.1);
float smin( float a, float b, float k )
{ // by iq
    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
    return mix( b, a, h ) - k*h*(1.0-h);
}

float map(vec3 p)
{
    float s = length(p -vec3(0.0, .01*sin(8.0*T), 0.0)) - 0.5;
	s += 0.005*sin(45.0*p.x+10.0*T);
    
    for (int i=0; i<12; ++i) {
        vec4 rnd = hash41(100.0+float(i));        
        vec3 rndPos = 2.0*(normalize(rnd.xyz) -vec3(0.5));
        rndPos.y *= 0.2;
        float timeOffset = rnd.w;
        float phase = fract(timeOffset -0.25*T);
		vec3 offset = mix( 0.1*rndPos, 15.0*rndPos, phase);
        float rnd2 = fract(rnd.x +rnd.y);
        float s0 = length(p +offset) -0.25*mix(0.8 +0.2*rnd2, 0.2 +0.8*rnd2, phase);
        s = smin(s, s0, 0.4);
    }

    s += 0.002*sin(20.0*p.x +10.0*T);
        
    return s;    
}

vec3 env(vec3 dir) 
{
    vec3 cubemap = texture(iChannel0, dir).rgb;
    float ex = mix(6.0, 12.0, 0.5*(sin(0.5*T) +1.0));
    float t0 = 0.05*pow(1.0 -dot(vec3(0.0, -1.0, 0.0), dir), ex);
    float t1 = mix(0.2, 2.5, 1.0 -abs(sin(2.0*3.14*dir.y)));    
    vec3 c = cubemap *t0 *t1;
    return c * vec3(0.35, 1.2, 2.5);
}

vec3 calcNormal(vec3 p)
{ // by iq
    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
	return normalize(	e.xyy *map(p + e.xyy) + 
						e.yxy *map(p + e.yxy) + 					  
						e.yyx *map(p + e.yyx) + 					  
				  	  	e.xxx *map(p + e.xxx) );
}

mat3 setCamera(in vec3 ro, in vec3 ta, float cr)
{ // by iq
	vec3 cw = normalize(ta-ro);
	vec3 cp = vec3(sin(cr), cos(cr),0.0);
	vec3 cu = normalize(cross(cw,cp));
	vec3 cv = normalize(cross(cu,cw));
    return mat3(cu, cv, cw);
}

vec3 tonemapping(vec3 color)
{ // by Zavie (lslGzl)
	color = max(vec3(0.), color-vec3(0.004));
	color = (color * (6.2*color+.5))/(color*(6.2*color+1.7)+0.06);
	return color;
}

float spline(float x, float x1, float x2, float y1, float dy1, float y2, float dy2)
{
	float t = (x -x1) / (x2 -x1);	
    float a = 2.0*y1 -2.0*y2 +dy1 +dy2;
	float b = -3.0*y1 +3.0*y2 -2.0*dy1 -dy2;
	float c = dy1;
	float d = y1;
	float t2 = t*t;
	float t3 = t2*t;
	return a * t3 +b*t2 +c*t +d;
}

void calcTime()
{
    T = iTime;
#ifdef SLOMO_LOOP
    // slomo by Dave (4s23RW)
    T = mod(iTime, 20.0);
	const float slomoMin = 2.3;
	const float slomoMax = 2.6;
	const float slomoK = 0.2;
	const float slomoDuration = (slomoMax-slomoMin)/slomoK;
	if (T >= slomoMin && T<slomoMin+slomoDuration)
		T = spline(T, slomoMin, slomoMin+slomoDuration, slomoMin, slomoDuration*0.3, slomoMax, slomoDuration*0.15);
	else if ( T >= slomoMin+slomoDuration)
		T = T -slomoDuration +(slomoMax-slomoMin);
#endif
}

void main()
{    
    vec2 fragCoord = jit_in.uv * viewPort.xy;

    outColor = vec4(0,0,0,1);
    
    calcTime();
        
    vec2 u = F.xy/R.xy;
    vec2 v = 2.0*(u -0.5);
    v.x *= R.x/R.y;
    vec2 m = M.xy/R.xy;
    float cas = step(abs(v.y)*2.39,R.x/R.y);
    if (cas<0.1) return;
        
	vec3 ro = vec3(
        8.0*cos(0.2*T +6.0*m.x),
        2.0*mix(-1.0,1.0, m.y),
        8.0*sin(0.2*T +6.0*m.x)
    );
    float taAnim = 2.0*(smoothstep(-0.1, 0.1, sin(0.1*T)) -0.5);
	vec3 ta = vec3(taAnim, -0.05, 0.0);
		
    mat3 ca = setCamera(ro, ta, 0.0);
    vec3 rd = ca * normalize(vec3(v, mix(4.5, 5.0, taAnim)));    
    vec3 p, c;
    vec3 n, rl, rr;
    p = vec3(0.0);
    c = env(rd);
    
    float t, d, a;
    t = d = a = 0.0;
    for(int i=0; i<50; ++i) {
        t+=(d=map(p=ro+rd*t));
        if (d<0.01) {
            break;
        }                
    }
    
    float depth = length(p-ro);
    
    if (t<25.0) { // if hit scene
        
    	n = calcNormal(p);
	    rl = reflect(rd, n);
	    rr = refract(rd, n, .19);
    
        for(int i=0; i<25; ++i) {
            d = map(p=ro+rd*t);
            a += step(d, 0.008) *0.005;
            t += 0.02;
    	}
        
        a = exp(-a*25.0);
        c = env(mix(rr, rl, a));
		// c = vec3(a); // uncomment to see absorbtion mask
        c *= mix(vec3(1.4, 1.0, 0.9), vec3(1.0), clamp(0.2*length(p), 0.0, 1.0)); // value        
        c *= mix(vec3(1.5), vec3(.3), clamp(pow(0.1*depth, 2.0), 0.0, 1.0)); // fogging
    }
              
    c = tonemapping(c);
    
    depth = 0.01*dot(rd, p-ro); // depth paraller to camera
	outColor = vec4(c, depth);
}
]]>
</program>
</language>
</jittershader>
