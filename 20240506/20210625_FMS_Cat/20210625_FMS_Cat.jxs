<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iChannel0" program="fp" />


		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform sampler2D iChannel0;

// CAVE 06
// 2021-06-24
//
// It's a pleasant rainy day.
//
// DJ: LateFair
//
// ENTER THE CAVE

#define lofi(i,j) (floor((i)/(j))*(j))
#define fs(i) (fract(sin((i)*114.514)*1919.810))

const float PI=3.14159265;
const float EPSILON=1E-3;
const float TAU=PI*2.;
const float FAR=1E2;

float time;
float seed;

float random(){
  seed++;
  return fs(seed);
}

mat3 orthBas(vec3 z){
  z=normalize(z);
  vec3 up=abs(z.y)>.99?vec3(0,0,1):vec3(0,1,0);
  vec3 x=normalize(cross(up,z));
  return mat3(x,cross(z,x),z);
}

vec3 randomSphere(){
  float phi=TAU*random();
  float theta=acos(2.0*random()-1.);
  return vec3(cos(phi)*sin(theta),sin(phi)*sin(theta),cos(theta));
}

vec3 randomLambert(vec3 n){
  float phi=TAU*random();
  float cosTheta=sqrt(random());
  float sinTheta=sqrt(1.0-cosTheta*cosTheta);
  return orthBas(n)*vec3(cos(phi)*sinTheta,sin(phi)*sinTheta,cosTheta);
}

float quadTree(vec2 p){
  float mul=0.5;
  for(int i=0;i<4;i++){
    vec2 pt=lofi(p,mul);
    float s=dot(vec2(11.2,22.3),pt);
    s=fs(s)-0.1;
    if(s>mul){
      return mul;
    }
    mul*=0.5;
  }
  return mul;
}

float isectPlane(vec3 ro,vec3 rd,vec3 n){
  float d=dot(ro,n)/dot(-rd,n);
  return d<0.?FAR:d;
}

float drawPattern(vec2 p){
  float hcell=lofi(p.x,0.5);
  float phase=time+hcell;
  p.y+=(cos(phase)+phase)/PI*cos(hcell*PI*2.0);
  float q=quadTree(p);
  vec2 cell=lofi(p,q);

  p/=q;
  p=fract(p);
  p-=0.5;
  p/=1.0-0.01/q;
  
  float r1=fs(dot(cell,vec2(12.3,44.5)));
  float r2=fs(dot(cell,vec2(33.3,55.5)));

  float sub=0.002/q;
  
  float ptn=1.0;
  
  if(r1<.3){
    ptn*=smoothstep(0.5,0.5-sub,length(p));
    ptn*=smoothstep(0.5-3.*sub,0.5-2.*sub,length(p));
  }else if(r1<.6){
    p=abs(p);
    ptn*=smoothstep(0.5,0.5-sub,max(p.x,p.y));
    ptn*=smoothstep(0.5-3.*sub,0.5-2.*sub,max(p.x,p.y));
  }else if(r1<.8){
    p=abs(p);
    ptn*=smoothstep(0.5,0.5-sub,max(p.x,p.y));
    ptn*=smoothstep(2.1*sub,1.4*sub,abs(p.x-p.y));
  }else{
    ptn*=0.0;
  }
  
  float haha=0.5+0.5*sin(cell.x/4.0-2.0*time+4.0*r2);
  ptn*=0.01+0.99*pow(haha,3.);
  
  return ptn;
}

void main()
{
  vec2 fragCoord =  jit_in.uv * viewPort.xy;
  vec2 uv=fragCoord.xy/viewPort.xy;
  vec2 p=uv*2.-1.;
  p.x*=viewPort.x/viewPort.y;
  
  time=iTime;
  
  seed=texture(iChannel0,8.0*uv).x;
  seed+=fract(time);
  
  vec3 col=vec3(0);
  vec3 colRem=vec3(1.);
  vec3 ro0=vec3(0,1,2);
  
  vec3 rd0=orthBas(vec3(0.05*sin(time)+0.5*sin(time/7.),0.05*cos(time),1.))*normalize(vec3(p,-1));
  
  for(int iS=0;iS<100;iS++){
    colRem=vec3(1.);
    vec3 ro=ro0;
    vec3 rd=rd0;
    rd.xy+=(vec2(random(),random())-.5)/viewPort.y*2.0;
    vec3 fp=ro+mix(2.0,4.0,smoothstep(-0.5,0.5,sin(time/1.2)))*rd;
    ro.xy+=0.05*randomSphere().xy;
    rd=normalize(fp-ro);
    
    for(int iR=0;iR<4;iR++){
      float dWall=isectPlane(ro,rd,vec3(0,0,1));
      float dFloor=isectPlane(ro,rd,vec3(0,1,0));
      float d=min(dWall,dFloor);
      
      if(d<FAR){
        if(dWall<dFloor){
          vec3 n=vec3(0,0,1);
          ro=ro+rd*d+n*EPSILON;
          rd=randomLambert(n);
          float pattern=drawPattern(ro.xy);
          col+=colRem*10.0*pattern;
        }else{
          vec3 n=vec3(0,1,0);
          ro=ro+rd*d+n*EPSILON;
          if(random()<0.04){
            rd=reflect(rd,normalize(n+0.05*random()*randomSphere()));
          }else{
            rd=randomLambert(n);
          }
        }
      }
    }
  }
  
  col/=100.;
  col=pow(col,vec3(.4545));
  col*=1.0-0.2*length(p);
  col=vec3(
    smoothstep(0.2,0.8,col.x),
    smoothstep(0.0,1.0,col.y),
    smoothstep(-0.2,1.2,col.z)
  );

  outColor = vec4(col,1);
}

]]>
</program>
</language>
</jittershader>
