<jittershader name="stripes">
    <param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    <param name="position" type="vec3" state="POSITION" />
    <param name="uv" type="vec2" state="TEXCOORD" />

    <param name="viewPort" type="vec2" state="VIEWPORT" />
    <param name="iTime" type="float" default="0.0" />
	<param name="iChannel0" type="int" default="0" />

    <language name="glsl" version="1.5">
        <bind param="MVP" program="vp" />
        <bind param="position" program="vp" />
        <bind param="uv" program="vp" />

        <bind param="viewPort" program="fp" />
        <bind param="iTime" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;
			out jit_PerVertex {
				vec2 uv;
			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;
			}
		]]>
</program>      
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
    vec2 uv;
} jit_in;
out vec4 outColor;

uniform vec2 viewPort;
// uniform float iTime;
uniform sampler2D iChannel0;
    
#define NUM_POINTS 1024

#define SEED 3

void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;

    int random = SEED;
    
    int a = 1103515245;
    int c = 12345;
    int m = 2147483648;
    
    vec2 o;
    
    float minDist = 10000000.0;
    
    for(int i = 0; i < NUM_POINTS; i++)
    {
        random = a * random + c;
        
        o.x = (float(random) / float(m)) * viewPort.x;
        
        random = a * random + c;
        
        o.y = (float(random) / float(m)) * viewPort.y;
        
        if(distance(fragCoord, o) < minDist)
        {
            minDist = distance(fragCoord, o);
            vec2 uv = o / viewPort.xy;
            uv.x = 1.0 - uv.x;
            outColor = (texture(iChannel0, uv)) * (1.0 - minDist / 200.0);
        }
    }
}

]]>
</program>
</language>
</jittershader>
