<jittershader name="stripes">
    <param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    <param name="position" type="vec3" state="POSITION" />
    <param name="uv" type="vec2" state="TEXCOORD" />

    <param name="viewPort" type="vec2" state="VIEWPORT" />
    <param name="iTime" type="float" default="0.0" />
	<param name="iChannel0" type="int" default="0" />
    <param name="iChannel1" type="int" default="1" />

    <language name="glsl" version="1.5">
        <bind param="MVP" program="vp" />
        <bind param="position" program="vp" />
        <bind param="uv" program="vp" />

        <bind param="viewPort" program="fp" />
        <bind param="iTime" program="fp" />
		<bind param="iChannel0" program="fp" />
        <bind param="iChannel1" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;
			out jit_PerVertex {
				vec2 uv;
			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;
			}
		]]>
</program>      
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
    vec2 uv;
} jit_in;
out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform samplerCube iChannel0;
uniform sampler2D iChannel1;
    
#define hue(h) clamp( abs( fract(h + vec4(2,1,4,0)/1.) * 6. - 3.) -1. , 0., 1.)

vec2 rand( vec2 p ) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}

void main()
{  
    vec2 fragCoord = jit_in.uv * viewPort.xy;

    //stuff to expose
    const float size = 1.5;
    const float uvFac = 10.;
    const float colFac = .5;
    
    
    vec2 ouv = fragCoord/viewPort.xy;        
    vec2 uv = (fragCoord - viewPort.xy*.5) / (viewPort.y*size);    
    vec2 luv = uv;
    
    vec4 texIn = texture(iChannel1, ouv);
    vec2 mp = texIn.rb;
    
    uv *= 100. + sin(iTime*.5+mp.x*uvFac);
   
    vec2 iuv = floor(uv);
    vec2 guv = fract(uv);      

    float mDist = 10.;
   
    vec3 col = vec3(.1);
       
    for (float y= -1.; y <= 1.; y++) {
        for (float x= -1.; x <= 1.; x++) {            
            vec2 neighbor = vec2(x, y);            
            vec2 point = rand(iuv + neighbor);
            point = .5 + .5*sin(iTime*2. + 6.2831*point);
            vec2 diff = neighbor + point - guv;            
            float dist = length(diff);                      
           
            mDist = min(mDist, dist);                        
        }
    } 
     
    // Convert 2D to 3D for cubemap sampling
    vec3 dir = normalize(vec3(ouv, -1.0));
       
    float l = length(luv);    
    col = hue(fract(mDist*.95 + iTime*.1 + l + mp.x*colFac)).rgb;
    // outColor = vec4(col,1.0)*.05 + texture(iChannel0, ouv) *.95; 
    outColor = vec4(col, 1.0) * 0.05 + texture(iChannel0, dir) * 0.95;
   
}

]]>
</program>
</language>
</jittershader>
