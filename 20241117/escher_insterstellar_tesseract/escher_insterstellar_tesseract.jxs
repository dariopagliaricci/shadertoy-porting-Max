<jittershader name="stripes">
    <param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    <param name="position" type="vec3" state="POSITION" />
    <param name="uv" type="vec2" state="TEXCOORD" />

    <param name="viewPort" type="vec2" state="VIEWPORT" />
    <param name="iTime" type="float" default="0.0" />
	<param name="iChannel0" type="int" default="0" />

    <language name="glsl" version="1.5">
        <bind param="MVP" program="vp" />
        <bind param="position" program="vp" />
        <bind param="uv" program="vp" />

        <bind param="viewPort" program="fp" />
        <bind param="iTime" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;
			out jit_PerVertex {
				vec2 uv;
			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;
			}
		]]>
</program>      
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
    vec2 uv;
} jit_in;
out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform sampler2D iChannel0;
    
float a = -0.14; // value=-0.14, min=-1.0, max=1.0, step=0.01
float b = 0.02; // value=0.02, min=-0.0, max=1.0, step=0.01
float c = -0.02 ; // value=-0.02, min=-1.0, max=1.0, step=0.01
float d = -0.08; // value=-0.08, min=-1.0, max=1.0, step=0.01
float mobius = 1.; // value=1.0, min=0.0, max=1.0, step=0.01
float colour = 1.; // value=1, min=0, max=1, step=1 (No, Yes)



// Complex operators from Roy Wiggins
vec2 cMul(vec2 a, vec2 b) {
    return vec2( a.x*b.x -  a.y*b.y,a.x*b.y + a.y * b.x);
}

vec2 cInverse(vec2 a) {
    return  vec2(a.x,-a.y)/dot(a,a);
}
vec2 cDiv(vec2 a, vec2 b) {
    return cMul( a,cInverse(b));
}
vec2 cExp(in vec2 z){
    return vec2(exp(z.x)*cos(z.y),exp(z.x)*sin(z.y));
}



// Raymarching code from Kishimisu

float fov = 1.1;

vec3 axis = vec3(1,0,0);

float  sdSphere(vec3 p, float s){
    return length(p) - s;
}

float max3 (vec3 v) {
  return max (max (v.x, v.y), v.z);
}

float sdBox(vec3 p, vec3 b){
    vec3 q = abs(p) - b;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float opUnion(float d1, float d2){
    return min(d1, d2);
}

float opSubtraction(float d1, float d2){
    return max(-d1, d2);
}

float opIntersection(float d1, float d2){
    return max(d1, d2);
}

float opSmoothUnion(float d1, float d2, float k){
    float h = clamp(0.5 + 0.5 * (d2-d1)/k, 0.0, 1.0);
    return mix(d2, d1, h) - k*h*(1.0-h);
}

mat2 rot2D(float angle){
    float s = sin(angle);
    float c = cos(angle);
    return mat2(c, -s, s, c);
}

mat3 rot3D(vec3 axis, float angle){
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat3(
    oc*axis.x*axis.x+c,
    oc*axis.x*axis.y-axis.z*s,
    oc*axis.z*axis.x+axis.y*s,
    oc*axis.x*axis.y+axis.z*s,
    oc*axis.y*axis.y+c,
    oc*axis.y*axis.z-axis.x*s,
    oc*axis.z*axis.x-axis.y*s,
    oc*axis.y*axis.z+axis.x*s,
    oc*axis.z*axis.z+c
    );
}

vec3 rot3D(vec3 p, vec3 axis, float angle){
    return mix(dot(axis,p)*axis, p, cos(angle)) + cross(axis, p) * sin(angle);
}

float map(vec3 p){
    p = mod(p, 1.) - 0.5;
    
    float rightbox = sdBox(p, vec3(0.5,0.05 ,0.05));
    float topbox = sdBox(p, vec3(0.05,0.5 ,0.05));
    float backbox = sdBox(p, vec3(0.05,0.05 ,0.5));
    
    
    
    float t = iTime;
    float f = 6.;
    if(mod(iTime + 0.5,f) < f/2.){
        t = -iTime;
    }
    
    
    float mainbox = sdBox(vec3((mod(p.x+t,1.)-0.5),p.y,p.z), vec3(0.15,0.15 ,0.15));
    
    f = 2.;
    if(mod(iTime + 0.5,f) < f/2.){
        mainbox = sdBox(vec3(p.x,(mod(p.y+t,1.)-0.5),p.z), vec3(0.15,0.15 ,0.15));
    }
    


    return opSmoothUnion(min(min(rightbox, topbox),backbox),mainbox, 0.05);
}

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+iTime*0.1+d) );
}

vec3 GetNormal(vec3 p) {
    vec2 e = vec2(.001, 0);
    vec3 n = map(p) - 
        vec3(map(p-e.xyy), map(p-e.yxy),map(p-e.yyx));
    
    return normalize(n);
}

void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    float slow_time = 0.25*iTime;
    vec3 final_col = vec3(0.);
    int AA = 2;
    for( int m=0; m<AA; m++ ){
        for( int n=0; n<AA; n++ ){
            // Screen coordinate (from [-aspect, -1] to [aspect, 1])

            vec2 uv   = (2.0*(gl_FragCoord.xy+vec2(float(m),float(n))/float(AA))-viewPort.xy) / viewPort.y;



            uv = mix(uv,cDiv(a*uv + b, c*uv + d),mobius);


            // Initialisation
            vec3 ro = vec3(0, 0,-7. * (0.5 + 0.5*cos(slow_time*0.4)));
            vec3 rd = normalize(vec3(uv * fov, 1));


            ro.xyz *= rot3D(vec3(10.*cos(slow_time*0.14),10.*cos(slow_time*0.15),10.*cos(slow_time*0.16)),slow_time*0.5); 
            rd.xyz *= rot3D(vec3(10.*cos(slow_time*0.13),10.*cos(slow_time*0.12),10.*cos(slow_time*0.11)),slow_time*0.5);

            float t = 0.05;

            vec3 col = vec3(0.);

            int i ;
            // Raymarching
            for(i = 0; i<150; i++){
                vec3 p = ro + rd*t; // position along the ray

                p.y += (cos(t + iTime*0.7)*0.2)*(0.5+0.5*cos(iTime*0.13));
                p.x += (sin(t + iTime*0.6)*0.2)*(0.5+0.5*cos(iTime*0.11));

                float d = map(p);
                vec3 n = GetNormal(p);

                t += d;

                uv = gl_FragCoord.xy/viewPort.xy;

                vec3 colXY = texture(iChannel0, p.xy * 2.5 + 0.5).rgb;
                vec3 colYZ = texture(iChannel0, p.yz * 2.5 + 0.5).rgb;
                vec3 colXZ = texture(iChannel0, p.xz * 2.5 + 0.5).rgb;

                n = abs(n);
                col = (colXY*n.z + colYZ*n.x + colXZ*n.y);

                if (d<.0001 || t>100.){
                    break;
                }
            }
            final_col += col;
        }
    }
    
    
    final_col/=float(AA*AA);

        
    outColor = vec4(final_col,1.);
}

]]>
</program>
</language>
</jittershader>
