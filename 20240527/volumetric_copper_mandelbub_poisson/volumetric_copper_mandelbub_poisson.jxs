<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iFrame" type="int" default="0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform int iFrame;
uniform samplerCube iChannel0;

#define NUM_STEPS 128 // marching steps, higher -> better quality
#define NUM_STEPS_LIGHT 32 // marching steps for light
#define DITHERING // dithering on the distance

// random float function
float hash(float n) {return fract(sin(n)*43758.5453123);}

// sphere intersection function
// thanks to iq: https://iquilezles.org/articles/intersectors/
vec2 sphIntersect(vec3 ro, vec3 rd, vec3 ce, float ra) {
    vec3 oc = ro - ce;
    float b = dot(oc, rd);
    float c = dot(oc, oc) - ra*ra;
    float h = b*b - c;
    
    if(h<0.) return vec2(-1);
    h = sqrt(h);
    return vec2(-b-h, -b+h);
}

// mandelbulb sdf
// thanks to iq: https://www.shadertoy.com/view/ltfSWn
float sdMandelbulb(vec3 p, float power, out vec4 resTrap) {
    vec3 w = p;
    float m = dot(w,w);

    vec4 trap = vec4(abs(w),m);
	float dz = 1.;
    
	for (int i=0; i<5; i++) {
		dz = power*pow(m,(power-1.)*.5)*dz + 1.;
      
        float r = length(w);
        float b = power*acos(w.y/r);
        float a = power*atan(w.x, w.z);
        w = p + pow(r,power) * vec3(sin(b)*sin(a), cos(b), sin(b)*cos(a));
        
        trap = min(trap, vec4(abs(w),m));
        
        m = dot(w,w);
		if(m>256.) break;
    }
    resTrap = vec4(m,trap.yzw);

    return .25*log(m)*sqrt(m)/dz;
}

// volume density
float map(vec3 p, out vec4 trap) {
    return 512.*-sdMandelbulb(p*vec3(1,-1,1), 6., trap);
}

// raymarching function
float intersect(vec3 ro, vec3 rd) {
    float t = 0.; // distance travelled
    
    for (int i=0; i<256; i++) {
        vec3 p = ro + rd*t; // current point
        
        vec4 tmp;
        float h = -map(p, tmp)/512.; // distance to the scene
        if (h<.001) break; // we hit the surface
        t += h; // march
        if (t>8.) return 1e10;
    }
    // return the distance
    return t;
}

// volume shadow
float shadow(vec3 ro, vec3 rd) {
    vec2 bound = sphIntersect(ro, rd, vec3(0), 1.2); // bounding sphere
    float tmax = bound.y;
    
    float s = tmax / float(NUM_STEPS_LIGHT); // step size
    float t = 0.; // distance travelled
    
    float res = 0.; // result
    for (int i=0; i<NUM_STEPS_LIGHT; i++) { // marching loop
        vec3 p = ro + rd*t; // current point
        
        vec4 tmp;
        float h = max(0.,map(p, tmp)); // density
        res += h*s;
        
        t += s; // march
    }
    return res;
}

// rendering
vec3 render(vec3 ro, vec3 rd) {
    // background color
    vec3 bgCol = vec3(0);
    
    // bounding volume
    vec2 bound = sphIntersect(ro, rd, vec3(0), 1.2);
    float tmin = bound.x; // min distance
    float tmax = bound.y; // max distance
    
    vec4 sum = vec4(0,0,0,1); // color and opacity
    if (tmax<0.) return bgCol; // outside the bounding volume
    
    float s = (tmax-tmin) / float(NUM_STEPS); // step size
    float t = tmin; // distance travelled
    #ifdef DITHERING
    // dithering
    t += s*hash(iTime+gl_FragCoord.x*8315.9213/viewPort.x+gl_FragCoord.y*2942.5192/viewPort.y);
    #endif
    
    for (int i=0; i<NUM_STEPS; i++) { // marching loop
        vec3 p = ro + rd*t; // current point
        vec4 trap;
        float h = map(p, trap); // density
        
        if (h>0.) { // inside the volume
            vec3 lig = normalize(vec3(2,1,1.5)); // light direction
            float sha = shadow(p, lig); // shadows
            
            // scattered color
            vec3 mat = vec3(1,2.5,4);
            mat = mix(mat, vec3(8,3,3), clamp(1.5*trap.y*trap.y,0.,1.));
            
            vec3 col = 1.6*exp(-sha*mat*4.); // direct light
            col += .4*exp(-h*.25*mat*mat); // ambien light
            
            sum.rgb += h*s*sum.a*col; // add the color to the final result
            sum.a *= exp(-h*s*2.); // beer's law for light absorbtion
        }
        if (sum.a<.01) break; // optimization
        t += s; // march
    }
    
    vec3 col = bgCol*sum.a + sum.rgb; // mix the background color with the volume color
    return col;
}

// camera function
mat3 setCamera(vec3 ro, vec3 ta) {
    vec3 w = normalize(ta - ro);
    vec3 u = normalize(cross(w, vec3(0,1,0)));
    vec3 v = cross(u, w);
    return mat3(u, v, w);
}

void main()
{
    
	vec2 fragCoord = jit_in.uv * viewPort.xy;
    // pixel coordinates centered at the origin
    vec2 p = (fragCoord - .5*viewPort.xy)/viewPort.y;
    
    float an = .1*iTime-1.; // camera angle
    vec3 ro = 1.3*vec3(sin(an),1,cos(an)); // ray origin
    vec3 ta = vec3(0,.7,0); // target
    mat3 ca = setCamera(ro, ta); // camera matrix
    
    vec3 rd = ca * normalize(vec3(p,1.5)); // ray direction
    
    // rendering
    vec3 col = render(ro, rd);
    float t = intersect(ro, rd); // distance to the object (for the dof)
             
    // blend the color with the previous frame
    vec2 q = fragCoord/viewPort.xy;
    vec4 prev = texture(iChannel0, vec3(q, 0.0));
    outColor = mix(vec4(col,t), prev, iFrame==0 ? 0. : .3);
}
]]>
</program>
</language>
</jittershader>
