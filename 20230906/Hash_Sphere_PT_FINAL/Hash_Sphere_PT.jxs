<jittershader name="default">
	<description>Default Slab </description>
	
	
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="viewPort" type="vec2" state="VIEWPORT" />

	<param name="iTime" type="float" default="0.0" />
	
	<language name="glsl" version="1.5">
		
		
		<bind param="MVP" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="viewPort" program="fp" />

		<bind param="iTime" program="fp" />
		
		<program name="vp" type="vertex"  >
<![CDATA[
	#version 330 core
	
	in vec3 pos;
	in vec2 uv;
	
	out jit_PerVertex {
		vec2 uv;	
	} jit_out;

	uniform mat4 MVP;

	void main(void) {
		gl_Position = MVP*vec4(pos, 1.);
		jit_out.uv = uv;
	}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;	
} jit_in;

layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;

// https://www.shadertoy.com/view/4lVXDR
/*
Just a test ray tracing a sphere with a twist.
Zavie
*/

#define MAX_BOUNCES 3
#define PI acos(-1.)
float gamma = 2.2;


// Hash functions 
float hash(float x) { 
	return fract(sin(x) * 43758.5453); 
}

float hash(vec2 v){ 
	return fract(sin(dot(v.xy ,vec2(12.9898,78.233))) * 43758.5453); 
}

//Structures

struct RayInfo
{
    vec3 origin;// origin
    vec3 dir;	// direction
};

struct Material
{
    vec3 alb;	// diffuse color
    vec3 spe;	// specular color (colored)
};

struct Hit
{
    float t0;	// solution to p=o+t*d
    vec3 nor;	// normal
    Material mat;	// material
};

const Hit noHit = Hit(1e10, vec3(0.), Material(vec3(-1.), vec3(-1.)));

struct Plane
{
    float d;	// solution to dot(n,p)+d=0
    vec3 n;		// normal
    Material mat;	// material
};

struct Sphere
{
	float radius;	// radius
    vec3 p;		// center position
    Material mat;	// material
};

struct DirectionalLight
{
    vec3 d;     // Direction
    vec3 c;     // Color
};

// Insersect Functions

Hit intersectPlane(Plane p, RayInfo ray)
{
    float dotnd = dot(p.n, ray.dir);
    if (dotnd > 0.) 
    return noHit;

    float t0 = -(dot(ray.origin, p.n) + p.d) / dotnd;
    return Hit(t0, p.n, p.mat);
}

float surfaceHash(vec2 p, float freq)
{
    float h = 0.;
    float sum = 0.;
    for (int i = 0; i < 5; ++i)
    {
        h = 2. * h + hash(floor(freq * p));
        sum = 2. * sum + 1.;
        freq *= 2.;
    }
    
    return h / sum;
}

Hit intersectHashedSphere(Sphere s, RayInfo ray)
{
	vec3 op = s.p - ray.origin;
    float b = dot(op, ray.dir);
    float discriminant = b * b - dot(op, op) + s.radius * s.radius;
    if (discriminant < 0.) 
    return noHit;

    discriminant = sqrt(discriminant);
    float t1 = b - discriminant;
    float t2 = b + discriminant;

    float t0 = t1;
    vec3 p = ray.origin + t0 * ray.dir;
    vec3 n = (ray.origin + t0 * ray.dir - s.p) / s.radius;
    
    // Reject intersection solution based on random magic.
    if (t0 < 0. || surfaceHash(p.xy + vec2(0., -iTime), 3.) < 0.5)
    {
        t0 = t2;
        p = ray.origin + t0 * ray.dir;
        n = (ray.origin + t0 * ray.dir - s.p) / s.radius;
    }
    if (t0 < 0. || surfaceHash(p.xy + vec2(0., -iTime), 3.) < 0.5)
    {
        return noHit;
    }

    return Hit(t0, n, s.mat);
}

vec3 randomVector(float seed)
{
    float r2 = hash(seed);
    float phi = 2. * PI * hash(seed + r2);
    float sina = sqrt(r2);
    float cosa = sqrt(1. - r2);

    return vec3(cos(phi) * sina, cosa, sin(phi) * sina);
}

bool compare(inout Hit a, Hit b)
{
    if (b.mat.spe.r >= 0. && b.t0 < a.t0)
    {
        a = b;
        return true;
    }
    return false;
}

Hit intersectScene(RayInfo ray)
{
    vec3 axis1 = randomVector(floor(iTime));
    vec3 axis2 = randomVector(floor(iTime+1.));
    vec3 axis = normalize(mix(axis1, axis2, fract(iTime)));
    float translation = 4.*abs(2.*fract(iTime/8.)-1.) - 2.;

    Material weirdMat = Material(0.05 * vec3(0., 0.05, 1.), 0.1 * vec3(1.1, 0.08, 0.01));
    Sphere s = Sphere(1.6, vec3(0., 1.6, 0.), weirdMat);
    Plane p  = Plane(0., vec3(0., 1., 0.), Material(vec3(0.05), vec3(0.02)));

    Hit hit = noHit;
    compare(hit, intersectPlane(p, ray));
    compare(hit, intersectHashedSphere(s, ray));
    return hit;
}

// Light

DirectionalLight sunLight = DirectionalLight(normalize(vec3(1., .5, .5)), vec3(1e3));
vec3 skyColor(vec3 d)
{
    float transition = pow(smoothstep(0.02, .5, d.y), 0.4);

    vec3 sky = 2e2*mix(vec3(0.52, 0.77, 1), vec3(0.12, 0.43, 1), transition);
    vec3 sun = sunLight.c * pow(abs(dot(d, sunLight.d)), 5000.);
    return sky + sun;
}

float pow5(float x) { return x * x * x * x * x; }

// Schlick approximation
vec3 fresnel(vec3 h, vec3 v, vec3 f0)
{
    return pow5(1. - clamp(dot(h, v), 0., 1.)) * (1. - f0) + f0;
}

float epsilon = 4e-4;

vec3 accountForDirectionalLight(vec3 p, vec3 n, DirectionalLight l)
{
    if (intersectScene(RayInfo(p + epsilon * l.d, l.d)).mat.spe.r < 0.)
    {
        return clamp(dot(n, l.d), 0., 1.) * l.c;
    }
	return vec3(0.);
}

vec3 radiance(RayInfo ray)
{
    vec3 accum = vec3(0.);
    vec3 attenuation = vec3(1.);

    for (int i = 0; i <= MAX_BOUNCES; ++i)
    {
        Hit hit = intersectScene(ray);

        if (hit.mat.spe.r >= 0.)
        {
            vec3 f = fresnel(hit.nor, -ray.dir, hit.mat.spe);

            vec3 hitPos = ray.origin + hit.t0 * ray.dir;

            // Diffuse
            vec3 incoming = vec3(0.);
            incoming += accountForDirectionalLight(hitPos, hit.nor, sunLight);

            accum += (1. - f) * attenuation * hit.mat.alb * incoming;

            // Specular: next bounce
            attenuation *= f;
            vec3 d = reflect(ray.dir, hit.nor);
            ray = RayInfo(ray.origin + hit.t0 * ray.dir + epsilon * d, d);
        }
        else
        {
            accum += attenuation * skyColor(ray.dir);
            break;
        }
    }
    return accum;
}

// Tone mapping

// See: http://filmicgames.com/archives/75
vec3 Uncharted2ToneMapping(vec3 color)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	float W = 11.2;
	float exposure = 0.012;
	color *= exposure;
	color = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;
	float white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;
	color /= white;
	color = pow(color, vec3(1. / gamma));
	return color;
}

// Scene

void main()
{

	RayInfo ray;

	// vec2 fragCoord = jit_in.uv * viewPort.xy;
	// vec2 screenPos = 2. * fragCoord.xy / viewPort.xy - 1.;

	vec2 screenPos = jit_in.uv*2 - 1;

    float o1 = 0.25;
    float o2 = 0.75;
    vec2 msaa[4];
    msaa[0] = vec2( o1,  o2);
    msaa[1] = vec2( o2, -o1);
    msaa[2] = vec2(-o1, -o2);
    msaa[3] = vec2(-o2,  o1);

    vec3 color = vec3(0.);
    for (int i = 0; i < 4; ++i)
    {
        vec3 p0 = vec3(0., 1.1, 4.);
        vec3 p = p0;
        vec3 offset = vec3(msaa[i] / viewPort.y, 0.);
        vec3 d = normalize(vec3(viewPort.x/viewPort.y * screenPos.x, screenPos.y, -1.5) + offset);
        RayInfo ray = RayInfo(p, d);
        color += radiance(ray) / 4.;
    }

	outColor = vec4(Uncharted2ToneMapping(color),1.0);
}
		]]>
		</program>
	</language>
</jittershader>
