<jittershader name="Path tracing">
	<description>Default Slab </description>
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iMouse" type="vec2" default="0.0 0.0" />
	<param name="envTex" type="int" default="0" />
	

	<language name="glsl" version="1.5">
		<bind param="MVP" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="color" program="vp" />
		<bind param="viewPort" program="fp" />
		<bind param="iMouse" program="fp" />
		<bind param="sample" program="fp" />
		
		<bind param="envTex" program="fp" />
		
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;
			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = vec4(pos, 1.);
				jit_out.uv = uv;
			}
		]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core
#define BOUNCES 8
#define VERY_FAR 100000000
#define TWOPI 6.2831855

in jit_PerVertex {
	vec2 uv;
} jit_in;

layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform vec2 iMouse;

uniform samplerCube envTex;

const float PI = 3.14159265358979323846264338327;
const float PI2 = 6.28318530718;

const vec3 boxColor = vec3(0.5, 1.0, 0.5);

mat3 lookAt(vec3 origin, vec3 target, vec3 up) {
  vec3 z = normalize(origin - target);
  vec3 x = normalize(cross(up, z));
  vec3 y = cross(z, x);
  return mat3(x, y, z);
}

vec3 toSpherical(vec2 uv) {
  float theta = uv.y * PI;
  float phi = uv.x * 2.0 * PI;

  float x = sin(phi) * sin(theta) * -1.0;
  float y = cos(theta);
  float z = cos(phi) * sin(theta) * -1.0;

  return vec3(x,y,z);
}

float sdBox( vec3 p, vec3 b ) {
  vec3 d = abs(p) - b;
  return min(max(d.x,max(d.y,d.z)), 0.0) + length(max(d, 0.0));
}

vec3 render(vec3 p){
  vec4 d = vec4(1.0);
  vec2 mouse = (iMouse.xy / viewPort.xy);
  vec3 color = texture(envTex, -p).rgb;
  
  vec3 pos = toSpherical(mouse);
  
  pos.y *= -1.0;
  pos = (p + pos) * lookAt(pos, vec3(0.0), vec3(0.0, 1.0, 0.0));

  float depth = sdBox(pos, vec3(0.25));
  color = mix(color, boxColor, smoothstep(1.0/viewPort.x, 0.0, depth));

  return color;
}

void main(){  

  vec2 fragCoord = jit_in.uv * viewPort.xy;
  vec2 s = fragCoord.xy / viewPort.xy * vec2(PI2, PI);
  vec3 rd = vec3(sin(s.y) * sin(s.x), cos(s.y), sin(s.y) * cos(s.x));
  
  outColor = vec4(render(rd), 1.0);
}

]]>
	</program>
	</language>
</jittershader>

