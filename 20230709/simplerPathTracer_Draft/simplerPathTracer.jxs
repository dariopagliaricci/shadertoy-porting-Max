<jittershader name="default">
	<description>Default Slab </description>


	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />

	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />

	<param name="envTex" type="int" default="0" />
	<param name="sample" type="float" default="0.0" />

	<language name="glsl" version="1.5">


		<bind param="MVP" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="viewPort" program="fp" />
		<bind param="eye" program="fp" />

		<bind param="envTex" program="fp" />
		<bind param="sample" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = vec4(pos, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core
#define BOUNCES 8
#define VERY_FAR 1e8


uniform vec2 viewPort;
uniform vec3 eye;
uniform float sample;

uniform samplerCube envTex;

struct rayInfo {
	vec3 origin;
	vec3 dir;
};

struct hitInfo {
	float t0;
	vec3 nor;
};

struct matInfo {
	vec3 alb;
	vec3 emi;
    float percentSpe;
    float roughness;
    vec3 specularCol;
};

struct searchInfo{
	float rngState;
	vec3 finalColor;
	vec3 through;
};

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

// Hash functions by Nimitz:
// https://www.shadertoy.com/view/Xt3cDn

uint base_hash(uvec2 p) {
    p = 1103515245U*((p >> 1U)^(p.yx));
    uint h32 = 1103515245U*((p.x)^(p.y>>3U));
    return h32^(h32 >> 16);
}

float g_seed = 0.;

float hash1(inout searchInfo search) {
    uint n = base_hash(floatBitsToUint(vec2(search.rngState+=.1,search.rngState+=.1)));
    return float(n)/float(0xffffffffU);
}

vec2 hash2(inout searchInfo search) {
    uint n = base_hash(floatBitsToUint(vec2(search.rngState+=.1,search.rngState+=.1)));
    uvec2 rz = uvec2(n, n*48271U);
    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);
}

vec3 hash3(inout searchInfo search) {
    uint n = base_hash(floatBitsToUint(vec2(search.rngState+=.1,search.rngState+=.1)));
    uvec3 rz = uvec3(n, n*16807U, n*48271U);
    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);
}

//https://www.shadertoy.com/view/tddSz4 (Adapted)

vec3 random_in_unit_sphere(inout searchInfo search) {
    vec3 h = hash3(search) * vec3(2.,6.28318530718,1.)-vec3(1,0,0);
    float phi = h.y;
    float r = pow(h.z, 1./3.);
    return r * vec3(sqrt(1.-h.x*h.x)*vec2(sin(phi),cos(phi)),h.x);
}

float ScalarTriple(vec3 u, vec3 v, vec3 w)
{
    return dot(cross(u, v), w);
}

void TestQuadTrace(inout rayInfo ray, inout hitInfo hit, inout matInfo mat, in vec3 a, in vec3 b, in vec3 c, in vec3 d, vec3 color, vec3 emissive, float percentSpecular, float roughness, vec3 specularColor)
{
    // calculate normal and flip vertices order if needed
    vec3 normal = normalize(cross(c-a, c-b));
    if (dot(normal, ray.dir) > 0.0f)
    {
        normal *= -1.0f;
        
		vec3 temp = d;
        d = a;
        a = temp;
        
        temp = b;
        b = c;
        c = temp;
    }
    
    vec3 p = ray.origin;
    vec3 q = ray.origin + ray.dir;
    vec3 pq = q - p;
    vec3 pa = a - p;
    vec3 pb = b - p;
    vec3 pc = c - p;
    
    // determine which triangle to test against by testing against diagonal first
    vec3 m = cross(pc, pq);
    float v = dot(pa, m);
    vec3 intersectPos;
    if (v >= 0.0f)
    {
        // test against triangle a,b,c
        float u = -dot(pb, m);
        if (u < 0.0f) return;
        float w = ScalarTriple(pq, pb, pa);
        if (w < 0.0f) return;
        float denom = 1.0f / (u+v+w);
        u*=denom;
        v*=denom;
        w*=denom;
        intersectPos = u*a+v*b+w*c;
    }
    else
    {
        vec3 pd = d - p;
        float u = dot(pd, m);
        if (u < 0.0f) return;
        float w = ScalarTriple(pq, pa, pd);
        if (w < 0.0f) return;
        v = -v;
        float denom = 1.0f / (u+v+w);
        u*=denom;
        v*=denom;
        w*=denom;
        intersectPos = u*a+v*d+w*c;
    }
    
    float dist;
    if (abs(ray.dir.x) > 0.1f)
    {
        dist = (intersectPos.x - ray.origin.x) / ray.dir.x;
    }
    else if (abs(ray.dir.y) > 0.1f)
    {
        dist = (intersectPos.y - ray.origin.y) / ray.dir.y;
    }
    else
    {
        dist = (intersectPos.z - ray.origin.z) / ray.dir.z;
    }
    
	if(dist < hit.t0) //(dist > c_minimumRayHitTime && dist < info.dist)
    {
        hit.t0 = dist;        
        hit.nor = normal;
        mat.alb = color;
        mat.emi = emissive;
        mat.percentSpe = percentSpecular;
        mat.roughness = roughness;
        mat.specularCol= specularColor;
        return;
    }    
    
    return;
}

void TestSphereTrace(in rayInfo ray, inout hitInfo hit, inout matInfo mat, in vec4 sphere, vec3 color, vec3 emissive, float percentSpecular, float roughness, vec3 specularColor)
{
	//get the vector from the center of this sphere to where the ray begins.
	vec3 m = ray.origin - sphere.xyz;

    //get the dot product of the above vector and the ray's vector
	float b = dot(m, ray.dir);

	float c = dot(m, m) - sphere.w * sphere.w;

	//exit if r's origin outside s (c > 0) and r pointing away from s (b > 0)
	if(c > 0.0 && b > 0.0)
		return;

	//calculate discriminant
	float discr = b * b - c;

	//a negative discriminant corresponds to ray missing sphere
	if(discr < 0.0)
		return;
    
	//ray now found to intersect sphere, compute smallest t value of intersection
    bool fromInside = false;
	float dist = -b - sqrt(discr);
    if (dist < 0.0f)
    {
        fromInside = true;
        dist = -b + sqrt(discr);
    }
    
	if (dist < hit.t0) //(dist > c_minimumRayHitTime && dist < info.dist)
    {
        hit.t0 = dist;        
        hit.nor = normalize((ray.origin+ray.dir*dist) - sphere.xyz) * (fromInside ? -1.0f : 1.0f);
        mat.alb = color;
        mat.emi = emissive;
        mat.percentSpe = percentSpecular;
        mat.roughness = roughness;
        mat.specularCol= specularColor;
        return;
    }
    
    return;
}

void TestSceneTrace(inout rayInfo ray, inout hitInfo hit, inout matInfo mat)
{    
    
    // back wall
    {
        vec3 A = vec3(-12.6f, -12.6f, 25.0f);
        vec3 B = vec3( 12.6f, -12.6f, 25.0f);
        vec3 C = vec3( 12.6f,  12.6f, 25.0f);
        vec3 D = vec3(-12.6f,  12.6f, 25.0f);
        TestQuadTrace(ray, hit, mat, A, B, C, D, vec3(0.7f, 0.7f, 0.7f), vec3(0.0f, 0.0f, 0.0f), 0.0f, 0.0f, vec3(0.0f, 0.0f, 0.0f));
        // {
        //     hitInfo.material.albedo = vec3(0.7f, 0.7f, 0.7f);
        //     hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
        //     hitInfo.material.percentSpecular = 0.0f;
        //     hitInfo.material.roughness = 0.0f;
        //     hitInfo.material.specularColor = vec3(0.0f, 0.0f, 0.0f);
        // }
    }
    
    // floor
    {
        vec3 A = vec3(-12.6f, -12.45f, 25.0f);
        vec3 B = vec3( 12.6f, -12.45f, 25.0f);
        vec3 C = vec3( 12.6f, -12.45f, 15.0f);
        vec3 D = vec3(-12.6f, -12.45f, 15.0f);
        TestQuadTrace(ray, hit, mat, A, B, C, D, vec3(0.7f, 0.7f, 0.7f), vec3(0.0f, 0.0f, 0.0f), 0.0f, 0.0f, vec3(0.0f, 0.0f, 0.0f));
        // {
        //     hitInfo.material.albedo = vec3(0.7f, 0.7f, 0.7f);
        //     hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
        //     hitInfo.material.percentSpecular = 0.0f;
        //     hitInfo.material.roughness = 0.0f;
        //     hitInfo.material.specularColor = vec3(0.0f, 0.0f, 0.0f);            
        // }        
    }
    
    // cieling
    {
        vec3 A = vec3(-12.6f, 12.5f, 25.0f);
        vec3 B = vec3( 12.6f, 12.5f, 25.0f);
        vec3 C = vec3( 12.6f, 12.5f, 15.0f);
        vec3 D = vec3(-12.6f, 12.5f, 15.0f);
        TestQuadTrace(ray, hit, mat, A, B, C, D, vec3(0.7f, 0.7f, 0.7f), vec3(0.0f, 0.0f, 0.0f), 0.0f, 0.0f, vec3(0.0f, 0.0f, 0.0f));
        // {
        //     hitInfo.material.albedo = vec3(0.7f, 0.7f, 0.7f);
        //     hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
        //     hitInfo.material.percentSpecular = 0.0f;
        //     hitInfo.material.roughness = 0.0f;
        //     hitInfo.material.specularColor = vec3(0.0f, 0.0f, 0.0f);
        // }        
    }    
    
    // left wall
    {
        vec3 A = vec3(-12.5f, -12.6f, 25.0f);
        vec3 B = vec3(-12.5f, -12.6f, 15.0f);
        vec3 C = vec3(-12.5f,  12.6f, 15.0f);
        vec3 D = vec3(-12.5f,  12.6f, 25.0f);
        TestQuadTrace(ray, hit, mat, A, B, C, D, vec3(0.7f, 0.1f, 0.1f), vec3(0.0f, 0.0f, 0.0f), 0.0f, 0.0f, vec3(0.0f, 0.0f, 0.0f));
        // {
        //     hitInfo.material.albedo = vec3(0.7f, 0.1f, 0.1f);
        //     hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
        //     hitInfo.material.percentSpecular = 0.0f;
        //     hitInfo.material.roughness = 0.0f;
        //     hitInfo.material.specularColor = vec3(0.0f, 0.0f, 0.0f);
        // }        
    }
    
    // right wall 
    {
        vec3 A = vec3( 12.5f, -12.6f, 25.0f);
        vec3 B = vec3( 12.5f, -12.6f, 15.0f);
        vec3 C = vec3( 12.5f,  12.6f, 15.0f);
        vec3 D = vec3( 12.5f,  12.6f, 25.0f);
        TestQuadTrace(ray, hit, mat, A, B, C, D, vec3(0.1f, 0.7f, 0.1f), vec3(0.0f, 0.0f, 0.0f), 0.0f, 0.0f, vec3(0.0f, 0.0f, 0.0f));
        // {
        //     hitInfo.material.albedo = vec3(0.1f, 0.7f, 0.1f);
        //     hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
        //     hitInfo.material.percentSpecular = 0.0f;
        //     hitInfo.material.roughness = 0.0f;
        //     hitInfo.material.specularColor = vec3(0.0f, 0.0f, 0.0f);            
        // }        
    }    
    
    // light
    {
        vec3 A = vec3(-5.0f, 12.4f,  22.5f);
        vec3 B = vec3( 5.0f, 12.4f,  22.5f);
        vec3 C = vec3( 5.0f, 12.4f,  17.5f);
        vec3 D = vec3(-5.0f, 12.4f,  17.5f);
        TestQuadTrace(ray, hit, mat, A, B, C, D, vec3(0.0f, 0.0f, 0.0f), vec3(1.0f, 0.9f, 0.7f) * 20.0f, 0.0f, 0.0f, vec3(0.0f, 0.0f, 0.0f));
        // {
        //     hitInfo.material.albedo = vec3(0.0f, 0.0f, 0.0f);
        //     hitInfo.material.emissive = vec3(1.0f, 0.9f, 0.7f) * 20.0f;
        //     hitInfo.material.percentSpecular = 0.0f;
        //     hitInfo.material.roughness = 0.0f;
        //     hitInfo.material.specularColor = vec3(0.0f, 0.0f, 0.0f);            
        // }        
    }
    
    TestSphereTrace(ray, hit, mat, vec4(-9.0f, -9.5f, 20.0f, 3.0f), vec3(0.9f, 0.9f, 0.5f), vec3(0.0f, 0.0f, 0.0f), 0.1f, 0.2f, vec3(0.9f, 0.9f, 0.9f));
    // {
    //     hitInfo.material.albedo = vec3(0.9f, 0.9f, 0.5f);
    //     hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);        
    //     hitInfo.material.percentSpecular = 0.1f;
    //     hitInfo.material.roughness = 0.2f;
    //     hitInfo.material.specularColor = vec3(0.9f, 0.9f, 0.9f);        
    // } 
    
    TestSphereTrace(ray, hit, mat, vec4(0.0f, -9.5f, 20.0f, 3.0f), vec3(0.9f, 0.5f, 0.9f), vec3(0.0f, 0.0f, 0.0f), 0.3f, 0.2f, vec3(0.9f, 0.9f, 0.9f));
    // {
    //     hitInfo.material.albedo = vec3(0.9f, 0.5f, 0.9f);
    //     hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);   
    //     hitInfo.material.percentSpecular = 0.3f;
    //     hitInfo.material.roughness = 0.2;
    //     hitInfo.material.specularColor = vec3(0.9f, 0.9f, 0.9f);        
    // }    
    
    // // a ball which has blue diffuse but red specular. an example of a "bad material".
    // // a better lighting model wouldn't let you do this sort of thing
    TestSphereTrace(ray, hit, mat, vec4(9.0f, -9.5f, 20.0f, 3.0f), vec3(0.0f, 0.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f), 0.5f, 0.4f, vec3(1.0f, 0.0f, 0.0f));
    // {
    //     hitInfo.material.albedo = vec3(0.0f, 0.0f, 1.0f);
    //     hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
    //     hitInfo.material.percentSpecular = 0.5f;
    //     hitInfo.material.roughness = 0.4f;
    //     hitInfo.material.specularColor = vec3(1.0f, 0.0f, 0.0f);        
    // }
    
    // // shiny green balls of varying roughnesses
    // {
    TestSphereTrace(ray, hit, mat, vec4(-10.0f, 0.0f, 23.0f, 1.75f), vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f), 1.0f, 0.0f, vec3(0.3f, 1.0f, 0.3f));
    //     if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(-10.0f, 0.0f, 23.0f, 1.75f)+sceneTranslation4))
    //     {
    //         hitInfo.material.albedo = vec3(1.0f, 1.0f, 1.0f);
    //         hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);        
    //         hitInfo.material.percentSpecular = 1.0f;
    //         hitInfo.material.roughness = 0.0f;
    //         hitInfo.material.specularColor = vec3(0.3f, 1.0f, 0.3f);       
    //     } 
    TestSphereTrace(ray, hit, mat, vec4(-5.0f, 0.0f, 23.0f, 1.75f), vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f), 1.0f, 0.25f, vec3(0.3f, 1.0f, 0.3f));    
        
    //     if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(-5.0f, 0.0f, 23.0f, 1.75f)+sceneTranslation4))
    //     {
    //         hitInfo.material.albedo = vec3(1.0f, 1.0f, 1.0f);
    //         hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);        
    //         hitInfo.material.percentSpecular = 1.0f;
    //         hitInfo.material.roughness = 0.25f;
    //         hitInfo.material.specularColor = vec3(0.3f, 1.0f, 0.3f);
    //     }            
    TestSphereTrace(ray, hit, mat, vec4(0.0f, 0.0f, 23.0f, 1.75f), vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f), 1.0f, 0.5f, vec3(0.3f, 1.0f, 0.3f));    
    
    //     if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(0.0f, 0.0f, 23.0f, 1.75f)+sceneTranslation4))
    //     {
    //         hitInfo.material.albedo = vec3(1.0f, 1.0f, 1.0f);
    //         hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);        
    //         hitInfo.material.percentSpecular = 1.0f;
    //         hitInfo.material.roughness = 0.5f;
    //         hitInfo.material.specularColor = vec3(0.3f, 1.0f, 0.3f);
    //     }            
    TestSphereTrace(ray, hit, mat, vec4(5.0f, 0.0f, 23.0f, 1.75f), vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f), 1.0f, 0.75f, vec3(0.3f, 1.0f, 0.3f));   
    
    //     if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(5.0f, 0.0f, 23.0f, 1.75f)+sceneTranslation4))
    //     {
    //         hitInfo.material.albedo = vec3(1.0f, 1.0f, 1.0f);
    //         hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);        
    //         hitInfo.material.percentSpecular = 1.0f;
    //         hitInfo.material.roughness = 0.75f;
    //         hitInfo.material.specularColor = vec3(0.3f, 1.0f, 0.3f);
    //     }        
    TestSphereTrace(ray, hit, mat, vec4(10.0f, 0.0f, 23.0f, 1.75f), vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f), 1.0f, 1.0f, vec3(0.3f, 1.0f, 0.3f));  
    
    //     if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(10.0f, 0.0f, 23.0f, 1.75f)+sceneTranslation4))
    //     {
    //         hitInfo.material.albedo = vec3(1.0f, 1.0f, 1.0f);
    //         hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);        
    //         hitInfo.material.percentSpecular = 1.0f;
    //         hitInfo.material.roughness = 1.0f;
    //         hitInfo.material.specularColor = vec3(0.3f, 1.0f, 0.3f);
    //     }           
    // }
}

void computeFirstRay(out rayInfo ray, inout searchInfo search) {
	vec2 screenPos = jit_in.uv*2-1;
	float aspectRatio = viewPort.x / viewPort.y;
	screenPos.x *= aspectRatio;
	//Antialiasing
	vec2 jittering = hash2(search)-0.5;
	jittering /= viewPort;// stay in the subpixel area
	screenPos += jittering*3;

	ray.origin = eye;

	vec3 target = vec3(0.);
	vec3 front = normalize(target - ray.origin);
	vec3 right = cross(vec3(0., 1., 0.), front);
	vec3 up = cross(front, right);

	vec3 pixPos = vec3(screenPos, 4);
	ray.dir = normalize(pixPos.x*right + pixPos.y*up + pixPos.z*front);
}

void rayTrace(in rayInfo ray, inout hitInfo hit, inout matInfo mat, inout searchInfo search){
	
	hit.t0 = VERY_FAR;
	// for(int i = 0; i < 50; i++){
	// 	vec3 emissive = texelFetch(emiBuff, i).rgb;
	// 	vec3 alb = texelFetch(albBuff, i).rgb;
	// 	vec4 sphere = texelFetch(sphereBuff, i);
	// 	TestSphereTrace(ray, hit, mat, sphere, alb, emissive, percentSpecular, roughness, specularColor);
	// }
    vec3 emissive01 = vec3(0.0f, 0.0f, 0.0f);
    vec3 emissive02 = vec3(0.0f, 0.0f, 0.0f);
    vec3 emissive03 = vec3(0.0f, 0.0f, 0.0f);
    //shinny green balls of varying roughness
    vec3 emissive04 = vec3(0.0f, 0.0f, 0.0f);
    vec3 emissive05 = vec3(0.0f, 0.0f, 0.0f);
    vec3 emissive06 = vec3(0.0f, 0.0f, 0.0f);
    vec3 emissive07 = vec3(0.0f, 0.0f, 0.0f);
    vec3 emissive08 = vec3(0.0f, 0.0f, 0.0f);
    vec3 alb01 = vec3(0.9f, 0.9f, 0.5f);
    vec3 alb02 = vec3(0.9f, 0.5f, 0.9f);
    vec3 alb03 = vec3(0.9f, 0.9f, 0.5f);
    //shinny green balls of varying roughness
    vec3 alb04 = vec3(1.0f, 1.0f, 1.0f);
    vec3 alb05 = vec3(1.0f, 1.0f, 1.0f);
    vec3 alb06 = vec3(1.0f, 1.0f, 1.0f);
    vec3 alb07 = vec3(1.0f, 1.0f, 1.0f);
    vec3 alb08 = vec3(1.0f, 1.0f, 1.0f);
    vec4 sphere01 = vec4(-9.0f, -9.5f, 20.0f, 3.0f);
    vec4 sphere02 = vec4(0.0f, -9.5f, 20.0f, 3.0f);
    vec4 sphere03 = vec4(9.0f, -9.5f, 20.0f, 3.0f);
    //shinny green balls of varying roughness
    vec4 sphere04 = vec4(-10.0f, 0.0f, 23.0f, 1.75f);
    vec4 sphere05 = vec4(-5.0f, 0.0f, 23.0f, 1.75f);
    vec4 sphere06 = vec4(0.0f, 0.0f, 23.0f, 1.75f);
    vec4 sphere07 = vec4(5.0f, 0.0f, 23.0f, 1.75f);
    vec4 sphere08 = vec4(10.0f, 0.0f, 23.0f, 1.75f);
    float percentSpecular01 = 0.1f;
    float percentSpecular02 = 0.3f;
    float percentSpecular03 = 0.5f;
    //shinny green balls of varying roughness
    float percentSpecular04 = 1.0f;
    float percentSpecular05 = 1.0f;
    float percentSpecular06 = 1.0f;
    float percentSpecular07 = 1.0f;
    float percentSpecular08 = 1.0f;
    float roughness01 = 0.2f;
    float roughness02 = 0.2f;
    float roughness03 = 0.4f;
    //shinny green balls of varying roughness
    float roughness04 = 0.0f;
    float roughness05 = 0.25f;
    float roughness06 = 0.5f;
    float roughness07 = 0.75f;
    float roughness08 = 1.0f;
    vec3 specularColor01 = vec3(0.9f, 0.9f, 0.9f);
    vec3 specularColor02 = vec3(0.9f, 0.9f, 0.9f);
    vec3 specularColor03 = vec3(0.9f, 0.9f, 0.9f);
    //shinny green balls of varying roughness
    vec3 specularColor04 = vec3(0.3f, 1.0f, 0.3f);
    vec3 specularColor05 = vec3(0.3f, 1.0f, 0.3f);
    vec3 specularColor06 = vec3(0.3f, 1.0f, 0.3f);
    vec3 specularColor07 = vec3(0.3f, 1.0f, 0.3f);
    vec3 specularColor08 = vec3(0.3f, 1.0f, 0.3f);
    TestSphereTrace(ray, hit, mat, sphere01, alb01, emissive01, percentSpecular01, roughness01, specularColor01);
    TestSphereTrace(ray, hit, mat, sphere02, alb02, emissive02, percentSpecular02, roughness02, specularColor02);
    TestSphereTrace(ray, hit, mat, sphere03, alb03, emissive03, percentSpecular03, roughness03, specularColor03);
    //shinny green balls
    TestSphereTrace(ray, hit, mat, sphere04, alb04, emissive04, percentSpecular04, roughness04, specularColor04);
    TestSphereTrace(ray, hit, mat, sphere05, alb05, emissive05, percentSpecular05, roughness05, specularColor05);
    TestSphereTrace(ray, hit, mat, sphere06, alb06, emissive06, percentSpecular06, roughness06, specularColor06);	
    TestSphereTrace(ray, hit, mat, sphere07, alb07, emissive07, percentSpecular07, roughness07, specularColor07);
    TestSphereTrace(ray, hit, mat, sphere08, alb08, emissive08, percentSpecular08, roughness08, specularColor08);

	return;
}

void miss(inout searchInfo search, in rayInfo ray){
	search.finalColor += texture(envTex, ray.dir).rgb*search.through;//vec3(0.)
}

void updateColor(inout matInfo mat, inout searchInfo search){
	search.finalColor += mat.emi*search.through;
	search.through *= mat.alb;
}

void createNewRay(inout rayInfo ray, inout hitInfo hit, inout matInfo mat, inout searchInfo search){
	vec3 hitPos = ray.origin + ray.dir*hit.t0;
	ray.origin = hitPos;
	ray.origin += 0.001*hit.nor;//avoid false self intersections
	ray.dir = normalize(random_in_unit_sphere(search)+hit.nor);
}

void getFragmentColor(inout rayInfo ray, inout hitInfo hit, inout matInfo mat, inout searchInfo search){
	search.through = vec3(1.);
	search.finalColor = vec3(0.);
	for(int i = 0; i < BOUNCES; i++){
		rayTrace(ray, hit, mat, search);
		TestSceneTrace(ray, hit, mat);
		if(hit.t0 == VERY_FAR){
			miss(search, ray);
			return;
		}
		updateColor(mat, search);
		createNewRay(ray, hit, mat, search);
	}
	return;	
}

void initializeRngState(out searchInfo search){

	search.rngState = float(base_hash(floatBitsToUint(jit_in.uv)))/float(0xffffffffU)+sample;
}

void main(void) {

	rayInfo ray;
	hitInfo hit;
	matInfo mat;
	searchInfo search;

	initializeRngState(search);
	computeFirstRay(ray, search);
	getFragmentColor(ray, hit, mat, search);
	outColor.rgb = search.finalColor;
	outColor.a = 1;
}
		]]>
		</program>
	</language>
</jittershader>
