<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iFrame" type="int" default="0" />
	<param name="iChannel0" type="int" default="0" />
	<param name="iChannel1" type="int" default="1" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iChannel0" program="fp" />
		<bind param="iChannel1" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform int iFrame;
uniform samplerCube iChannel0;
uniform samplerCube iChannel1;

//Common//

// Hash function adapted from Dave Hoskins
// https://www.shadertoy.com/view/4djSRW
vec3 hash33(vec3 p3)
{
    p3 = fract(p3 * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy + p3.yxx)*p3.zyx)-0.5;
}

//BufferA//

#define R(th) mat2(cos(th),sin(th),-sin(th),cos(th))
#define rgb(r,g,b) pow(vec3(r,g,b)/255., vec3(2.2))

float dTorus(vec3 p, float r_large, float r_small)
{
    // Calculate distance to torus
    float h = length(p.xy) - r_large;
    float d = sqrt(h*h + p.z*p.z) - r_small;
    return d;
}

float torusGrid(vec3 p, float r_small, float r_large, float angle, vec2 sep)
{
    // Create a grid of tori through domain repetition
    vec3 q = p - vec3(round(p.xy/sep)*sep,0) - vec3(0,sep.y/2.,0);
    q.yz *= R(angle);
    float d = dTorus(q, r_large, r_small);
    q = p - vec3(round(p.xy/sep)*sep,0) - vec3(0,-sep.y/2.,0);
    q.yz *= R(angle);
    d = min(d, dTorus(q, r_large, r_small));
    return d;
}

float material = 0.;
float map(vec3 p)
{
    // Warp space
    p.x += 0.5*cos(0.2*p.y);
    p.y += 0.3*cos(0.3*p.x);
    p.z += 0.3*sin(0.3*p.y+0.2*p.x);
    
    // Weave is a combination of two regular grids of tori
    material = 0.;
    float angle = 0.3;
    vec2 sep = vec2(1,0.8);
    float d = torusGrid(p, 0.07, 0.4, angle, sep);
    d = min(d, torusGrid(p-vec3(sep/2.,0), 0.07, 0.4, -angle, sep));
    
    // Plane below
    vec3 p2 = 12.3*p;
    p2.yz *= R(0.7);
    p2.xz *= R(-0.7);
    vec2 q = p2.xy-round(p2.xy);
    float bump = dot(q,q) * 0.005;
    float d2 = p.z+0.15+bump;
    if(d2<d){ material = 1.; d = d2; }
    return d;
}

vec3 normal(vec3 p)
{
    // Tetrahedral normal calculation
    // See https://iquilezles.org/articles/normalsSDF
    vec2 e = 0.001 * vec2(1,-1);
    return normalize(
        e.xxx*map(p+e.xxx)
       +e.xyy*map(p+e.xyy)
       +e.yxy*map(p+e.yxy)
       +e.yyx*map(p+e.yyx));
}

float raymarch(vec3 ro, vec3 rd)
{
    // Standard raymarching loop
    float d, t=0.;
    for(int i=0;i<100;i++)
    {
        d = map(ro+t*rd);
        if(d<0.001 || t>100.) break;
        t += d;
    }
    return t;
}

vec3 shade(vec3 ro, vec3 rd, float spNum)
{
    // Simple pathtracing routine: bounce the ray until it exits the scene
    vec3 transmittance = vec3(1);
    int BOUNCES=8;
    int i;
    for(i=0; i<BOUNCES; i++)
    {
        float t = raymarch(ro, rd);
        if(t > 100.) break;
        float mat = material;
        vec3 p = ro+t*rd;
        vec3 n = normal(p);
        
        // Material properties
        // Differentiate between copper color / floor color
        float noise = (sin(p.x*18.)+cos(p.y*12.)+cos(p.x-p.y));
        vec3 f0 = vec3(0.6,0.3,0.2) + 0.2*smoothstep(-0.5,0.5,noise);
        #if 1
        vec3 floorCol = rgb(63,138,125);
        #else
        vec3 floorCol = vec3(0.2,0.3,0.6);
        #endif
        f0 = mat==0. ? f0 : floorCol;
        vec3 fre = f0 + (1.-f0)*pow(clamp(1.+dot(rd,n),0.,1.),5.);
        
        // Bounce ray
        transmittance *= fre;
        rd = reflect(rd, n);
        float roughness = mat==0. ? 0.3 : 0.9;
        rd = normalize(rd + roughness*hash33(p*1000.+spNum));
        ro = p+0.01*n;
    }
    if(i>=BOUNCES) return vec3(0);
    
    // Use a dome to light the scene. Half the dome is occluded.
    vec3 skyColor = pow(textureLod(iChannel1, rd.xzy, 0.).rgb, vec3(2.2));
    skyColor *= step(0., -rd.x+rd.y);
    return transmittance * skyColor;
}

void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    // Place camera
    vec3 ro = vec3(2,-1, 2);
    vec3 camFwd = normalize(-ro);
    vec3 camRight = normalize(cross(camFwd, vec3(0,0,1)));
    vec3 camUp = cross(camRight, camFwd);
    
    // float renderedFrames = texelFetch(iChannel1, ivec2(0,1), 0).a + 1.;
    float renderedFrames = texture(iChannel0, vec3(1.0, 0.0, 0.0)).a + 1;
    // Jitter ray direction for antialiasing
    vec2 jitter = 0.5 * sin(vec2(1,1.62)*renderedFrames);
    vec2 uv = ((fragCoord+jitter)*2.-viewPort.xy)/viewPort.y;
    vec3 rd = normalize(camFwd + 0.5*(camRight*uv.x + camUp*uv.y));
    
    // Calculate ray color
    vec3 col = shade(ro,rd,float(iFrame));
   
    // Check for resolution change
    // float oldRes = texelFetch(iChannel1, ivec2(0,0), 0).a;
    float oldRes = texture(iChannel0, vec3(1.0, 0.0, 0.0)).a;
    if(iFrame > 0 && viewPort.x == oldRes)
    {
        // Accumulate color
        // vec3 oldCol = texture(iChannel1, fragCoord.xy/viewPort.xy).rgb;
        vec3 direction = vec3(fragCoord.xy / viewPort.xy * 2.0 - 1.0, 1.0); // Example direction vector calculation
        vec3 oldCol = texture(iChannel0, normalize(direction)).rgb;

        col = mix(oldCol, col, 1./float(renderedFrames));
    }
    else
    {
        // On resolution change, reset the accumulation
        renderedFrames = 0.;
    }

    // Vignette
    uv = (fragCoord*2.-viewPort.xy)/viewPort.xy;
    col *= smoothstep(2.0,0.7,length(uv));
    
    // ACES tone mapping
    // https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
    // Used in https://www.shadertoy.com/view/ts3Bz7
    col *= 1.8;
    col = (col*(2.51*col+0.03))/(col*(2.43*col+0.59)+0.14);
    col.rgb = pow(col.rgb, vec3(1./2.2));
    
    outColor = vec4(col,1.0);
    
    if(ivec2(fragCoord) == ivec2(0,0))
        outColor.a = viewPort.x;
    if(ivec2(fragCoord) == ivec2(0,1))
        outColor.a = renderedFrames;
}
]]>
</program>
</language>
</jittershader>
