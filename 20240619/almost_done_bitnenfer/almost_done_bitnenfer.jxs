<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iFrame" type="int" default="0" />
	<param name="iMouse" type="vec3" default="0 0 0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iMouse" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform int iFrame;
uniform vec3 iMouse;
uniform samplerCube iChannel0;

#define BOUNCE_COUNT 5
#define saturate(x) clamp((x), 0., 1.)

#define MAX_DIST 480.0
#define MAX_RAY_STEPS 300
#define PI 3.14159265359
#define MOVE_WITH_MOUSE 1

struct RayHit
{
    float dist;
    int id;
    vec3 color;
};

struct Material
{
    vec3 color;
    float shininess;
    float shininessScale;
    float refractiveness;
    float indexOfRefraction;
    float refractionScale;
    bool emissive;
};

float line( vec2 p, vec2 a, vec2 b)
{
    vec2 pa = p - a, ba = b - a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
    return length( pa - ba*h );
}

float smin( float a, float b, float k )
{
    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
    return mix( b, a, h ) - k*h*(1.0-h);
}
// Logo by Kali
float logo(vec2 uv) {
    uv.x-=.12;
    uv.y*=1.2;
    float c = line(uv, vec2(-.65,.3), vec2(-.65,-.3));
    c = min(c,line(uv, vec2(-.65,-.3), vec2(-.35,-.3)));
    c = min(c,line(uv, vec2(-.15,.3), vec2(-.15,-.3)));
    c = min(c,line(uv, vec2(.25,.3), vec2(.05,-.3)));
    c = smin(c,line(uv, vec2(.3,.3), vec2(.50,-.3)),.05);
    c = min(c,line(uv, vec2(.5,-.3), vec2(.2,-.3)));
    return c;
}

vec3 hash33(vec3 p3)
{
	p3 = fract(p3 * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy + p3.yxx)*p3.zyx);

}

float pModInterval1(inout float p, float size, float start, float stop) {
	float halfsize = size*0.5;
	float c = floor((p + halfsize)/size);
	p = mod(p+halfsize, size) - halfsize;
	if (c > stop) { //yes, this might not be the best thing numerically.
		p += size*(c - stop);
		c = stop;
	}
	if (c <start) {
		p += size*(c - start);
		c = start;
	}
	return c;
}

float hash(float n) { return fract(sin(n) * 753.5); }

vec4 noised(in vec3 x)
{
	vec3 p = floor(x);
	vec3 w = fract(x);
	vec3 u = w * w * (3. - 2. * w);
	vec3 du = 6. * w * (1. - w);

	float n = p.x + p.y * 157. + 113. * p.z;

	float a = hash(n);
	float b = hash(n + 1.);
	float c = hash(n + 157.);
	float d = hash(n + 158.);
	float e = hash(n + 113.);
	float f = hash(n + 114.);
	float g = hash(n + 270.);
	float h = hash(n + 271.);

	float k0 = a;
	float k1 = b - a;
	float k2 = c - a;
	float k3 = e - a;
	float k4 = a - b - c + d;
	float k5 = a - c - e + g;
	float k6 = a - b - e + f;
	float k7 = -a + b + c - d + e - f - g + h;

	return vec4(k0 + k1 * u.x + k2 * u.y + k3 * u.z + k4 * u.x * u.y + k5 * u.y * u.z + k6 * u.z * u.x + k7 * u.x * u.y * u.z,
		du * (vec3(k1, k2, k3) + u.yzx * vec3(k4, k5, k6) + u.zxy * vec3(k6, k4, k5) + k7 * u.yzx * u.zxy));
}

vec4 fbmd(in vec3 x)
{
    //return vec4(0);
	float a = 0.,
		b = 0.5,
		f = 1.;
	vec3  d = vec3(0, 0, 0);
	for (int i = 0; i < 2; i++)
	{
		vec4 n = noised(f * x);
		a += b * n.x;           // accumulate values      
		d += b * n.yzw * f; // accumulate derivatives
		b *= 0.5;             // amplitude decrease
		f *= 1.8;             // frequency increase
	}

	return vec4(a, d);
}

vec4 fbmd1(in vec3 x)
{
	float a = 0.,
		b = 0.5,
		f = 1.;
	vec3  d = vec3(0, 0, 0);
	{
		vec4 n = noised(f * x);
		a += b * n.x;           // accumulate values      
		d += b * n.yzw * f; // accumulate derivatives
		b *= 0.5;             // amplitude decrease
		f *= 1.8;             // frequency increase
	}

	return vec4(a, d);
}

float sdBox( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float sdRoundCone( vec3 p, float r1, float r2, float h )
{
  vec2 q = vec2( length(p.xz), p.y );
    
  float b = (r1-r2)/h;
  float a = sqrt(1.0-b*b);
  float k = dot(q,vec2(-b,a));
    
  if( k < 0.0 ) return length(q) - r1;
  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;
        
  return dot(q, vec2(a,b) ) - r1;
}

float sdCapsule( vec3 p, vec3 a, vec3 b, float r )
{
  vec3 pa = p - a, ba = b - a;
  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
  return length( pa - ba*h ) - r;
}

void opUnion(RayHit a, RayHit b, out RayHit result)
{
    if (a.dist < b.dist) result = a;
    else result = b;
}

vec3 joinColor(float a, float b, vec3 ca, vec3 cb)
{
    if (a < b) return ca;
    else return cb;
}

mat2 rot(float r) { return mat2(cos(r), -sin(r), sin(r), cos(r)); }

vec3 getCargoCol(vec3 c)
{
    vec3 col = 0.5 + 0.5*cos( c.y*6.2831 + vec3(0.8,0.25,0.1) );	
	col *= clamp(1.0 - 0.9*c.x*c.x,0.0,1.0);
    return col;
}

RayHit suezPet(vec3 p)
{
    RayHit sceneHit = RayHit(MAX_DIST, -1, vec3(0));
    
    vec3 p1 = p;
    vec3 p2 = p - vec3(0, 0.25, -6);

    p1.y *= 4.;
    float petSdf = length(p1 - vec3(1, -4, -6)) - 3.0;
    p2.xz *= rot(-0.6);

    float eyeSdf = length(abs(p2) - vec3(1.1, 0, 0)) - 0.04;    
    float mouthSdf = length(p2 - vec3(0, 0, -1)) - 0.04;

    
    RayHit petHit = RayHit(petSdf, 8, vec3(0.0));
    RayHit eyeHit = RayHit(eyeSdf, 6, vec3(10.0, 1,1 ));
    RayHit mouthHit = RayHit(mouthSdf, 6, vec3(5, 0,0 ));

    opUnion(sceneHit, petHit, sceneHit);
    opUnion(sceneHit, eyeHit, sceneHit);
    opUnion(sceneHit, mouthHit, sceneHit);
    //sdCapsule( vec3 p, vec3 a, vec3 b, float r )
    float tent1 = sdCapsule(p - vec3(0, -1, 0), vec3(0, 0, 0), vec3(-6. + sin(p.z), sin(p.z) *0.4, -12), 1.);
    float tent2 = sdCapsule(p - vec3(0, -1, 0), vec3(2, 0, 0), vec3(2.+ sin(p.z) , sin(p.z) *0.9, -15.), 1.);
    float tent3 = sdCapsule(p - vec3(0, -1, 0), vec3(0, 0, 0), vec3(-3. + sin(p.z * 2.)*2., 0, 15), 1.);
    RayHit tentHit = RayHit(min(min(tent1, tent2), tent3), 8, vec3(0));
    opUnion(sceneHit, tentHit, sceneHit);

    return sceneHit;
}

RayHit cargo(vec3 p)
{
    RayHit sceneHit = RayHit(MAX_DIST, -1, vec3(0));
    
    p.xz *= rot(-0.1);
    p.xz *= rot(-0.685398);
    
    vec3 cp1 = p - vec3(0, 4, 0);
    float idx = pModInterval1(cp1.z, 0.25, -8., 8.);
    float idy = pModInterval1(cp1.y, 0.23, -8., 5.);
    float idz = pModInterval1(cp1.x, 0.65, -6., 6.);
    float cont1Sdf = sdBox(cp1, vec3(0.3, 0.1, 0.1));
    
    vec3 cp2 = p - vec3(5.4, 4, 0);
    float idx2 = pModInterval1(cp2.z, 0.25, -8., 8.);
    float idy2 = pModInterval1(cp2.y, 0.23, -8., 5.);
    float idz2 = pModInterval1(cp2.x, 0.65, 0., 5.);   
    float cont2Sdf = sdBox(cp2, vec3(0.3, 0.1, 0.1));
    
    vec3 cp3 = p - vec3(-6.0, 4, 0);
    float idx3 = pModInterval1(cp3.z, 0.25, -8., 8.);
    float idy3 = pModInterval1(cp3.y, 0.23, -8., 5.);
    float idz3 = pModInterval1(cp3.x, 0.65, -6., 1.);   
    float cont3Sdf = sdBox(cp3, vec3(0.3, 0.1, 0.1));
    
    vec3 col = joinColor(
        cont1Sdf, cont2Sdf, 
        getCargoCol(hash33(vec3((idz), (idy), (idx)))), 
        getCargoCol(hash33(vec3((idz2), (idy2), (idx2))))
    );
    float m2 = min(cont1Sdf, cont2Sdf);
    col = joinColor(cont3Sdf, m2, getCargoCol(hash33(vec3((idz3), (idy3), (idx3)))), col);
    
    
    RayHit contHit = RayHit(min(cont3Sdf, m2), 7, col.xyz);
    
    opUnion(sceneHit, contHit, sceneHit);

    return sceneHit;
}

RayHit ship(vec3 p)
{
    vec4 noise = fbmd(p*12.);
    RayHit sceneHit = RayHit(MAX_DIST, -1, vec3(0));
    p.xz *= 0.9;
    p.xz *= rot(-0.1);
    
    vec3 bp = p;
    vec3 fp = p;
    bp.xz *= rot(-0.685398);
    fp.x += 8.0;
    fp.z += 6.5;
    fp.y -= 1.5;
    fp.y *= 0.5;
    fp.xy *= rot(0.785398*2.);
    fp.yz *= rot(-0.685398);

    float baseSdf = sdBox(bp, vec3(8, 2, 2));
    float frontSdf = sdRoundCone(fp, 1.0, 2.0, 2.0) - 0.05;
    float topSdf = sdBox(bp + vec3(-4.2, -3, 0), vec3(0.32, 2.2, 1.9));

    topSdf = min(topSdf, sdBox(bp + vec3(4.15, -3, 0), vec3(0.26, 2, 0.5)));
    topSdf = min(topSdf, sdBox(bp + vec3(4.15, -5, 0), vec3(0.26, 0.2, 1.9)));
    topSdf = max(topSdf, -(sdBox(bp + vec3(-4, -5, 0), vec3(1, 1, 0.8))));
    frontSdf = max(frontSdf, -sdBox(bp - vec3(0, 5, 0), vec3(15, 3, 3)));
    baseSdf = min(baseSdf, frontSdf) - 0.02;
    vec3 color = vec3(0.05, 0.1, 0.05) * 2.0;
    if (bp.y > 2.0)
    {
        color = vec3(0.5,0.5,.6);
    }
    color = joinColor(topSdf, baseSdf, vec3(0.8, 0.7, 0.5), color);
    baseSdf = min(baseSdf, topSdf);
    
    vec2 lp = bp.xy - vec2(0, 1.3);
    pModInterval1(lp.x, 2., -2., 2.);
    if (logo(lp) < 0.05)
    {
        color += vec3(0.7);
    }

    
    RayHit shipBase = RayHit(baseSdf - 0.02, 5, color);
    opUnion(sceneHit, shipBase, sceneHit);
    
    return sceneHit;
}

RayHit terrain(vec3 p)
{
    vec4 noise = fbmd(p * 15.);
    vec4 noise2 = fbmd(p * 1.);
    float left = sdBox(p + vec3(-15, 0, 0), vec3(8. * (1.-(p.y * 0.15)) - noise2.x * 0.5, 1, 25)) * 0.4;
    float right = sdBox(p + vec3(15, 0, 0), vec3(8. * (1.-(p.y * 0.15)) - noise2.x * 0.5, 1, 25)) * 0.4;
    RayHit terrainHit = RayHit(min(left - noise.x * 0.05, right - noise.x * 0.05), 3, vec3(0.7, 0.5, 0.4));
    
    return terrainHit;
}


RayHit water(vec3 p)
{
    p.y += 0.1;
    vec4 noise = fbmd(p*12.);
    //float wa = max(sdBox(p, vec3(10, 1, 25)), -sdBox(p + vec3(0, 0.5, 0), vec3(15, 1, 45))) - noise.x * 0.05;
    float wa = sdBox(p + vec3(0, 4.2, 0), vec3(10, 5, 85)) - noise.x * 0.02;
    RayHit waterHit = RayHit(abs(wa) - 0.02, 4, vec3(0.9, 0.95, 1));
    return waterHit;
}

RayHit map(vec3 p)
{
    RayHit sceneHit = RayHit(MAX_DIST, -1, vec3(0));
    
    float light = length(p - vec3(-35, 65, 75)) - 26.;
    RayHit lightHit = RayHit(light, 6, vec3(1, 1, 1) * 5.);
    RayHit shipHit = ship(p);
    RayHit waterHit = water(p);
    RayHit terrainHit = terrain(p);
    RayHit petHit = suezPet(p);
    waterHit.dist -= (sin(terrainHit.dist*40.) * 0.005) * clamp(1.-(terrainHit.dist * 1.5), 0., 1.0);
    waterHit.dist -= (sin(shipHit.dist*60.) * 0.005) * clamp(1.-(shipHit.dist * 1.3), 0., 1.0);
    opUnion(shipHit, sceneHit, sceneHit);
    opUnion(terrainHit, sceneHit, sceneHit);
    opUnion(waterHit, sceneHit, sceneHit);
    opUnion(lightHit, sceneHit, sceneHit);
    opUnion(cargo(p), sceneHit, sceneHit);
    opUnion(petHit, sceneHit, sceneHit);

    return sceneHit;
}

/*
struct Material
{
    vec3 color;
    float shininess;
    float shininessScale;
    float refractiveness;
    float indexOfRefraction;
    float refractionScale;
    bool emissive;
};
*/
Material getMaterial(vec3 p, RayHit hit)
{
    int id = hit.id;
    if (id == 3) // Terrain
    {
        return Material(hit.color, 0.5, 0.0, 0.0, 0.0, 0.0, false);
    }
    else if (id == 4) // Water
    {
        return Material(hit.color, 1.0, 1000.0, 0.9, 1.2, 1.5, false);
    }
    else if (id == 5) // Ship
    {
        vec4 noise = fbmd(p*12.);

        return Material(hit.color, 0.5 * noise.x, 100.0*noise.x,0.0, 0.0, 0.0, false);
    }
    else if (id == 6) // Light
    {
        return Material(hit.color, 0.0, 0.0, 0.0, 0.0, 0.0, true);
    }
    else if (id == 7) // Cargo
    {
        vec4 noise = fbmd(p*12.);

        return Material(mix(hit.color, hit.color * 0.5, noise.x), noise.x, 110.0*noise.x, 0.0, 0.0, 0.0, false);
    }
    else if (id == 8) // Pet
    {
        return Material(hit.color, 0.0, 0.0, 0.0, 0.0, 0.0, false);
    }
    return Material(vec3(0, 0, 0), 0., 0., 0., 0., 0., false);
}

vec3 getNormal(vec3 p)
{
    vec2 e = vec2(0, 0.001);
    return normalize(vec3(
        map(p + e.yxx).dist - map(p - e.yxx).dist,
        map(p + e.xyx).dist - map(p - e.xyx).dist,
        map(p + e.xxy).dist - map(p - e.xxy).dist
    ));
}



bool trace(vec3 ro, vec3 rd, out RayHit hit)
{
    hit = RayHit(MAX_DIST, -1, vec3(0));
    float t = 0.;
    float maxDist = 0.001;
    for (int i = 0; i < MAX_RAY_STEPS; ++i)
    {
        vec3 p = ro + rd * t;
        RayHit sceneInfo = map(p);
        if (sceneInfo.dist < maxDist)
        {
            sceneInfo.dist = t;
            hit = sceneInfo;
            return true;
        }
        t += sceneInfo.dist;
        maxDist += sceneInfo.dist * 0.0001;
        if (t > MAX_DIST)
            return false;
    }
    return false;
}

bool simpleTrace(vec3 ro, vec3 rd)
{
    float t = 0.;
    for (int i = 0; i < MAX_RAY_STEPS; ++i)
    {
        vec3 p = ro + rd * t;
        RayHit sceneInfo = map(p);
        if (sceneInfo.dist < 0.001)
        {
            return true;
        }
        t += sceneInfo.dist;
        if (t > MAX_DIST)
            return false;
    }
    return false;
}

vec3 seed = vec3(0, 0, 0);
float random()
{
    return fract(sin(fract(sin(dot(seed.xy, vec2(12.98, 78.23)) * (seed.z += 1.)) * 437.54))*73.54);
}

vec3 getSampleBiased(vec3 dir, float power) {
    dir = normalize(dir);
    vec3 o1 = normalize(abs(dir.x) > abs(dir.z) ? vec3(-dir.y, dir.x, 0) : vec3(0, -dir.z, dir.y));
    vec3 o2 = normalize(cross(dir, o1));
    vec2 r = vec2(random(), random());
    r.x = r.x * 2. * PI;
    r.y = pow(r.y, 1. / (power + 1.));
    float oneminus = sqrt(1. - r.y * r.y);
    return cos(r.x) * oneminus * o1 + sin(r.x) * oneminus * o2 + r.y * dir;
}

void getRay(vec2 uv, vec2 res, inout vec3 ro, inout vec3 rd)
{
    float mx = -1.25;
    float my = -1.2;

#if MOVE_WITH_MOUSE
    mx = (iMouse.x / res.x  * 2. - 1.) * PI;
    my = (iMouse.y / res.y  * 2. - 1.) * PI;
#endif

    mat2 rx = mat2(cos(mx), sin(mx), -sin(mx), cos(mx));
    mat2 ry = mat2(cos(my), sin(my), -sin(my), cos(my));

    ro = vec3(-1.5, 1.2, -50);
    rd = normalize(vec3(uv, 7));

    ro.yz *= ry;
    rd.yz *= ry;

    ro.xz *= rx;
    rd.xz *= rx;
}

vec3 getSky(vec3 p)
{
    vec3 color = mix(vec3(0.5, 0.75, 1.0), vec3(0.5, 0.75, 1.0) * 0.5, p.y * 0.01);
    if (p.y < 0.0)
    {
        color = vec3(0.05, 0.1, 0.08)*0.25;
    }
    else
    {
        vec4 noise = fbmd(p * 0.05 + p.y * 0.08);
        color = mix(color, color + vec3(1, 0.5, 0.4) * 2., noise.x * (p.y * 0.007));
    }
    
    return color; 
}

vec4 pathtrace(vec2 uv)
{
    vec3 ro, rd;
    vec3 accum = vec3(0, 0, 0);
    vec3 luminance = vec3(1, 1, 1);

    getRay(uv, viewPort.xy, ro, rd);

    for (int i = 0; i < BOUNCE_COUNT; ++i)
    {
        RayHit hit;
        if (trace(ro, rd, hit))
        {
            vec3 p = ro + rd * hit.dist;
            Material mat = getMaterial(p, hit);
            luminance *= mat.color;

            if (mat.emissive)
            {
                accum += luminance;
                break;
            }
            vec3 n = getNormal(p);


            float rand = random();
            if (mat.refractiveness > rand)
            {
                rd = getSampleBiased(normalize(refract(rd, n, 1./max(mat.indexOfRefraction, 1.))), mat.refractionScale);
            }
            else if (mat.shininess > rand)
            {
                rd = getSampleBiased(normalize(reflect(rd, n)), mat.shininessScale);
            }
            else
            {
                rd = getSampleBiased(n, 1.);
            }
            ro = p + rd * 0.1;
        }
        else
        {
            accum += luminance * getSky(ro + rd * MAX_DIST * 0.1);
            break;
        }
    }
    
    return vec4(accum, 1.);
}

void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    vec2 uv = fragCoord.xy / viewPort.xy;
#if !MOVE_WITH_MOUSE
    if (iFrame < 1000)
#endif
    {
        seed = vec3(uv, mod(iTime, 10.));
        vec2 jitter = (vec2(random() - 0.5, random() - 0.5) / viewPort.xy);
        vec2 ndc = (uv + jitter * 2.) * 2. - 1.;
        ndc.x *= viewPort.x / viewPort.y;
        // vec4 prev = texture(iChannel0, uv);
        vec4 prev = texture(iChannel0, vec3(uv, 0.0));
        vec4 curr = pathtrace(ndc);
        #if MOVE_WITH_MOUSE
        float blendFactor = (prev.a == 0. || iTime < .1 || iMouse.z > 0.) ? 1. : 1. / (1. + (1. / prev.a));
        #else
        float blendFactor = (prev.a == 0. || iTime < .1) ? 1. : 1. / (1. + (1. / prev.a));
        #endif
        outColor = vec4(mix(prev.rgb, curr.rgb, blendFactor), blendFactor);
    }
#if !MOVE_WITH_MOUSE
    else
    {
        // outColor = texture(iChannel0, uv);
        vec4 color = texture(iChannel0, vec3(uv, 0.0));
        outColor = clamp((color * (2.51 * color + 0.03)) / (color * (2.43 * color + 0.59) + 0.14), 0., 1.);
    }
#endif	
}


]]>
</program>
</language>
</jittershader>
