<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iChannel0" type="int" default="0" />
	<param name="iChannel1" type="int" default="1" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iChannel0" program="fp" />
		<bind param="iChannel1" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

/*

Something Cozy in 50 Min
Listening to:
Rainy Day at Cozy Coffee Shop â˜• Relaxing Jazz Instrumental Music For Relax, Study, Work
https://www.youtube.com/watch?v=Np_S-GAJbSM

26min to start image, with one major mistake:
I didn't add uv to the seed in sample forloop!
33min outline of boxes!


*/

float height;
float hit;
vec2 seed = vec2(0.42,0.52);
vec3 normal;

vec2 hash22(){
    seed++;
    seed += fract(45.51*sin(92.52*
                    vec2(14.16,36.43)*seed));
    float d1 = dot(seed,vec2(42.45,24.62));
    float d2 = dot(seed, vec2(31.52,22.73));
    return fract(vec2(d1,d2)+vec2(13.25,53.25)*5.62);
    }

vec3 cosDir(vec3 n){

    vec2 xy = hash22();
    float th = xy.x*acos(-1.)*2.;
    float sinP = xy.y*2.-1.;
    float cosP = sqrt(1.-sinP*sinP);
    vec3 b = vec3(cosP*vec2(cos(th),sin(th)),sinP);
    return normalize(b+n);
}

vec3 getCell(vec3 p){
    return ceil(p)-0.5;
}
float getHeight(vec2 uv){
    return -texture(iChannel0,uv*0.01).x*9.;
}
vec2 getUV(vec3 p, vec3 n){
    p.y = abs(p.y-height);
    n = abs(n);
    p.xz =fract(p.xz);
    
    return n.x*p.zy + n.y*p.xz + n.z*p.xy;
}
float mint(vec3 ro, vec3 rd){
    vec3 t = (fract(-ro*sign(rd))+1e-4)/abs(rd);
    normal = t.x<t.z ? vec3(1.,0.,0.)*-sign(rd.x) 
            : vec3(0.,0.,1.)*-sign(rd.z);
    return min(t.x,t.z);//watch out!!
}

vec3 cst(vec3 ro, vec3 rd){
    float tx = 1e8,ty = 1e8;
    for(float i = 0.; i < 40.; i++){
        height = getHeight(getCell(ro).xz);
        if(height>ro.y){return ro;}
        tx = mint(ro,rd);
        ty = (height-ro.y)/rd.y;
        if(ty<tx && ty > 0.){
            normal = vec3(0.,1.,0.);
            return ro + rd*ty;
        }
        ro += rd*tx;
    }
    hit = 0.;
    return ro;
}

#define S smoothstep
void main()
{
    vec2 fragCoord = jit_in.uv *viewPort.xy;
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = (fragCoord-viewPort.xy*0.5)/viewPort.y;
    vec3 col = vec3(0.);
    vec3 ro = vec3(0.,1.,0.);
    float sNum = 8., 
    bNum = 3.;
    vec3 fir = vec3(1e8);
    for(float i = 0.; i < sNum; i++){
        seed += uv + fract(sin(vec2(iTime/123.51,
                    iTime/152.74)*3.52));
        vec2 jit = hash22()-0.5;
        vec3 rd = normalize(vec3(uv+jit/viewPort.y,1.));
        rd.yz *= mat2(cos(-0.6 + vec4(0,11,33,0))); 
        rd.xz *= mat2(cos(iTime*0.1 + vec4(0,11,33,0)));
        vec3 A = vec3(0.),
        B = vec3(1.);
        vec3 p = ro;
        for(float j = 0.; j < bNum; j++){
            hit = 1.;
            
            vec3 p1 = cst(p,rd);
            if(fir.z > 1e7){
                fir = p1;
            }
            vec3 cell = getCell(p1);
            vec3 C = 0.5+0.5*normal;
            float sid = fract(sin(cell.x*cell.z*141.23)*34.23);
            
            float id = step(0.85,sid);
            vec3 E = vec3(id,id,sid)*id;
            E = clamp(E,0.,1.);
            vec2 uv = getUV(p1,normal);
            float o = 0.;
            o = mix(o,1.,S(0.45,0.46,abs(uv.x-0.5)));
            
            if(normal.y < 0.5){
                o = mix(o,1.,S(0.05,0.,uv.y));
            }
            else{
                o = mix(o,1.,S(0.45,0.46,abs(uv.y-0.5)));
            }
            
            C = texture(iChannel1,uv).rgb;
            C += (0.4+0.4*cos(vec3(0,2,4)+cell.z*cell.x*8.))*0.1;
            C = mix(C,C*0.5,o);
      
            if(p1.y > 0.){
                normal.y *= -1.;
                E = vec3(0.2);
            }
            A += B*E;
            B *= C;
            
            rd = mix(reflect(rd,normal),cosDir(normal),0.4);
            p = p1+rd*0.1;
            
            if(hit<0.5){break;}
        }
        col += A;
    }
    
    col /= sNum;
    col = pow(col,vec3(0.545));
    //col *= 0.9;
    // Output to screen
    float fog = smoothstep(1.,0.,pow((length(ro-fir))/28.,10.));
    col = mix(col, vec3(0.07,0.05,0.01),1.-fog);
    outColor = vec4(col,1.0);
}
]]>
</program>
</language>
</jittershader>
