<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iFrame" type="int" default="0" />
	

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iFrame" program="fp" />
		

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform int iFrame;


const int TRACE_ITER = 20;
const float EPSILON = 0.01;
const float FAR = 100.0;
const float ROUGHNESS = 0.06;
const float ROUGHNESS_SQ = ROUGHNESS * ROUGHNESS;
const float LIGHT_AMP = 2.0;

const float PI = acos(-1.0);
const float TAU = 2.0 * PI;

// http://www.jcgt.org/published/0009/03/02/
uvec3 hash3u(uvec3 v) {
  v = v * 1664525u + 1013904223u;

  v.x += v.y * v.z;
  v.y += v.z * v.x;
  v.z += v.x * v.y;

  v ^= v >> 16u;

  v.x += v.y * v.z;
  v.y += v.z * v.x;
  v.z += v.x * v.y;

  return v;
}

vec3 hash3f(vec3 v) {
  uvec3 r = floatBitsToUint(v);
  return vec3(hash3u(r)) / float(-1u);
}

uvec3 seed;
vec3 random3() {
  seed = hash3u(seed);
  return vec3(seed) / float(-1u);
}

mat2 rotate2D(float t) {
  float c = cos(t);
  float s = sin(t);
  return mat2(c, s, -s, c);
}

mat3 orthBas(vec3 z) {
  z = normalize(z);
  vec3 up = abs(z.y) < 0.99 ? vec3(0.0, 1.0, 0.0) : vec3(0.0, 0.0, 1.0);
  vec3 x = normalize(cross(up, z));
  return mat3(x, cross(z, x), z);
}

vec3 rotObject(vec3 p) {
  p.zx *= rotate2D(iTime);
  p.xy *= rotate2D(-1.0);
  p.yz *= rotate2D(-1.0);
  return p;
}

vec3 invRotObject(vec3 p) {
  p.yz *= rotate2D(1.0);
  p.xy *= rotate2D(1.0);
  p.zx *= rotate2D(-iTime);
  return p;
}

float isectPlane(vec3 ro, vec3 rd, vec3 n) {
  float t = -dot(ro, n) / dot(rd, n);
  return t < 0.0 ? FAR : t;
}

vec4 isectBox(vec3 ro, vec3 rd, vec3 s) {
  vec3 xo = -ro / rd;
  vec3 xs = abs(s / rd);

  vec3 dfv = xo - xs;
  vec3 dbv = xo + xs;

  float df = max(dfv.x, max(dfv.y, dfv.z));
  float db = min(dbv.x, min(dbv.y, dbv.z));
  if (df < 0.0) { return vec4(FAR); }
  if (db < df) { return vec4(FAR); }

  vec3 n = -sign(rd) * step(vec3(df), dfv);
  return vec4(n, df);
}

// FAKE rounded box, just modified the normal
vec4 isectRoundedBox(vec3 ro, vec3 rd, vec3 s, float r) {
  vec4 isect = isectBox(ro, rd, s);
  float d = isect.w;

  if (d >= FAR) return vec4(FAR);

  vec3 rp = ro + rd * d;
  vec3 st = s - r;
  vec3 rpt = clamp(rp, -st, st);
  vec3 N = normalize(rp - rpt);

  d += 0.01 * r * length(N - isect.xyz);

  return vec4(N, d);
}

vec4 isectObject(vec3 ro, vec3 rd) {
  vec4 isect = vec4(FAR);

  ro = rotObject(ro);
  rd = rotObject(rd);

  for (int i = 0; i < 12; i++) {
    float fi = float(i);
    int i6 = i % 6;
    float phase = mod(0.5 * iTime - fi, 6.0);

    if (phase < 2.9) {
      vec3 rot = ro;

      float start = 0.3 * smoothstep(1.9, 2.9, phase);
      float end = 0.3 * smoothstep(0.0, 1.0, phase);

      float flip = 2.0 * floor(fi / 6.0) - 1.0;

      rot -= flip * (
        i6 == 0 ? vec3(-0.3) :
        i6 == 1 ? vec3(0.3, -0.3, -0.3) :
        i6 == 2 ? vec3(0.3, 0.3, -0.3) :
        i6 == 3 ? vec3(0.3, 0.3, 0.3) :
        i6 == 4 ? vec3(-0.3, 0.3, 0.3) :
                  vec3(-0.3, 0.3, -0.3)
      );

      vec3 dir = flip * (
        i6 == 0 ? vec3(1.0, 0.0, 0.0) :
        i6 == 1 ? vec3(0.0, 1.0, 0.0) :
        i6 == 2 ? vec3(0.0, 0.0, 1.0) :
        i6 == 3 ? vec3(-1.0, 0.0, 0.0) :
        i6 == 4 ? vec3(0.0, 0.0, -1.0) :
                  vec3(0.0, -1.0, 0.0)
      );

      rot -= dir * (start + end);

      vec3 s = abs(dir) * (end - start - 1E-3) + 0.15;
      vec4 isect2 = isectRoundedBox(rot, rd, s, 0.01);

      if (isect2.w < isect.w) {
        isect = isect2;
      }
    }
  }

  isect.xyz = invRotObject(isect.xyz);

  return isect;
}

vec3 sampleGGX(vec2 Xi, vec3 N, float roughnessSq) {
  float phi = Xi.x * TAU;
  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (roughnessSq - 1.0) * Xi.y));
  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

  return orthBas(N) * vec3(
    sinTheta * cos(phi),
    sinTheta * sin(phi),
    cosTheta
  );
}

float fresnelSchlick(float dotVH, float f0, float f90) {
  return mix(
    f0,
    f90,
    pow(max(1.0 - dotVH, 0.0), 5.0)
  );
}

void main() {
  
  vec2 fragCoord = jit_in.uv * viewPort.xy;	
  seed = uvec3(fragCoord, iFrame);

  vec2 uv = fragCoord / viewPort.xy;
  vec2 p = uv * 2.0 - 1.0;
  p.x *= viewPort.x / viewPort.y;

  vec3 ro = vec3(-0.3, 0.0, 2.2);
  vec3 rd = normalize(vec3(p, -3.0));

  vec3 ro0 = ro;
  vec3 rd0 = rd;

  float isFirstRay = 1.0;

  vec3 N0 = vec3(0.0);
  vec3 col = vec3(0.0);
  vec3 colRem = vec3(1.0);
  float samples = 1.0;

  for (int i = 0; i < TRACE_ITER; i++) {
    vec4 isect = isectObject(ro, rd);

    vec3 N = isect.xyz;
    float isectlen = isect.w;

    if (0.0 < isectlen && isectlen < FAR) {
      ro += rd * isectlen;

      if (isFirstRay == 1.0) {
        ro0 = ro;
        N0 = N;
        isFirstRay = 0.0;
      }

      vec3 h = sampleGGX(random3().xy, N, ROUGHNESS_SQ);
      float dotVH = max(dot(-rd, h), 0.001);
      
      rd = normalize(reflect(rd, h));
      
      colRem *= fresnelSchlick(dotVH, 0.5, 1.0);
      colRem *= step(0.0, dot(rd, N));

      ro += EPSILON * rd;
    } else {
      ro *= sign(rd.x);
      rd *= sign(rd.x);

      float plane = isectPlane(ro - vec3(5.0, 0.0, 0.0), rd, vec3(-1.0, 0.0, 0.0));
      vec3 rp = plane * rd + ro;
      float planeLight = LIGHT_AMP * step(plane, FAR - 1E-3) * step(abs(rp.y), 4.0) * step(abs(rp.z), 4.0);

      col += colRem * planeLight;

      colRem *= 0.0;
    }

    if (colRem.x < 0.04) {
      if (isFirstRay == 1.0) {
        break;
      }

      colRem = vec3(1.0);
      samples += 1.0;

      ro = ro0;
      rd = rd0;

      vec3 h = sampleGGX(random3().xy, N0, ROUGHNESS_SQ);
      float dotVH = max(dot(-rd, h), 0.001);
      
      rd = normalize(reflect(rd, h));
      
      colRem *= fresnelSchlick(dotVH, 0.5, 1.0);
      colRem *= step(0.0, dot(rd, N0));

      ro += EPSILON * rd;
    }
  }

  if (N0 == vec3(0.0)) {
    outColor = vec4(0.0, 0.0, 0.0, 1.0);
    return;
  }

  outColor = vec4(col / samples, 1.0);
}

]]>
</program>
</language>
</jittershader>
