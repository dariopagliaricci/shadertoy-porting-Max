<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iFrame" type="int" default="0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 Q;

uniform vec2 viewPort;
uniform float iTime;
uniform int iFrame;
uniform samplerCube iChannel0;

#define R viewPort.xy
// #define A(U) texelFetch(iChannel0,ivec2(U),0)
#define A(U) texture(iChannel0, vec3(U, sqrt(1.0 - dot(U, U))))
#define Main void main()

#define W (.1)

#define eta(f) (.8-.02*(f))
#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))
#define phi 1.618033988749895
#define rho 0.5257311121191336
#define tau 0.85065080835204


#define verts vec3[12] (\
    vec3(tau,rho,0), \
    vec3(-tau,rho,0), \
    vec3(tau,-rho,0), \
    vec3(-tau,-rho,0), \
    vec3(rho,0,tau), \
    vec3(rho,0,-tau), \
    vec3(-rho,0,tau), \
    vec3(-rho,0,-tau), \
    vec3(0,tau,rho), \
    vec3(0,-tau,rho), \
    vec3(0,tau,-rho), \
    vec3(0,-tau,-rho)) 

#define tris ivec3[20] (\
    ivec3(0,8,4), \
    ivec3(0,5,10), \
    ivec3(2,4,9),  \
    ivec3(2,11,5), \
    ivec3(1,6,8),  \
    ivec3(1,10,7), \
    ivec3(3,9,6),  \
    ivec3(3,7,11), \
    ivec3(0,10,8), \
    ivec3(1,8,10), \
    ivec3(11,2,9), \
    ivec3(9,3,11), \
    ivec3(4,2,0),  \
    ivec3(5,0,2),  \
    ivec3(6,1,3),  \
    ivec3(7,3,1),  \
    ivec3(8,6,4),  \
    ivec3(9,4,6),  \
    ivec3(10,5,7), \
    ivec3(11,7,5))
   
mat3 matrix (vec3 r) { 
   if (length(r)==0.) return mat3(1);
   float a = length(r);
   vec3 o = normalize(r);
   float c = cos(a), t = 1.-c;
   float s = sin(a);
   return mat3(
       t*o.x*o.x+c,t*o.x*o.y-o.z*s,t*o.x*o.z+o.y*s,
       t*o.x*o.y+o.z*s,t*o.y*o.y+c,t*o.y*o.z-o.x*s,
       t*o.x*o.z-o.y*s,t*o.y*o.z+o.x*s,t*o.z*o.z+c
   
   );
}
    
vec2 iSphere (vec3 p, vec3 d, vec3 m, float r) {

    p -= m;
    
    float b = 2.*dot(p,d);
    float c = dot(p,p)-r*r;
    float s = (b*b-4.*c);
    if (s < 0.) return vec2(1e9);
    else return vec2(.5*(-b-sqrt(s)),.5*(-b+sqrt(s)));

}
vec3 normal_segment (vec3 q, vec3 a, vec3 b) {
    return normalize(q - a - (b-a)*clamp(dot(q-a,b-a)/dot(b-a,b-a),0.,1.));
}
vec2 iSegment (vec3 p, vec3 d, vec3 a, vec3 b, float r) {    
    vec3 q = p-a;
    vec3 u = b-a;
    float du = dot(d,u);
    float uu = dot(u,u);
    float qu = dot(q,u);
    float dq = dot(d,q);
    float qq = dot(q,q);
    float a_ = 1. - du*du/uu;
    float b_ = 2.*(dq - qu*du/uu);
    float c_ = qq - qu*qu/uu - r*r;
    float s = b_*b_-4.*a_*c_;
    if (s < 0.) return vec2(1e9);
    vec2 i = vec2(
        (-b_-sqrt(s))/(2.*a_),
        (-b_+sqrt(s))/(2.*a_));
    float x = dot(p+d*i.x-a,u)/uu;
    if (x < 0. || x > 1.) i.x = 1e9;
    x = dot(p+d*i.y-a,u)/uu;
    if (x < 0. || x > 1.) i.y = 1e9;
    return i;
}
float iPlane (vec3 p, vec3 d, vec3 n) {
    return -dot(p,n)/dot(d,n);
}
float iTriangle (vec3 p, vec3 d, vec3 a, vec3 b, vec3 c) {
    vec3 n = normalize(cross(b-a,c-a));
    float i = -dot(p-a,n)/dot(d,n);
    vec3 x = p + d*i;
    float ab = dot(x-a,cross(n,normalize(b-a)));
    float bc = dot(x-b,cross(n,normalize(c-b)));
    float ca = dot(x-c,cross(n,normalize(a-c)));
    if (ab<0.||bc<0.||ca<0.) return 1e9;
    return i;
}
vec4 hash44(vec4 p4)
{
	p4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy+33.33);
    return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}

// Fork of "Isohedron" by wyatt. https://shadertoy.com/view/msGyz1
// 2024-08-05 19:59:04

float scene (vec3 p, vec3 d, out vec3 no, bool inside) {
    float x = 1e9;
    vec3 m = vec3(0);
    vec2 y;
    y.x = iPlane(p-vec3(0,0,1),d,vec3(0,0,-1));
    if (y.x > 0. && y.x < x) {
        no = vec3(0,0,-1);
        x = y.x;
    }
    for (int i = 0; i < 20; i++) {
        vec3 a = verts[tris[i][0]]*(1.-W);
        vec3 b = verts[tris[i][1]]*(1.-W);
        vec3 c = verts[tris[i][2]]*(1.-W);
        vec3 n = normalize(cross(b-a,c-a));
        
        y.x = iTriangle(p,d,a+W*n,b+W*n,c+W*n);
        if (y.x > 0. && y.x < x) {
            x = y.x;
            no = n;
        }
        y = iSegment(p,d,a,b,W);
        if (inside) y.x = y.y;
        if (y.x > 0. && y.x < x) {
            vec3 q = p+d*y.x;
            if (dot(q-a,n)>0.&&dot(q-m,normalize(cross(a-m,b-m)))>0.&&dot(q-m,normalize(cross(a+W*n-m,b+W*n-m)))<0.) {
                x = y.x;
                no = normal_segment(q,a,b);
            }
                
        }
        y = iSegment(p,d,b,c,W);
        if (inside) y.x = y.y;
        if (y.x > 0. && y.x < x) {
            vec3 q = p+d*y.x;
            if (dot(q-b,n)>0.&&dot(q-m,normalize(cross(b-m,c-m)))>0.&&dot(q-m,normalize(cross(b+W*n-m,c+W*n-m)))<0.) {
                x = y.x;
                no = normal_segment(q,b,c);
            }
                
        }
        y = iSegment(p,d,c,a,W);
        if (inside) y.x = y.y;
        if (y.x > 0. && y.x < x) {
            vec3 q = p+d*y.x;
            if (dot(q-c,n)>0.&&dot(q-m,normalize(cross(c-m,a-m)))>0.&&dot(q-m,normalize(cross(c+W*n-m,a+W*n-m)))<0.) {
                x = y.x;
                no = normal_segment(q,c,a);
            }
                
        }
        
        y = iSphere(p,d,a,W);
        if (inside) y.x = y.y;
        if (y.x > 0. && y.x < x) {
            vec3 q = p+d*y.x;
            if (dot(q-a,b-a)<0.&&dot(q-a,c-a)<0.&&dot(q-m,normalize(cross(a-m,b-m)))>0.&&dot(q-m,normalize(cross(c-m,a-m)))>0.) {
                x = y.x;
                no = normalize(q-a);
            } 
        }
        y = iSphere(p,d,b,W);
        if (inside) y.x = y.y;
        if (y.x > 0. && y.x < x) {
            vec3 q = p+d*y.x;
            if (dot(q-b,c-b)<0.&&dot(q-b,a-b)<0.&&dot(q-m,normalize(cross(b-m,c-m)))>0.&&dot(q-m,normalize(cross(a-m,b-m)))>0.) {
                x = y.x;
                no = normalize(q-b);
            } 
        }
        y = iSphere(p,d,c,W);
        if (inside) y.x = y.y;
        if (y.x > 0. && y.x < x) {
            vec3 q = p+d*y.x;
            if (dot(q-c,a-c)<0.&&dot(q-c,b-c)<0.&&dot(q-m,normalize(cross(c-m,a-m)))>0.&&dot(q-m,normalize(cross(b-m,c-m)))>0.) {
                x = y.x;
                no = normalize(q-c);
            } 
        }
    }
    return x;
}
Main {
     
      vec2 U = jit_in.uv * viewPort.xy;
      Q = A(U);
      U += hash44(vec4(U,iTime,iFrame)).xy-.5;
      vec3 p = vec3(0,0,-1.5);
      vec3 d = normalize(vec3(2.*(U-.5*R)/R.y,1));
      p.xz *= ei(.4);
      d.xz *= ei(.4);
      p.yz *= ei(.1);
      d.yz *= ei(.1);
      for (float i = 0.; i < 6.; i++) {
          vec4 h = hash44(vec4(U,i,iFrame));
          vec3 n;
          float x = scene(p,d,n,i>0.);
          p += d*x;
          if (length(n-vec3(0,0,-1))<1e-8) {
              vec3 r = reflect(d,n);
              d = h.xyz*2.-1.;
              d.z = -abs(d.z);
              d = normalize(d);
              p += 1e-4*d;
          } else if (h.x < .7) {
              d = normalize(d-.4*n);
              p += 1e-4*d;
          } else {
              d = reflect(d,n);
              p += 1e-4*d;
          }
          
          if (x>100.) {
              Q += 20.*vec4(1,.75,.5,1)*exp(-100.*abs(1.-dot(d,normalize(vec3(1,1,-1)))));
              Q += 20.*vec4(.5,1,.75,1)*exp(-100.*abs(1.-dot(d,normalize(vec3(0,1,-1)))));
              Q += 20.*vec4(1,.75,1,1)*exp(-100.*abs(1.-dot(d,normalize(vec3(-1,-.5,-.1)))));
              
              return;
          }
      }    
        
}
]]>
</program>
</language>
</jittershader>
