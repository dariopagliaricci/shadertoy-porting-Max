<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iFrame" type="int" default="0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 Q;

uniform vec2 viewPort;
uniform int iFrame;
uniform samplerCube iChannel0;

#define R viewPort.xy
#define Main void main()
// #define A(U) texture(iChannel0,(U)/R)
// #define A(U) texture(iChannel0, normalize(vec3((U) - 0.5 * R, 1.0)))
#define A(U) texture(iChannel0, vec3(U, sqrt(1.0 - dot(U, U))))
#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))
#define pi 3.14159265359
vec2 quadratic(float a, float b, float c) {
    float det = b*b-4.*a*c;
    if (det < 0.) return vec2(-1);
    return vec2(-b-sqrt(det),-b+sqrt(det))/2./a;
}

vec2 sphere(vec3 p, vec3 d,float r) {
    
    // (p + d*x)^2 = r^2
    // pp-rr + 2pdx + ddxx = 0
    
    return quadratic(1.,2.*dot(p,d),dot(p,p)-r*r);
}

vec4 hash44(vec4 p4)
{
	p4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy+33.33);
    return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}

Main {
    vec2 U = jit_in.uv * viewPort.xy;
    Q = vec4(0);
    for (float k = 0.; k < 10.; k++) {
        vec4 h = hash44(vec4(U,k,iFrame));
        float a = 2.*pi*h.x;
        vec3 d = vec3(cos(a),sin(a),0);
        vec3 p = vec3(2.*(U-.5*R)/R.y,0);
        float n = 0.;
        for (float j = 0.; j < 12.; j++) {
        
           
            float r = .8;
            float r2 = .3;
            vec3 c2 = vec3(1.2,-.2,0);
            vec3 c = vec3(-.5,0,0);
            vec2 i = sphere(p-c,d,r);
            vec2 i2 = sphere(p-c2,d,r2);
            if ((i.y<0.&&i.x<0.)||(i2.x>0.&&i2.x<i.x&&i2.x<i.y)||(i2.y>0.&&i2.y<i.x&&i2.y<i.y)) {
                i = i2;
                c = c2;
                r = r2;
            }
            {
                vec3 c3 = vec3(.9,.4,0);
                float r3 = .2;
                vec2 i3 = sphere(p-c3,d,r3);
                if (((i.x<0.||i.y<0.)&&(i3.x>0.||i3.y>0.))||(i3.x>0.&&i3.x<i.x&&i2.x<i.y)||(i3.y>0.&&i3.y<i.x&&i3.y<i.y)) 
                {Q+=.03*vec4(1.5,.3,.6,1);
                i = i3;
                c = c3;
                r = r3;
                }
            }
            float s = sign(length(p-c)-r);
            if (i.x >0. &&i.x<i.y) {
                p += d*i.x;
            } else if (i.y>0.){
                p += d*i.y;
            } else {
                break;
            }
            n++;
            vec4 z = hash44(vec4(U,k*8.+j,iFrame));
            vec3 no = normalize(p-c);
            no *= -sign(dot(p-c,d));
            float q = 1.+3.*h.w;
            if (z.x<.5) d = reflect(d,no);
            else d = refract(d,no,1./q);
            p += d*1e-4;
            
            
        }
        d.xy *= ei(.5);
        Q += 4.*exp(-20.*abs(atan(d.y,d.x)))*max(sin(-2.+6.2*h.w+vec4(1,2,3,4)),0.);
        d.xy *= ei(1.5);
        Q += 2.*exp(-5.*abs(atan(d.y,d.x)))*vec4(1,.5,0,1)*max(sin(-2.+6.2*h.w+vec4(1,2,3,4)),0.);
        d.xy *= ei(1.5);
        Q += 4.*exp(-25.*abs(atan(d.y,d.x)))*vec4(0,.5,1,1)*max(sin(-2.+6.2*h.w+vec4(1,2,3,4)),0.);
        d.xy *= ei(1.5);
        Q += 2.*exp(-15.*abs(atan(d.y,d.x)))*vec4(.5,1,1,1)*max(sin(-2.+6.2*h.w+vec4(1,2,3,4)),0.);
        
    }
    Q += A(U);
}
]]>
</program>
</language>
</jittershader>
