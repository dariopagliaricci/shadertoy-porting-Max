<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iFrame" type="int" default="0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 Q;

uniform vec2 viewPort;
uniform int iFrame;
uniform samplerCube iChannel0;

#define R viewPort.xy
// #define A(U) texture(iChannel0,(U)/R)
#define A(U) texture(iChannel0, vec3(U, sqrt(1.0 - dot(U, U))))
#define Main void main()
#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))
vec4 hash(vec4 p4)
{
	p4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy+33.33);
    return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}
float box( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

#define light vec3(.1,0,-.5)
#define light2 vec3(-0.2,0,-.8)
#define light3 vec3(0.4,.2,-.5)
#define light4 vec3(0.4,-.2,-.5)
float map (vec3 p) {
    float d = length(p-light)-.05;
    d = min(length(p-light2)-.02,d);
    d = min(length(p-light3)-.02,d);
    d = min(length(p-light4)-.02,d);
    p.xy += .2;
    p.xz *= ei(.4);
    for (float i = 0.; i < 12.; i++) {
        p = abs(p)-.15*exp2(-.5*i);
        p.xz*=ei(-.3);
        p.xy*=ei(.5);
        p.yz*=ei(.2);
    }
    return min(d,box(p,vec3(.001,.001,.02)));
    
}
vec3 normal(vec3 p) {
    vec2 e = vec2(1e-3,0);
    float m = map(p);
    return normalize(vec3(
        map(p+e.xyy)-m,
        map(p+e.yxy)-m,
        map(p+e.yyx)-m
    ));
}
Main {
    vec2 U = jit_in.uv * viewPort.xy;
    Q = A(U);
    vec4 h = hash(vec4(U,iFrame,1));
    vec3 p = vec3(0,0,-1.2);
    vec3 d = normalize(vec3(2.*(U+h.xy-.5*R)/R.y,4.));
    
    for (float i = 0.; i < 100.; i++) {
        float m = map(p);
        p += d*max(abs(m),.001);
        if (m>10.)break;
        if (length(p-light)<.06) {Q += 3.*vec4(3,2,1,4);break;}
        if (length(p-light2)<.025) {Q += 20.*vec4(1,2,3,4);break;}
        if (length(p-light3)<.025) {Q += 5.*vec4(3,1,2,4);break;}
        if (length(p-light4)<.025) {Q += 7.*vec4(1);break;}
        if (m < .001) {
           // vec3 n = normal(p);
            d = normalize(hash(vec4(p.xy*100.,i,iFrame)).xyz*2.-1.);
            //if (dot(d,n)<0.) d = -d;
            p += .002*d;
        }          
    }
}
]]>
</program>
</language>
</jittershader>
