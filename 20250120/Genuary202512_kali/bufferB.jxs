<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform sampler2D iChannel0;

#define resolution viewPort.xy
#define time iTime

const float max_rad=.005;
const float it=100.;
mat2 rot(float a){
	float s=sin(a);
    float c=cos(a);
    return mat2(c,s,-s,c);
}

float hash(vec2 p)
{
    p*=1000.;
	vec3 p3  = fract(vec3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

float rnd(float p)
{
    p*=123.;
    p = fract(p * .1031);
    p *= p + 33.33;
    return fract(2.*p*p);
}

void main()
{
	vec2 fragCoord = jit_in.uv * viewPort.xy;
	vec2 uv = fragCoord/viewPort.xy;
	mat2 spin=rot(2.39996);
    vec2 p=vec2(0.,1.);
    vec3 res=vec3(0.);
    float ti=mod(time*.5,10.);
    float rad_step=max_rad/it+hash(uv+ti)*.0003;
	float rad=0.;
    vec4 col=texture(iChannel0,uv);
    for (float i=0.;i<it; i++) {
        rad+=rad_step;
        p*=spin;
        vec4 col=texture(iChannel0,uv+p*rad);
        res+=smoothstep(.2,1.,max(col.r,max(col.g,col.b)))*col.rgb;
    };
    res/=it;
    vec4 ff = vec4(col.rgb*.7+res*.5,1.0)*1.4; 
    ff+=step(21.,time)*smoothstep(21.5,21.0,time);
    ff.rgb=mix(length(ff.rgb)*vec3(.5),ff.rgb,.85)*1.1;
    ff.rgb=clamp(ff.rgb,0.,1.);
    outColor = ff;
}
]]>
</program>
</language>
</jittershader>
