<jittershader name="default">
	<description>Default Slab </description>
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iFrame" type="int" default="0" />
	<param name="iMouse" type="vec4" default="0 0 0 0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iMouse" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;
			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform int iFrame;
uniform vec4 iMouse;

// Created by evilryu
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// PC 4k exe graphics entry of Revision 2025
#define MAT_METAL 0.
#define MAT_GUN 1.
#define MAT_BONE 2.
#define MAT_SHELL 3.
#define MAT_DARKMETAL 4.
#define MAT_LAVA 5.
#define MAT_MIAO 6.
#define MAT_SAW 7.

float seed, roughness, metallic, shininess, legoLen = 1.;
vec3 ro, rd, sunDir = normalize(vec3(.3,1,-1)), sunCol = vec3(.7, .6, .5) * 4., albedo, F, emissive;

#define PI 3.1415926535

vec2 hash21(float p)
{
    vec2 p2 = fract(p * vec2(5.3983, 5.4427));
    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));
    return fract(vec2(p2.x * p2.y * 95.4337, p2.x * p2.y * 97.597));
}

float noise(vec3 p)
{
    vec3 s = vec3(7, 157, 113), ip = floor(p);
    vec4 h = vec4(0, s.yz, s.y + s.z) + dot(ip, s);
    p -= ip;
    p = p * p * (3. - 2. * p);
    h = mix(fract(sin(h) * 43758.5453), fract(sin(h + s.x) * 43758.5453), p.x);
    h.xy = mix(h.xz, h.yw, p.y);
    return mix(h.x, h.y, p.z);
}

float fbm(vec3 p)
{
    float f = 0., s = .5;
    for (; s > .06; s*=.5) f += s * noise(p), p*=2.;
    return f;
}


float bump(vec3 p)
{
    return fbm(p * vec3(.1, .025, .1) * viewPort.x);
}

vec3 bumpMapping(vec3 p, vec3 n, float weight)
{
    vec2 e = vec2(2. / viewPort.y, 0);
    vec3 g = vec3(bump(p - e.xyy) - bump(p + e.xyy),
        bump(p - e.yxy) - bump(p + e.yxy),
        bump(p - e.yyx) - bump(p + e.yyx)) / (e.x * 2.);
    g = (g - n * dot(g, n));
    return normalize(n + g * weight);
}


void rot(inout vec2 p, float a) {
    p = cos(a) * p + sin(a) * vec2(p.y, -p.x);
}

float smin(float a, float b, float k)
{
    float h = clamp(.5 + .5 * (b - a) / k, .0, 1.);
    return mix(b, a, h) - k * h * (1. - h);
}

void opU(inout vec2 obj, float b, float matB)
{
    obj = obj.x < b ? obj : vec2(b, matB);
}

//https://mercury.sexy/hg_sdf/
void opStairU(inout vec2 obj, float b, float r, float n, float matB)
{
    float s = r / n;
    float u = b - r;
    obj= vec2(min(min(obj.x, b), .5 * (u + obj.x + abs(mod(u - obj.x + s, 2. * s) - s))),
                obj.x < b ? obj.y : matB);
}
void opCut(inout vec2 obj, float b, float matB)
{
    obj = obj.x > -b ? obj : vec2(-b, matB);
}

float smax(float a, float b, float k)
{
    float h = max(k - abs(a - b), .0);
    return max(a, b) + h * h * .25f / k;
}

void fold5(inout vec2 p)
{
    float n = PI * .4;
    rot(p, -floor((PI/5.+atan(p.x,p.y)) / n) * n);
}

float box(vec3 p, vec3 b)
{
    vec3 d = abs(p) - b;
    return min(max(d.x, max(d.y, d.z)), .0) + length(max(d, .0));
}

float vcapsule(vec3 p, float h, float r)
{
    p.y -= clamp(p.y, .0, h);
    return length(p) - r;
}

float vcylinder(vec3 p, float h, float r)
{
    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h);
    return min(max(d.x, d.y), .0) + length(max(d, .0));
}

float cutSphere(vec3 p, float r)
{
    return max(length(p)-r, -p.y);
}

float triPrism(vec3 p, vec2 h)
{
    vec3 q = abs(p);
    return max(q.z - h.y, max(q.x * .866025 + p.y * .5, -p.y) - h.x * .5);
}

vec2 polar_rep(vec2 p, float n)
{
    n = PI * .5 / n;
    float a = mod(atan(p.y,p.x) + n / 2., n) - n / 2.;
    p = length(p) * vec2(cos(a), sin(a));
    return .5 * (p + p - vec2(1, 0));
}

vec2 lego(vec3 p)
{
    vec2 res = vec2(max(abs(vcylinder(p.yzx + vec3(0, 1, 0), .7, .5)) - .1, -p.z - 1.5), 1.);
    opStairU(res, box(p, vec3(1, 1.3, legoLen)), .2, 2., 1.);
    opStairU(res, vcylinder(p, 2., .5), .3, 4., 1.);
    return res;
}

vec2 sword(vec3 p)
{
    rot(p.xy, -.6);
    vec2 res = vec2(triPrism(vec3(p.x * 2., abs(p.y - 1.), p.z), vec2(.4 - exp(p.z * 2. - 1.8) * .38, 2.)) / 2. - fbm(p * 10.) * .02, 0.);
    opStairU(res, vcylinder(p.xzy + vec3(0, 2.6, -1), 1., .1), .3, 4., 0.);
    opStairU(res, vcylinder(p.xzy + vec3(0, 3.7, -1), .1, .2), .1, 3.,0.);
    
    return res;
}

float sdEllipsoid(vec3 p, vec3 r) 
{
    return (length(p / r) - 1.) * min(min(r.x, r.y), r.z);
}

float skull(vec3 p)
{
    vec3 q = p;
    float noi = (noise(p * 3.) - .5) * .3, d;

    d = smin(sdEllipsoid(p, vec3(.6, .6, .55) + .2 * noi),sdEllipsoid(p+vec3(0,.3,.35), vec3(.3, .4, .2) + .2 * noi), .1);


    q.x = abs(q.x)-.2;
    q.z -= .2;
    rot(q.xz, -.8);
    rot(q.yz, .3);

    d = smin(d, sdEllipsoid(vec3(q.x-.3, q.y+.5, q.z-.1), vec3(.05, .4, .1)), .01);

    rot(q.yz, 1.2);

    d = smin(d, sdEllipsoid(vec3(q.x- .3, q.y + .4, q.z - .8), vec3(.12, .3, .15)), .05);


    q = p;
    q.x = abs(q.x)+.2;
    rot(q.xz, .5);
    rot(q.xy, .2);
    d = smin(d, vcapsule(vec3(q.y,q.x, q.z+.6), .8, .04-.1*sin(q.x)), .2);

    q = p;
    rot(q.yz, .4);
    d = smin(d, vcapsule(vec3(q.x, q.y+.55, q.z + .45), .6, .06), .1);


    q = p;
    q.x = abs(q.x) - .3;
    d = smin(d, vcapsule(vec3(q.y + .3, q.x+.2, q.z + .3), .3, .08), .1);
    d = smax(d, -sdEllipsoid(vec3(q.x, q.y+.15, q.z + .5), vec3(.2, .1, .4) - .2 * noi), .05);

    q = p;
    q.x = abs(q.x) +.15;
    rot(q.xy, .45);
    d = smax(d, -sdEllipsoid(vec3(q.x, q.y+.35, q.z+.7), vec3(.05,.1,.45)), .05);

    q = p + vec3(0, .65, .19);
    rot(q.yz, -.2);
    q.xz = polar_rep(q.xz, 8.);
    q.x += .23;

    d = min(d, sdEllipsoid(q, vec3(.02,.25,.03)));
    d = max(d, -sdEllipsoid(vec3(q.y-.02, q.x, q.z), vec3(.01, .04, .05)));
    d = max(d, length(p) - 1.6);
    return d;
}

// for the pillars in the background and the gun
vec2 gun(vec3 p, float t)
{
    vec3 q = p;
    q.xy = polar_rep(p.xy, 3.);
    vec2 res = vec2(vcylinder(abs(q - vec3(.2, 0, 0)) - vec3(.1, 0, 0), .1, .2), 6.);

    q.xz = polar_rep(p.xz, 4.);
    vec2 res2 = lego((q - vec3(.2, 0, 0)) * 9.);
    opStairU(res, res2.x/9., .1, 5., res2.y);
    if (t < 1.)
        res.x = max(res.x, p.y - p.x * 2. - .4);
    return res;
}

float ball(vec3 p)
{
    p *= .1;
    p.y += .8;
    p.xz = polar_rep(p.xz, 4.);
    return min(gun(p - vec3(5, 0, 0), 1.).x, vcylinder(p - vec3(5, 0, 0), 10., .2)) / .1;
}

vec2 map(vec3 p)
{
    vec2 res = vec2(1e9), res2;
    vec3 q, op = p;

   
    p *= .5;
  
    opU(res, cutSphere(vec3(abs(p.x)-.5,p.yz), 2.5), MAT_SHELL);
    
    for (float i = 0.; i < 6.; i+=1.)
    {
        float a = PI / 9. * i;
        q = p.xyz + vec3(0,-.6,i>0.?.1:.4) - vec3(0, sin(a), -cos(a) * 1.3) * 1.8;

        rot(q.yz,i>0.?a:PI/3.);

        float k = 1. - .8 * sin(q.y*q.y);
        opU(res, vcylinder(q * vec3(k, 1, k), .3, .3)/k -.03 - noise(q * 6. - vec3(i)) * .05, MAT_BONE);
     }
   

    // skull
    opU(res, skull(p+vec3(0, -.5, 3.2)), MAT_METAL);
 
    // left arm
    opU(res, lego((p.xzy + vec3(3.2,0,-.4))*2.).x/2., MAT_METAL);

    opStairU(res, vcylinder(p + vec3(3.2, -1.4, 0), .8, .3), .2, 2., MAT_METAL);

    q = p;
    rot(q.yz, .6);

    opStairU(res, lego((q + vec3(4.4, .1, 0)) * 2.).x / 2., .1, 3., MAT_METAL);
    opStairU(res, vcylinder(p.yxz + vec3(-.4, 3.9, 0), .2, .2), .5, 10., MAT_METAL);

    rot(q.yz, -1.3);
    opStairU(res, min(vcylinder(q + vec3(4.4, -1, .3), 2.5, .1), vcylinder(q + vec3(4.4, -2.8, .3), .2, .2)), .4, 10., MAT_METAL);

    // saw 
    opStairU(res, vcylinder(q.yxz + vec3(-4.3, 4.4, .3), .1, .5), .2, 2., MAT_METAL);
    opStairU(res, vcylinder(q.xyz + vec3(4.4, -3.6, .3), .3, .2), .2, 2., MAT_METAL);
    opStairU(res, max(vcylinder(q.yxz + vec3(-4.3, 4.4, .3), .5, .15),
        -vcylinder(q.yxz + vec3(-4.3, 4, .3), .3, .1)), .15, 3., MAT_METAL);
   

    // saw
    q = p.zyx + vec3(3., -3.1, 4.9);
    vec3 qq = q;
    q.x *= -1.;
    q.xy = polar_rep(q.xy, 5.);
    qq.xy = polar_rep(qq.xy, 5.);
    q.xy = polar_rep(q.xy, 2.);

    rot(q.xy, 4.7);
    q.z = abs(q.z) - .1;

    opU(res, .8 * max(triPrism(q * vec3(1, .6, 1), vec2(.4, .04 - sin(q.y * 5.5 + 4.) * .037)), -vcylinder(q - vec3(.1, 0, 0), .5, .08)), MAT_SAW);
    opStairU(res, lego(qq.xzy*15.).x/15., .1, 5., MAT_SAW);
       
    // cannon
    q = p + vec3(3.2,-2.2,0);
    rot(q.xz, -.2); 
    opU(res, lego(q*2.5).x/2.5, MAT_METAL);
    rot(q.xz, 1.);
    opU(res, lego((q + vec3(0, -1.2, 0)) * 2.5).x / 2.5, MAT_METAL);
    opStairU(res, vcylinder(q.xzy + vec3(0, 2.5, -1.2), .3, .3), .2, 2., MAT_METAL);
    opStairU(res, max(-q.z - 4.8, abs(vcylinder(q.xzy + vec3(0, 2., -1.2), 3., .2)) - .02), .5, 4., MAT_METAL);

    // right arm
    q = p - vec3(3.3, .7, -.8);
    opStairU(res, lego(q.yxz*2.5).x/2.5, .3,2., MAT_METAL);
    opStairU(res, lego(q * 2.5-vec3(.3,3,0)).x / 2.5, .2, 2., MAT_METAL);
    opStairU(res, vcylinder(q.yxz-vec3(1,1,0), 3., .2), .2, 3., MAT_METAL);
    rot(q.yz, -.5);
    opStairU(res, lego(q.yxz * 2.5 - vec3(2.2, 9, 1.2)).x / 2.5, .2, 2., MAT_METAL);
    opStairU(res, min(lego(q * 2.5 - vec3(9,2,-.5)).x / 2.5, vcylinder(q.yzx-vec3(.8,0,3.6), 2., .15)), .3, 5., MAT_METAL);
    rot(q.xy, .8);
    legoLen=.5;
    // right fore arm
    q.z += .6;
    opStairU(res, lego(vec3(abs(q.x - 2.8), q.y, q.z) * 2.5 - vec3(1.3, -5.3, -3.5)).x / 2.5, .6, 10., MAT_METAL);
    legoLen=1.;
    opStairU(res, vcylinder(q.yxz+vec3(2.1,-2.5,1.2), 2., .1), .5, 18., MAT_METAL);
    // sword
    opStairU(res, vcylinder(q.yxz + vec3(2.1, -2.5, 1.5), 2., .1), .3, 4., MAT_METAL);

    opStairU(res, sword((q.zxy+vec3(2.1,.6,-1.5))*.8).x/.8, .3,2., MAT_METAL);

    // belly and legs
    q = p;// +vec3(0., 2, 0);
    opStairU(res, cutSphere(vec3(p.x,-p.y,p.z), 1.45), 1.3, 5., MAT_METAL);
    rot(q.xz, -.4);
    q.xz = polar_rep(q.xz, 2.);
    opStairU(res, vcylinder(q.yxz - vec3(-1.2,1.5,0), 1.5, .15), .2, 3., MAT_METAL);
    rot(q.xy, .4);
    opStairU(res, vcylinder(q - vec3(2.5, -2.7, 0), 1., .1-.1*sin(q.y-.5)), .2, 4., MAT_METAL);

    res.x /= .5;
    p /= .5;

    p.xz = mod(p.xz-248., vec2(500)) - 250.;
    p.y += 0.55;
    res2 =vec2( vcylinder(p + vec3(0, 14.35, 0), 10., 50.), MAT_DARKMETAL);

    q = p;
    fold5(q.xz);
    q.z -= 20.;
    fold5(q.xz);
    q.z -= 7.;

    opCut(res2, box(vec3(mod(q.x, 10.) - 5., q.y+4., q.z), vec3(.4, 1.5, 100.)), MAT_DARKMETAL);
    opCut(res2, box(vec3(q.x, q.y+4., q.z), vec3(100, 1.5, .4)), MAT_DARKMETAL);
    opStairU(res2, max(p.y, abs(vcylinder(p - vec3(0, 3, 0), 10., 50.)) - 1.)
        , 1., 3., MAT_DARKMETAL);
    opU(res2, vcylinder(p + vec3(0, 14.8, 0), 10., 50.), MAT_LAVA);

    opStairU(res2, ball(p), 1., 5., MAT_METAL);
    opCut(res2, -p.y+15.-p.x*.2+p.z*.2, MAT_METAL);
    opU(res, res2.x, res2.y);


    q = p;
    rot(q.xy, .8);

    // gun
    p = op.yzx-ro.yzx+vec3(.26,-.34, .3);
    rot(p.yz, -.2);
    res2 = gun(p * 6., 0.);
    opU(res, res2.x/6., res2.y);


    return res;
}



float getAO(vec3 p, vec3 n)
{
    float
        occ = .0, sca = 4., h, d;
    for (int i = 0; i < 5 && occ < .35; i++, sca *= .95)
    {
        h = 1e-5 + .15 * float(i) / 4.;
        d = map(p + h * n).x;
        occ += (h - d) * sca;
    }

    occ = clamp(1. - 3. * occ, .1, 1.);
    return occ;
}

void getMaterial(float id, vec3 p, inout vec3 n)
{
    emissive = vec3(0);
    albedo = vec3(.972, .96, .915);
    roughness = .1;
    metallic = 1.;
    if (id == MAT_METAL || id == MAT_SAW)
    {
        albedo = vec3(.46, .47, .47);
        if (id == 7.) metallic = .99;
    }
    else if (id == MAT_SHELL)
    {
        vec3 q = p;
        q.xz = mod(q.xz, 2.) - 1.;
        q.z += .5;
        albedo = mix(vec3(.01), vec3(.8, .1, .1), smoothstep(.1, .11, length(q.xz) - .3));
        albedo = mix(albedo, vec3(.01), smoothstep(2., .5, abs(p.x)));
        albedo *= fbm(p * 2.);
        roughness = .4;
    }
    else if (id == MAT_GUN)
    {
        albedo *= .1;
        metallic = .99;
    }
    else if (id == MAT_MIAO)
    {
        albedo *= .01;
        roughness = .3;
        metallic = .99;
    }
    else if (id == MAT_BONE)
    {
        albedo *= fbm(p);
        roughness = .4;
        metallic = 0.;
    }
    else if (id == MAT_DARKMETAL)
    {
        albedo = vec3(.1);
        roughness = mix(.01, .8, max(0., fbm(p * .5) - .7));
        n = normalize(n + (2. * fbm(p) - 1.) * .1);
    }
    else if (id == MAT_LAVA)
    {
        emissive = vec3(.2, 0, 0) * 10. * max(fbm(p * 40.) - .4, 0.);
        emissive = mix(emissive, vec3(.2, .005, 0) * 1e3, max(0., fbm(p * 7.) - .4));
    }

    if (metallic == 1.)
    {
        float f = fbm(p);
        float occ = getAO(p, n);

        if(id == MAT_DARKMETAL) occ=1.;
        f = (id == MAT_SHELL) ? smoothstep(.3, 9., f * exp(3. - p.y * 4.)) :
            smoothstep(.3, .4, f) * max(0., 1. - occ);
        roughness += f * 2.;
        albedo = mix(albedo, vec3(.6, .12, .02) * .3, min(1., f));
        metallic = mix(metallic, 0., min(1., f * 5.));
        n = bumpMapping(p, n, .05 * f);

        // scratch
        if(id!=MAT_SHELL)
            roughness = min(1., mix(roughness * 2., roughness, smoothstep(.4, .5, fbm(p * vec3(300, 1, 1)))));
    }
}

vec3 getNormal(vec3 p, float t)
{
    vec3 n = vec3(0);
    for (int i = 0; i < 4; i++)
    {
        vec3 e = .5773 * (2. * vec3((((i + 3) >> 1) & 1), ((i >> 1) & 1), (i & 1)) - 1.);
        n += e * map(p + .001 * e * t).x;
    }
    return normalize(n);
}

float shadow(vec3 sro, vec3 srd)
{
    float s = 1., t = .001, i = 0.;
    for (; i < 32.; i+=1.)
    {
        vec2 h = map(sro + srd * t);
        s = min(s, 16. * h.x / t);
        if (h.x < 1e-4) break;
        t += clamp(h.x, .01, .05);
    }

    return clamp(s, 0., 1.);
}


vec2 intersect()
{
    float t = .01, hit = 0.;
    vec2 res;
    for (int i = 0; i < 256; ++i)
    {
        res = map(ro + t * rd);
        res.x = abs(res.x) * (.9 + .1 * hash21(seed).x);

        if (res.x < .0005 + .0002 * t)
        {
            hit = 1.;
            break;
        }
        if (t > 1000.)
            break;

        t += res.x;
    }
    if (hit<1.) t = -1.;

    return vec2(t, res.y);
}


vec3 phongBrdf(vec3 toLight, vec3 toEye, vec3 normal)
{
    return (1.-F)*albedo/PI * (1. - metallic) + min(vec3(.99), F * ((shininess + 2.) / (2. * PI)) *
        pow(max(0., dot(reflect(-toLight, normal), toEye)), shininess));;
}


vec3 ImportanceSampleBlinn(vec3 n, float power, out float pdf)
{
    vec2 E = hash21(seed);
    vec3 o1 = normalize(abs(n.x) > abs(n.z) ? vec3(-n.y, n.x, 0) : vec3(0, -n.z, n.y));
    vec3 o2 = normalize(cross(n, o1));

    float Phi = 2. * PI * E.x;
    float CosTheta = pow(E.y, 1. / (power + 1.));
    float SinTheta = sqrt(abs(1. - CosTheta * CosTheta));
    
    pdf = (power + 2.) / (2. * PI) * pow(CosTheta, power);
    return  cos(Phi) * SinTheta * o1 + sin(Phi) * SinTheta * o2 + CosTheta * n;
}


vec3 getBackGround()
{
    rd += fbm(rd * 9.) * .5;
    vec3 p = ro + 1000. * rd;
    vec3 sky = 2.*mix(vec3(.094, .012, 0), vec3(.45,1,1), max(0.,fbm(p * .01)-.3));
    return sky * smoothstep(-90., 500., p.y);
}

vec3 scene(vec2 uv)
{
    vec3 throughput = vec3(1.), Lo = vec3(0), f0, pos, q, n, nextRd, direct, refl, hit;
    float pdf = 1., sha, t = 0., prevMat;

    for (int i = 0; i < 2; ++i)
    {
        hit.xy = intersect();
        if (i == 0)
            t = hit.x;

        if (i != 0 && hit.y == 5. && prevMat!=4.)
            break;

        q = pos = ro + hit.x * rd;

        if (hit.x < 0.)
        {
            Lo += throughput *  getBackGround();
            break;
        }

        prevMat = hit.y;
        n = getNormal(pos, (hit.y != 7. ? .1 : 1.) * hit.x);


        getMaterial(hit.y, pos, n);

        shininess= max(2. / (roughness * roughness) - 2., .01) + 1.;

        f0 = .04 - .04 * metallic + albedo * metallic;
        F = f0 + (1. - f0) * pow(1.-max(0.,dot(n,-rd)), 5.);

        sha = shadow(pos + .001 * n, sunDir);
        direct = (sunCol * phongBrdf(sunDir, -rd, n) * max(0., dot(n, sunDir)) * sha + emissive);

        Lo += throughput * direct;


        if (hash21(seed).x < length(F) + metallic)
            nextRd = normalize(ImportanceSampleBlinn(reflect(rd,n), shininess, pdf));
        else
            nextRd = normalize(ImportanceSampleBlinn(n, 1., pdf));

        if (pdf < .0001 || dot(nextRd, n) < 0.) break;
        
        throughput *= phongBrdf(nextRd, -rd, n) * dot(nextRd, n) / min(1.,pdf);

        if (throughput.x > 1. || throughput.y > 1. || throughput.z > 1.)
            break;

        rd = nextRd;
        ro = pos + .002 * n;

    }

    return mix(Lo, vec3(.11,.018,.001), (1. - exp(-.005  * t)));
}



void main()
{

	vec2 fragCoord = jit_in.uv * viewPort.xy;
   
    seed = float(iFrame) + viewPort.y * fragCoord.x / viewPort.x + fragCoord.y / viewPort.y;

    vec2 offset = -.5 + hash21(seed);
    vec2 p = (fragCoord + offset) / viewPort.xy; 

    p = 2. * p - 1.;
    p.x *= viewPort.x / viewPort.y;

    // ro = vec3(4.8, 1.2, -26);
    // vec3 ta = vec3(4.63, 1.26, -25);

	// Mouse-controlled camera orbit
	float angle = (iMouse.x / viewPort.x - 0.5) * 6.2831; // full rotation [-PI, PI]
	float elev  = (iMouse.y / viewPort.y - 0.5) * 5.0;    // up/down range [-2.5, +2.5]
	elev = clamp(elev, -2.5, 2.5); // optional safety

	vec3 center = vec3(4.63, 1.26, -25.0); // Look-at point
	float radius = 5.0;

	ro = center + vec3(
	    cos(angle) * radius,
	    elev,
	    sin(angle) * radius
	);

	vec3 ta = center;

    vec3 forward = normalize(ta - ro);
    vec3 right = normalize(cross(forward, vec3(.03, .99, .08)));
    vec3 up = normalize(cross(right, forward));

    rd = normalize(p.x * right + p.y * up + 1.5 * forward);


    // partial rendering, only render 16 scanlines per frame
    // float lineCount = ceil(viewPort.y / 16.);
    // int line = int(fragCoord.y / viewPort.y * lineCount);
    
    // vec4 prevCol = texelFetch( iChannel0, ivec2(fragCoord), 0);
    // if(iFrame == 0) prevCol = vec4(0);
    
    // if(line != iFrame % int(lineCount)) 
    // {
    //     outColor = prevCol;
    //     return;
    // }
    

    vec3 finalCol = scene(p);


    // outColor = vec4(mix(prevCol.xyz, finalCol, 1./(prevCol.w+1.)), prevCol.w+1.);
    outColor = vec4(finalCol, 1.0);
}

]]>
</program>
</language>
</jittershader>
