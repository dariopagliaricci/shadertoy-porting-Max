<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="pos" type="vec3" state="POSITION" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="envMap" type="int" default="0" />
    <param name="spherePos" type="int" default="1" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iMouse" type="vec2" default="0 0" />

	<language name="glsl" version="1.5">
		<bind param="pos" program="vp" />
		<bind param="MVP" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="viewPort" program="fp" />
		<bind param="envMap" program="fp" />
        <bind param="spherePos" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iMouse" program="fp" />

		<program name="vp" type="vertex">
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;

out jit_PerVertex {
	vec2 uv;
} jit_out;
uniform mat4 MVP;

void main() {	
	gl_Position = vec4(pos, 1.);	
	jit_out.uv = uv;
}
]]>
</program>
<program name="fp" type="fragment" >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;

layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform samplerCube envMap;
uniform sampler2DRect spherePos;
uniform float iTime;
uniform vec2 iMouse;


// "[TUT] Bending Light - Part 2" 
// by Martijn Steinrucken aka The Art of Code/BigWings - 2021
// The MIT License
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// Email: countfrolic@gmail.com
// Twitter: @The_ArtOfCode
// YouTube: youtube.com/TheArtOfCodeIsCool
// Facebook: https://www.facebook.com/groups/theartofcode/
//
// This is the end result of a tutorial on YouTube:
// Part 1 - https://youtu.be/NCpaaLkmXI8
// Part 2 - https://youtu.be/0RWaR7zApEo

// #define MAX_STEPS 100
// #define MAX_DIST 10.
// #define SURF_DIST .001

#define S smoothstep
// #define T iTime

#define MAX_STEPS 100 //The maximum amount of marching steps
#define MIN_DIST 0.0001 //The distance below which we consider a shape being hit
#define MAX_DIST 100. //The maximum distance each ray investigates


mat2 Rot(float a) {
    float s=sin(a), c=cos(a);
    return mat2(c, -s, s, c);
}

// float sdBox(vec3 p, vec3 s) {
//     p = abs(p)-s;
// 	return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);
// }


// float GetDist(vec3 p) {

//     p.xz *= Rot(iTime*.1);
    
//     float d = sdBox(p, vec3(1));
    
//     float c = cos(3.1415/5.), s=sqrt(0.75-c*c);
//     vec3 n = vec3(-0.5, -c, s);
    
//     p = abs(p);
//     p -= 2.*min(0., dot(p, n))*n;
    
//     p.xy = abs(p.xy);
//     p -= 2.*min(0., dot(p, n))*n;
    
//     p.xy = abs(p.xy);
//     p -= 2.*min(0., dot(p, n))*n;
    
//     d = p.z-1.;
//     return d;
// }

// float RayMarch(vec3 ro, vec3 rd, float side) {
// 	float dO=0.;
    
//     for(int i=0; i<MAX_STEPS; i++) {
//     	vec3 p = ro + rd*dO;
//         float dS = GetDist(p)*side;
//         dO += dS;
//         if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;
//     }
    
//     return dO;
// }

float SDFsphere(vec3 pos, vec3 c, float ra){
    //returns the distance from a point on a ray to the surface of a sphere
    //c is the center, ra is the radius
    return length(pos - c) - ra;
}

float GetDist(vec3 pos){
//in this function you place all the objects you want to render
//it returns the minimum distance between a point on the ray and the surface of the objects
    float closest = 100000;
    float dist;
    vec3 c;
    for (int i = 0; i < 20; i++){
        c = texture(spherePos, vec2(i, 0)).rgb;
        dist = SDFsphere(pos, c, 0.15);
        closest = min(closest, dist);
    }
    return closest;
}

float map(vec3 ro, vec3 rd, float side){

    //this function creates the marching loop 
    float dist = 0;
    vec3 pos;
    for(int i = 0; i < MAX_STEPS; i++){
        pos = ro + rd*dist;
        dist += GetDist(pos)*side;
        if (dist < MIN_DIST || dist > MAX_DIST){
            break;
        }
    }
    return dist;
}


vec3 GetNormal(vec3 p) {
	float d = GetDist(p);
    vec2 e = vec2(.01, 0);
    
    vec3 n = d - vec3(
        GetDist(p-e.xyy),
        GetDist(p-e.yxy),
        GetDist(p-e.yyx));
    
    return normalize(n);
}

vec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {
    vec3 f = normalize(l-p),
        r = normalize(cross(vec3(0,1,0), f)),
        u = cross(f,r),
        c = f*z,
        i = c + uv.x*r + uv.y*u,
        d = normalize(i);
    return d;
}

// classic hash function for jittering
vec2 hash2( float n ) { return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123)); }


void main()
{
    
	vec2 uv = jit_in.uv-.5;
	float ratio = viewPort.x / viewPort.y;
	uv.x *= ratio;
    // vec2 jittering = hash2(float n)-0.5;
    // jittering /= viewPort;
    // uv += jittering*3;


    // vec2 fragCoord = jit_in.uv *viewPort.xy;
    // vec2 uv = (fragCoord-.5*viewPort.xy)/viewPort.y;
	vec2 m = iMouse.xy/viewPort.xy;

    vec3 ro = vec3(0, 3, -3)*.7;
    ro.yz *= Rot(-m.y*3.14+1.);
    ro.xz *= Rot(-m.x*6.2831);
    
    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);
    
    vec3 col = texture(envMap, rd).rgb;
   
    // float d = RayMarch(ro, rd, 1.); // outside of object
    float d = map(ro, rd, 1.); // outside of object
    
    float IOR = 1.45; // index of refraction
    
    if(d<MAX_DIST) {
        vec3 p = ro + rd * d; // 3d hit position
        vec3 n = GetNormal(p); // normal of surface... orientation
        vec3 r = reflect(rd, n);
        vec3 refOutside = texture(envMap, r).rgb;
        
        vec3 rdIn = refract(rd, n, 1./IOR); // ray dir when entering
        
        vec3 pEnter = p - n*MIN_DIST*3.;
        // float dIn = RayMarch(pEnter, rdIn, -1.); // inside the object
        float dIn = map(pEnter, rdIn, -1.); // inside the object
        
        vec3 pExit = pEnter + rdIn * dIn; // 3d position of exit
        vec3 nExit = -GetNormal(pExit); 
        
        vec3 reflTex = vec3(0);
        
        vec3 rdOut = vec3(0);
        
        float abb = .01;
        
        // red
        rdOut = refract(rdIn, nExit, IOR-abb);
        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);
        reflTex.r = texture(envMap, rdOut).r;
        
        // green
        rdOut = refract(rdIn, nExit, IOR);
        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);
        reflTex.g = texture(envMap, rdOut).g;
        
        // blue
        rdOut = refract(rdIn, nExit, IOR+abb);
        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);
        reflTex.b = texture(envMap, rdOut).b;
        
        float dens = .1;
        float optDist = exp(-dIn*dens);
        
        reflTex = reflTex*optDist;//*vec3(1., .05,.2);
        
        float fresnel = pow(1.+dot(rd, n), 5.);
        
        col = mix(reflTex, refOutside, fresnel);
        //col = n*.5+.5;
    }
    
    col = pow(col, vec3(.4545));	// gamma correction
    
    outColor = vec4(col,1.0);
}
	
]]>
</program>
</language>
</jittershader>
