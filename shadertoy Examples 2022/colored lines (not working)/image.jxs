<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />

	<param name="buff_A" type="int" default="0" />
	

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iMouse" program="fp" />

		<bind param="buff_A" program="fp" />
			

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;

			uniform vec2 iResolution;
			uniform float iTime;
			uniform sampler2D buff_A;
	
			
			//bloom and DOF. Check buffer's #define to tweak the shape
			float [] blurWeights = float[](0.002216,
			   0.008764,
			   0.026995,
			   0.064759,
			   0.120985,
			   0.176033,
			   0.199471,
			   0.176033,
			   0.120985,
			   0.064759,
			   0.026995,
			   0.008764,
			   0.002216);

			vec4 blur (vec2 uv)
			{
			    vec4 res;
				for (int x = - 6; x < 6; x ++)
			    {
			    	for (int y = -6 ; y < 6; y ++)
			        {
			            res += blurWeights[x+6]*blurWeights[y+6] * texture( buff_A, ( uv * iResolution.xy + vec2 (x,y) ) / iResolution.xy);
			        }
			    }
			    return res;
			}

			void main()
			{
			    
				vec2 fragCoord = jit_in.texcoord * iResolution;

			    vec2 uv = fragCoord/iResolution.xy;
			  
			   	vec4 buf = texture( buff_A, ( uv));
			    vec3 blr = blur(uv).rgb;
			    float near =3.; float mid = 9.; float far = 15.;
			    float curve = smoothstep(0.,near,buf.w)* smoothstep(far,mid,buf.w);
			    vec3 col = mix (blr,buf.rgb,curve);
			    col.rgb += 0.5*blr;

			    fragColor = vec4 (col,1.);
			}
		]]>
		</program>
	</language>
</jittershader>
