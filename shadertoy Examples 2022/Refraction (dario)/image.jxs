<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />

	<param name="buff_B" type="int" default="0" />
	
	

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />

		<bind param="buff_A" program="fp" />
		

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;

			uniform vec2 iResolution;
			uniform float iTime;
			uniform sampler2DRect buff_B;
			
			
			
		// CC0: Refraction + post proc
		// Added a bit of post processing to the earlier refraction experiment

		#define TIME            iTime
		#define RESOLUTION      iResolution
		#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))


		// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM
		vec3 sRGB(vec3 t) {
		  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));
		}

		// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/
		vec3 aces_approx(vec3 v) {
		  v = max(v, 0.0);
		  v *= 0.6f;
		  float a = 2.51f;
		  float b = 0.03f;
		  float c = 2.43f;
		  float d = 0.59f;
		  float e = 0.14f;
		  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);
		}

		void main() {

		  vec2 fragCoord = jit_in.texcoord * iResolution;
		  vec2 q = fragCoord/RESOLUTION.xy;
		  vec3 col = vec3(0.0);
		  col = texture(buff_B, fragCoord).rgb;
		  col = aces_approx(col);
		  col = sRGB(col);
		  fragColor = vec4(col, 1.0);
		}
		]]>
		</program>
	</language>
</jittershader>
