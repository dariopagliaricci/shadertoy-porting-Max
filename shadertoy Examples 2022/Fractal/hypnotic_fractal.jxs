<jittershader name="default">
	<description>Default Slab </description>


	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />


	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;
			out jit_PerVertex {
				vec2 uv;
			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;
layout (location = 0) out vec4 fragColor;

uniform vec2 iResolution;
uniform float iTime;


void main()
{
vec2 fragCoord = jit_in.uv * iResolution.xy;
vec2 uv = fragCoord/iResolution.yy * 10.01;

float it = mix(15.0, 25.0, (sin(iTime * 0.01) + 1.0) * 0.5);
vec2 prev = uv;
float count = 0.0;

while (it > 1.0)
{
  it -= 1.0;
  prev = uv;
  uv = abs(sin(uv * (0.5 + sin(iTime * 0.1) * 0.004) + vec2(count, 0.0)) + uv.yx + vec2(4.9 + sin(iTime * 0.13) * 0.1));      
  uv = vec2(uv.y, -uv.x * (mix(1.9, 1.1, smoothstep(iTime * 0.5, 0.0, 1.0))));
  count++;
}

uv = mix(prev, uv, it);

vec3 col = 0.5 + 0.5*cos(iTime + vec3(uv.x, uv.y, uv.x + uv.y) - vec3(3, 4, 5));
fragColor = vec4(col,1.0);
}
]]>
</program>
</language>
</jittershader>
