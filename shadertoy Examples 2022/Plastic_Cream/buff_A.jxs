<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />
	<param name="iTimeDelta" type="float" default="0.0" />
	
	<param name="buff_A" type="int" default="0" />
	<param name="iFrame" type="int" default="0" />
	<param name="iMouse" type="vec4" default="0.0 0.0 0.0 0.0" />
	

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iTimeDelta" program="fp" />
		<bind param="buff_A" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iMouse" program="fp" />
		

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />

		<include source="Plastic_Cream_common.glsl" program="fp" />
		
		<program name="vp" type="vertex"  >

		

		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;

			uniform vec2 iResolution;
			uniform float iTime;
			uniform float iTimeDelta;
			uniform sampler2D buff_A;
			uniform int iFrame;
			uniform vec4 iMouse;
			
			
			const float speed = 1.;
			const float turbulences = 1.;
			const float attraction = 2.0;

			void main()
			{

				vec2 fragCoord = jit_in.texcoord * iResolution;

			    if (iFrame < 1)
			    {
			        fragColor = vec4(hash23(vec3(fragCoord, 0.)), 0, 0);
			        return;
			    }

			    // coordinates

			    
			    vec2 uv = fragCoord/R;
			    vec2 mouse = (iMouse.xy - R.xy / 2.)/R.y;
			    vec2 p = (fragCoord.xy - R.xy / 2.)/R.y;
			    vec2 offset = vec2(0);
			    float dist = length(p);
			    
			    vec4 buffer = texture(buff_A, uv);
			    
			    // turbulences
			    float noise = fbm(vec3(p * 3., dist-iTime*.1*speed));
			    noise = pow(abs(noise), 0.5);
			    float angle = noise * 6.28;
			    offset += turbulences * vec2(cos(angle), sin(angle));

			    // attraction
			    offset += attraction * normalize(p) * sin(dist * 9. + iTime);
			    
			    float dt = 30. * iTimeDelta;
			    
			    // displace frame buffer
			    vec4 frame = texture(buff_A, uv + dt * offset * speed / R);
			    
			    // edge spawn
			    bool spawn = fragCoord.x < 1. || fragCoord.x > R.x-1.
			              || fragCoord.y < 1. || fragCoord.y > R.y-1.
			              || (iMouse.z > .0 && length(p-mouse) < 50./R.y);
			    
			    // spawn from noise
			    vec2 rng = hash23(vec3(fragCoord, iFrame));
			    if (spawn) frame = vec4(step(0.5, rng.x),step(0.5, rng.y),0,0);
			    
			    // neighbor values
			    vec2 neighbors = vec2(0);
			    for (float x = -1.; x <= 1.; ++x)
			    {
			        for (float y = -1.; y <= 1.; ++y)
			        {
			            if (x == 0. && y == 0.) continue;
			            neighbors += texture(buff_A, uv+vec2(x,y)/R).rg;
			        }
			    }
			    
			    // animation fade
			    frame.r += 4.0 * (neighbors.r > 4.0 ? 1. : -1.) * iTimeDelta;
			    frame.g += 4.0 * (neighbors.g > 4.0 ? 1. : -1.) * iTimeDelta;
			    
			    fragColor = vec4(clamp(frame.rg, 0., 1.), noise, 1.);//, frame.a + (neighbors.r + neighbors.g) * iTimeDelta * .1);
			}
		]]>
		</program>
	</language>
</jittershader>
