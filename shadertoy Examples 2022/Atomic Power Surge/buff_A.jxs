<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />

	<param name="buff_A" type="int" default="0" />
	

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="buff_A" program="fp" />

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;

			uniform vec2 iResolution;
			uniform float iTime;
			uniform sampler2D buff_A;
			
			
					#define REFLECTIONS 2
		#define GLOSSY 0.45
		#define TRACE_BLEND 1.000
		//#define iTime 2920.00
		#define iTime iTime

		#define PI 3.14159265359

		vec3 sunDir;
		vec3 qDir;
		vec3 tDir;

		highp float rand(vec2 co)
		{
		    highp float a = 12.9898;
		    highp float b = 78.233;
		    highp float c = 43758.5453;
		    highp float dt= dot(co.xy ,vec2(a,b));
		    highp float sn= mod(dt,3.14);
		    return fract(sin(sn) * c);
		}

		float opS( float d1, float d2 )
		{
		    return min(d1,d2);
		    return max(-d1,d2);
		}

		float sdSphere( vec3 p, float s )
		{
			return length(p)-s;
		}

		float map(vec3 posIn)
		{
		    vec3 c = vec3(2.0);
		    vec3 pos = mod(posIn, c) - 0.5 * c;
		    
		    float r = sin(iTime / 10.0) * 0.1 + 0.65;
		    float h = r / 2.0;
		    vec2 p = vec2(0.0, r);
		    
		    return
		        opS(sdSphere(pos + p.xxy, h),
		        opS(sdSphere(pos - p.xxy, h),
		        opS(sdSphere(pos + p.xyx, h),
		        opS(sdSphere(pos - p.xyx, h),
		        opS(sdSphere(pos + p.yxx, h),
		        opS(sdSphere(pos - p.yxx, h),
		        sdSphere(pos, r)))))));
		}

		vec3 normalAt(vec3 pos)
		{
		    float epsilon = 0.001;
		    
		    float s = map(pos);
		    float dx = s - map(vec3(pos.x + epsilon, pos.y, pos.z));
		    float dy = s - map(vec3(pos.x, pos.y + epsilon, pos.z));
		    float dz = s - map(vec3(pos.x, pos.y, pos.z + epsilon));
		                                   
		    return normalize(vec3(dx, dy, dz));
		}

		float march(vec3 offset, vec3 dir)
		{
		    const float minDist = 0.01;
		    const float maxDist = 500.0;
		    const float delta = 0.1;
		    
		    float closest = 10.0;
		    
		    float d = minDist;
		    
		    for (float t = 0.0; t < 256.0; t++)
		    {
		        if (d > maxDist)
		            break;
		        vec3 pos = offset + dir * d;
		        float ter = map(pos);
		        
		        if (ter <= 0.0)
		            return d + ter;
		        
		        if (ter < 0.001)
		            return d - ter;
		        
		        if (ter < closest)
		            closest = ter;
		        
		        d += ter;
		    }
		    
		    return -closest;
		}

		vec3 rotX(vec3 vec, float r)
		{
		    float c = cos(r);
		    float s = sin(r);
		    float cy = c * vec.y;
		    float sy = s * vec.y;
		    float cz = c * vec.z;
		    float sz = s * vec.z;
		    
		    return normalize(vec3(vec.x, cy - sz, sy + cz));
		}

		vec3 rotY(vec3 vec, float r)
		{
		    float c = cos(r);
		    float s = sin(r);
		    float cx = c * vec.x;
		    float sx = s * vec.x;
		    float cz = c * vec.z;
		    float sz = s * vec.z;
		    
		    return normalize(vec3(cx - sz, vec.y, sx + cz));
		}

		vec3 shade(vec3 position, vec3 rayDir)
		{
		    vec3 c = vec3(sin(iTime / 13.0) * 0.3 + 0.5, 0.8, sin(iTime / 4.0) * 0.2 + 0.8);
		    vec3 q = vec3(0.4, 0.4, 0.4);
		    vec3 t = vec3(0.1, 0.4, 0.9);
		    vec3 normal = normalAt(position);
		    vec3 col = c * clamp(dot(normal, sunDir), 0.0, 1.0) * (1.0 - GLOSSY) * 0.0;

		    float mul = 1.0;
		    
		    for (int i = 0; i < REFLECTIONS + 1; i++)
		    {
		    
		        vec3 stroke = clamp(vec3(1.002, 1.0, 1.02) * sin(position.y * position.z * (position.x + 5550.0) / 5000.0 + (iTime + sin(iTime / 4.0) * 0.9) / 0.1), 0.0, 1.0);
		        stroke *= stroke;
		        stroke *= stroke;
		        stroke *= stroke;
		        stroke *= stroke;
		        stroke *= stroke;
		        stroke *= stroke;
		        stroke *= stroke;
		        col += clamp(stroke / 1.0 * mul, 0.0, 1.0) * (1.5 + sin(iTime / 2.0) * 0.5);
		        
		        vec3 oldRay = rayDir;
		        rayDir = reflect(rayDir, normal);
		        
		        float dist = march(position, rayDir);
		        
		        if (dist >= 0.0)
		            position = (position + rayDir * dist);
		        else
		            break;
		        
		    	normal = normalAt(position);
		        mul *= GLOSSY * clamp(dot(rayDir, oldRay) + 1.0 , 0.0, 1.0); // Fresnel
		        col += c * clamp(dot(normal, sunDir), -0.2, 1.0) * mul;
		        col += q * clamp(dot(normal, qDir), -0.2, 1.0) * mul;
		        col += t * clamp(dot(normal, tDir), -0.2, 1.0) * mul;
		    }
		    
		    return col * 1.5;
		}

		void main()
		{
		    
		    vec2 fragCoord = jit_in.texcoord * iResolution;

		    sunDir = normalize(vec3(0.0, sin(iTime), cos(iTime)));
		    qDir = normalize(vec3(-1.0, 1.0, 1.0));
		    tDir = normalize(vec3(1.0, -1.0, 1.0));
		    
		    vec3 cameraPos = vec3(sin(iTime / 7.0), sin(iTime / 5.0) * 3.0, sin(iTime / 13.0));
		    cameraPos = vec3(mod((iTime / 5.0) * 5.0, 2000.0), 0.0, 0.0);
		    float focalLength = sin(iTime / 2.0) * 4.0 + 5.0;
		    
		    float range = 0.0;
		    float offset = range / 2.0;
		    float randX = rand(fragCoord + iTime) * range - offset;
		    float randY = rand(fragCoord + 1000.0 + iTime) * range - offset;
		    
		    float x = (fragCoord.x + randX) / iResolution.x - 0.5;
		    float y = ((fragCoord.y + randY) / iResolution.y - 0.5) * (iResolution.y / iResolution.x);
		    
		    float lookX = iTime / 4.0;
		    float lookY = iTime / 5.18513;
		    
		    vec3 rayDir = normalize(vec3(x * focalLength, -1, y * focalLength));
		    rayDir = rotX(rayDir, lookX);
		    rayDir = rotY(rayDir, lookY);
		    float dist = march(cameraPos, rayDir);
			
			vec3 color = vec3(0);
		    if (dist >= 0.0)
		    {
				vec3 pos = (cameraPos + rayDir * dist);		
				color = shade(pos, rayDir);
			}
		    
			fragColor = vec4(color, dist) * TRACE_BLEND +
		        texture(buff_A, vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y)) * (1.0 - TRACE_BLEND);
		}

		]]>
		</program>
	</language>
</jittershader>
