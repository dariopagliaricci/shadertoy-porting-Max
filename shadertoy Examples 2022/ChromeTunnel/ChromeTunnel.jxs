<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />

	<param name="ichannel0" type="int" default="1" />

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />

		<bind param="iChannel0" program="fp" />
		
		
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;

			uniform vec2 iResolution;
			uniform float iTime;
			uniform samplerCube iChannel0;
			


			float time = 0.1;
			float sdBox( vec3 p, vec3 b )
			{
			  vec3 d = abs(p) - b;
			  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
			}

			float opS( float d1, float d2 )
			{
			    return max(-d1,d2);
			}

			float sdTriPrism( vec3 p, vec2 h )
			{
			    vec3 q = abs(p);
			    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);
			}

			 mat3 rotationMatrix(vec3 axis, float angle)
			{
			    axis = normalize(axis);
			    float s = sin(angle);
			    float c = cos(angle);
			    float oc = 1.0 - c;
			    
			    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,
			                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,
			                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);
			}

			float length8(vec3 x)
			{
			 	return pow(dot(vec3(1.0, 2.0, 1.0), pow(x, vec3(8.0))), 1.0/8.0)  ;
			}

			float length8(vec2 x)
			{
			 	return pow(dot(vec2(1.0, 1.0), pow(x, vec2(8.0))), 1.0/8.0)  ;
			}

			float sdTorus88( vec3 p, vec2 t )
			{
			    
			  vec2 q = vec2(length8(p.xy)-t.x,p.z);
			  return length8(q)-t.y;
			}

			float nsin(float x)
			{
			    return sin(x) * 0.5 + 0.5;
			    
			}

			float triangle(vec3 p, float thickness, float depth, float size)
			{
			    float outer = sdTriPrism(p, vec2(size, depth)); 
			    float inner = sdTriPrism(p, vec2(size-thickness, 0.1)); 
			    
			    return opS(inner,outer);   
			}

			vec3 map(vec3 p)
			{

			    vec3 q = p;

			    float rep = 0.1;
			        
			    vec3 c = vec3(rep);
			    p.z = mod(p.z,c.z)-0.5*c.z;

			    p = p * rotationMatrix(vec3(0.0, 0.0, 1.0), time* 0.2 + q.z);
			    vec3 p_e = p * rotationMatrix(vec3(0.0, 0.0, 1.0), time* 0.2 + q.z*3.0);
			    p_e.z += 0.01;
				float emissive = triangle(p_e, 0.001, 0.001, 0.08);    
				float solid = triangle(p, 0.09, 0.03 , 0.1);    

			    vec3 p_s = q;
				float blockID = rep * floor(q.z / rep);

			    p_s.z += sin(blockID) * 0.1;
			    p_s.z = mod(p_s.z,c.z)-0.5*c.z;
			    p_s = p_s * rotationMatrix(vec3(0.0, 0.0, 1.0), -iTime + 1.0 * sin(blockID* 0.1 * sin(q.z)));

			    float cutout = 1e10;
			    
			    for ( int i = 0; i < 6; i ++)
			    {
			        p_s = p_s * rotationMatrix(vec3(0.0, 0.0, 1.0), 0.33 * 3.14);

			        float circle = sdBox(p_s + vec3(0.0, 0.06 + 0.01 * nsin(blockID* 1.0), 0.0) , 
			                             vec3(0.04, 0.01, 0.5));
			     	cutout = min(cutout, circle);   
			    }
			    
			    float depth, material;
			    
			    solid = opS(solid, cutout);
			    //solid = min(cutout, solid);
			    
			    if ( emissive < solid )
			    {
			        depth = emissive;
			        material = 0.0;
			    }
			    else
			    {
					depth = solid;
			        material = 1.0;  
			    }
			    
			    return vec3(depth, material, emissive);
			}


			void getCamPos(inout vec3 ro, inout vec3 rd)
			{
			    ro.z = time * 0.5;
			    ro.x += 0.01 * sin(iTime);
			}

			 vec3 gradient(vec3 p, float t) {
						vec2 e = vec2(0., t);

						return normalize( 
							vec3(
								map(p+e.yxx).x - map(p-e.yxx).x,
								map(p+e.xyx).x - map(p-e.xyx).x,
								map(p+e.xxy).x - map(p-e.xxy).x
							)
						);
					}


			void main()
			{
				
				vec2 fragCoord = jit_in.texcoord * iResolution;

				time = iTime * 0.1;
			    vec2 _p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;
			    vec3 ray = normalize(vec3(_p, 1.0));
			    vec3 cam = vec3(0.0, 0.0, 0.0);
			    bool hit = false;
			    getCamPos(cam, ray);
			    
			    float depth = 0.0, iter = 0.0;
			    vec3 d;
			    vec3 p;
			    
			    for( int i = 0; i < 80; i ++)
			    {
			    	p = depth * ray + cam;
			        d = map(p);
			                  
			        if (d.x < 0.0001) {
						hit = true;
			            break;
			        }
			        if ( depth > 20.0)
			            break;
			                   
			        
					depth += d.x * 0.8;
					iter++;
			                   
			    }
			    vec3 col = vec3(0.0);
			    
			    if(hit)
			    	col = vec3(1.0 - iter / 80.0);

			    if(hit)
			    // emissive
			    if( d.y == 0.0)
			    {
			        col = vec3(0.3, 1.0, 1.0);
			    }
			    else // solid
			    {
			        vec3 normal = -gradient(p, 0.001);
			        col *= dot(ray, normal);
			        vec3 light = vec3(cos(iTime), sin(iTime), 0.0);
			   
			        col += vec3(0.5, 0.9, 0.9) * dot(light, normal) * 0.1;
			        
			        vec3 ref = reflect(ray,normal);
			        
			        ref = ref * rotationMatrix(vec3(1.0, 1.0, 1.1), iTime/10.0);

			        col *= texture(iChannel0, ref).rbg;
			        col = pow(col, vec3(
			        	1.0, 
			            0.3, 
			            0.2)) * 0.5;
			    }

			   	float dd = d.z; //max(d.z, 0.01);
			        
				//col += vec3(0.1, 0.5, 0.5) * (1.0 / (dd));

				col = clamp(col, vec3(0.0), vec3(1.0));

			    fragColor = vec4((col), 1.0);
			    
			}
		]]>
		</program>
	</language>
</jittershader>

