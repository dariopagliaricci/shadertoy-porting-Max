<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iChannelResolution0" type="vec2" state="TEXDIM1" />
	<param name="iChannelResolution1" type="vec2" state="TEXDIM2" />
	<param name="iChannelResolution2" type="vec2" state="TEXDIM3" />
	<param name="iChannelResolution3" type="vec2" state="TEXDIM4" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iFrame" type="int" default="0" />
	<param name="iMouse" type="vec4" default="0.0 0.0 0.0 0.0" />

	<param name="buff_A" type="int" default="0" />
	<param name="buff_C" type="int" default="1" />
	<param name="buff_D" type="int" default="2" />
	<param name="iChannel3" type="int" default="3" />
	

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iChannelResolution" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iFrame" program="fp" />

		<bind param="iChannelResolution0" program="fp" />
		<bind param="iChannelResolution1" program="fp" />
		<bind param="iChannelResolution2" program="fp" />
		<bind param="iChannelResolution3" program="fp" />


		<bind param="buff_A" program="fp" />
		<bind param="buff_C" program="fp" />
		<bind param="buff_D" program="fp" />
		<bind param="iChannel2" program="fp" />
		
		
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;

			uniform vec2 iResolution;
			uniform vec2 iChannelResolution0;
			uniform vec2 iChannelResolution1;
			uniform vec2 iChannelResolution2;
			uniform vec2 iChannelResolution3;
			uniform float iTime;
			uniform int iFrame;
			uniform vec4 iMouse;
		
			uniform sampler2D buff_A;
			uniform sampler2D buff_C;
			uniform sampler2D buff_D;
			uniform sampler2D iChannel3;
	
			
			
		// main reaction-diffusion loop

		// actually the diffusion is realized as a separated two-pass Gaussian blur kernel and is stored in buffer C

		#define pi2_inv 0.159154943091895335768883763372

		vec2 complex_mul(vec2 factorA, vec2 factorB){
		    return vec2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
		}

		vec2 spiralzoom(vec2 domain, vec2 center, float n, float spiral_factor, float zoom_factor, vec2 pos){
		    vec2 uv = domain - center;
		    float d = length(uv);
		    return vec2( atan(uv.y, uv.x)*n*pi2_inv + d*spiral_factor, -log(d)*zoom_factor) + pos;
		}

		vec2 complex_div(vec2 numerator, vec2 denominator){
		    return vec2( numerator.x*denominator.x + numerator.y*denominator.y,
		                numerator.y*denominator.x - numerator.x*denominator.y)/
		        vec2(denominator.x*denominator.x + denominator.y*denominator.y);
		}

		float circle(vec2 uv, vec2 aspect, float scale){
		    return clamp( 1. - length((uv-0.5)*aspect*scale), 0., 1.);
		}

		float sigmoid(float x) {
		    return 2./(1. + exp2(-x)) - 1.;
		}

		float smoothcircle(vec2 uv, vec2 aspect, float radius, float ramp){
		    return 0.5 - sigmoid( ( length( (uv - 0.5) * aspect) - radius) * ramp) * 0.5;
		}

		float conetip(vec2 uv, vec2 pos, float size, float min)
		{
		    vec2 aspect = vec2(1.,iResolution.y/iResolution.x);
		    return max( min, 1. - length((uv - pos) * aspect / size) );
		}

		float warpFilter(vec2 uv, vec2 pos, float size, float ramp)
		{
		    return 0.5 + sigmoid( conetip(uv, pos, size, -16.) * ramp) * 0.5;
		}

		vec2 vortex_warp(vec2 uv, vec2 pos, float size, float ramp, vec2 rot)
		{
		    vec2 aspect = vec2(1.,iResolution.y/iResolution.x);

		    vec2 pos_correct = 0.5 + (pos - 0.5);
		    vec2 rot_uv = pos_correct + complex_mul((uv - pos_correct)*aspect, rot)/aspect;
		    float _filter = warpFilter(uv, pos_correct, size, ramp);
		    return mix(uv, rot_uv, _filter);
		}

		vec2 vortex_pair_warp(vec2 uv, vec2 pos, vec2 vel)
		{
		    vec2 aspect = vec2(1.,iResolution.y/iResolution.x);
		    float ramp = 5.;

		    float d = 0.2;

		    float l = length(vel);
		    vec2 p1 = pos;
		    vec2 p2 = pos;

		    if(l > 0.){
		        vec2 normal = normalize(vel.yx * vec2(-1., 1.))/aspect;
		        p1 = pos - normal * d / 2.;
		        p2 = pos + normal * d / 2.;
		    }

		    float w = l / d * 2.;

		    // two overlapping rotations that would annihilate when they were not displaced.
		    vec2 circle1 = vortex_warp(uv, p1, d, ramp, vec2(cos(w),sin(w)));
		    vec2 circle2 = vortex_warp(uv, p2, d, ramp, vec2(cos(-w),sin(-w)));
		    return (circle1 + circle2) / 2.;
		}

		vec2 mouseDelta(){
		    vec2 pixelSize = 1. / iResolution.xy;
		    float eighth = 1./8.;
		    vec4 oldMouse = texture(buff_D, vec2(7.5 * eighth, 2.5 * eighth));
		    vec4 nowMouse = vec4(iMouse.xy / iResolution.xy, iMouse.zw / iResolution.xy);
		    if(oldMouse.z > pixelSize.x && oldMouse.w > pixelSize.y && 
		       nowMouse.z > pixelSize.x && nowMouse.w > pixelSize.y)
		    {
		        return nowMouse.xy - oldMouse.xy;
		    }
		    return vec2(0.);
		}

		void main()
		{
			vec2 fragCoord = jit_in.texcoord * iResolution;
			vec2 uv = fragCoord.xy / iResolution.xy;
		    vec2 pixelSize = 1. / iResolution.xy;
		    

		    vec2 mouseV = mouseDelta();
		    vec2 aspect = vec2(1.,iResolution.y/iResolution.x);
		    uv = vortex_pair_warp(uv, iMouse.xy*pixelSize, mouseV*aspect*1.4);

		    vec4 blur1 = texture(buff_C, uv);
		    
		    vec4 noise = texture(iChannel3, fragCoord.xy / iChannelResolution3.xy + fract(vec2(42,56)*iTime));

		    // get the gradients from the blurred image
			vec2 d = pixelSize*4.;
			vec4 dx = (texture(buff_C, fract(uv + vec2(1,0)*d)) - texture(buff_C, fract(uv - vec2(1,0)*d))) * 0.5;
			vec4 dy = (texture(buff_C, fract(uv + vec2(0,1)*d)) - texture(buff_C, fract(uv - vec2(0,1)*d))) * 0.5;
		    
		    vec2 uv_red = uv + vec2(dx.x, dy.x)*pixelSize*8.; // add some diffusive expansion
		    
		    float new_red = texture(buff_A, fract(uv_red)).x + (noise.x - 0.5) * 0.0025 - 0.002; // stochastic decay
			new_red -= (texture(buff_C, fract(uv_red + (noise.xy-0.5)*pixelSize)).x -
						texture(buff_A, fract(uv_red + (noise.xy-0.5)*pixelSize))).x * 0.047; // reaction-diffusion
		        
		    if(iFrame<10)
		    {
		        fragColor = noise; 
		    }
		    else
		    {
		        fragColor.x = clamp(new_red, 0., 1.);
		    }

		//    fragColor = noise; // need a restart?
		}

		]]>
		</program>
	</language>
</jittershader>
