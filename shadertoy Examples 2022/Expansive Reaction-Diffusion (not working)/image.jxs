<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>

	<param name="iChannelResolution0" type="vec2" state="TEXDIM1" />
	<param name="iChannelResolution1" type="vec2" state="TEXDIM2" />
	<param name="iChannelResolution2" type="vec2" state="TEXDIM3" />
	<param name="iChannelResolution3" type="vec2" state="TEXDIM4" />

	<param name="iTime" type="float" default="0.0" />
	<param name="iMouse" type="vec2" default="0.0 0.0" />

	<param name="buff_A" type="int" default="0" />
	<param name="buff_C" type="int" default="1" />
	<param name="iChannel2" type="int" default="2" />
	<param name="iChannel3" type="int" default="3" />
	

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />


		<bind param="buff_A" program="fp" />
		<bind param="buff_C" program="fp" />
		<bind param="buff_D" program="fp" />
		<bind param="iChannel2" program="fp" />

		<bind param="iChannelResolution0" program="fp" />
		<bind param="iChannelResolution1" program="fp" />
		<bind param="iChannelResolution2" program="fp" />
		<bind param="iChannelResolution3" program="fp" />
		
		
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />

		
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;

			uniform vec2 iResolution;
			uniform float iTime;
			uniform vec2 iMouse;

			uniform sampler2D buff_A;
			uniform sampler2D buff_C;
			uniform sampler2D iChannel2;
			uniform sampler2D iChannel3;

			uniform vec2 iChannelResolution0;
			uniform vec2 iChannelResolution1;
			uniform vec2 iChannelResolution2;
			uniform vec2 iChannelResolution3;
	
			
			
			void main()
		{
			vec2 fragCoord = jit_in.texcoord * iResolution;
			vec2 uv = fragCoord.xy / iResolution.xy;
		    vec2 pixelSize = 1. / iResolution.xy;
		    vec2 aspect = vec2(1.,iResolution.y/iResolution.x);

		    vec4 noise = texture(iChannel3, fragCoord.xy / iChannelResolution3.xy + fract(vec2(42,56)*iTime));
		    
			vec2 lightSize=vec2(4.);

		    // get the gradients from the blurred image
			vec2 d = pixelSize*2.;
			vec4 dx = (texture(iChannel2, uv + vec2(1,0)*d) - texture(iChannel2, uv - vec2(1,0)*d))*0.5;
			vec4 dy = (texture(iChannel2, uv + vec2(0,1)*d) - texture(iChannel2, uv - vec2(0,1)*d))*0.5;

			// add the pixel gradients
			d = pixelSize*1.;
			dx += texture(buff_A, uv + vec2(1,0)*d) - texture(buff_A, uv - vec2(1,0)*d);
			dy += texture(buff_A, uv + vec2(0,1)*d) - texture(buff_A, uv - vec2(0,1)*d);

			vec2 displacement = vec2(dx.x,dy.x)*lightSize; // using only the red gradient as displacement vector
			float light = pow(max(1.-distance(0.5+(uv-0.5)*aspect*lightSize + displacement,0.5+(iMouse.xy*pixelSize-0.5)*aspect*lightSize),0.),4.);

			// recolor the red channel
			vec4 rd = vec4(texture(buff_A,uv+vec2(dx.x,dy.x)*pixelSize*8.).x)*vec4(0.7,1.5,2.0,1.0)-vec4(0.3,1.0,1.0,1.0);

		    // and add the light map
		    fragColor = mix(rd,vec4(8.0,6.,2.,1.), light*0.75*vec4(1.-texture(buff_A,uv+vec2(dx.x,dy.x)*pixelSize*8.).x)); 
			
			//fragColor = texture(iChannel0, uv); // bypass    
		}

		]]>
		</program>
	</language>
</jittershader>
