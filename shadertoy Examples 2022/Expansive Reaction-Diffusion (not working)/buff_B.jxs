<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>

	<param name="iChannelResolution0" type="vec2" state="TEXDIM1" />
	<param name="iChannelResolution1" type="vec2" state="TEXDIM2" />
	<param name="iChannelResolution2" type="vec2" state="TEXDIM3" />
	<param name="iChannelResolution3" type="vec2" state="TEXDIM4" />

	<param name="iTime" type="float" default="0.0" />
	<param name="buff_A" type="int" default="0" />

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="buff_A" program="fp" />

		<bind param="iChannelResolution0" program="fp" />
		<bind param="iChannelResolution1" program="fp" />
		<bind param="iChannelResolution2" program="fp" />
		<bind param="iChannelResolution3" program="fp" />
		

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;
			

		uniform vec2 iResolution;
		uniform vec2 iChannelResolution0;
		uniform vec2 iChannelResolution1;
		uniform vec2 iChannelResolution2;
		uniform vec2 iChannelResolution3;
		uniform float iTime;
		uniform sampler2D buff_A;
		

		
		// horizontal Gaussian blur pass

		void main()
		{
		    vec2 fragCoord = jit_in.texcoord * iResolution;
		    vec2 pixelSize = 1./ iChannelResolution0.xy;
		    vec2 uv = fragCoord.xy * pixelSize;
		    
		    float h = pixelSize.x;
			vec4 sum = vec4(0.0);
			sum += texture(buff_A, fract(vec2(uv.x - 4.0*h, uv.y)) ) * 0.05;
			sum += texture(buff_A, fract(vec2(uv.x - 3.0*h, uv.y)) ) * 0.09;
			sum += texture(buff_A, fract(vec2(uv.x - 2.0*h, uv.y)) ) * 0.12;
			sum += texture(buff_A, fract(vec2(uv.x - 1.0*h, uv.y)) ) * 0.15;
			sum += texture(buff_A, fract(vec2(uv.x + 0.0*h, uv.y)) ) * 0.16;
			sum += texture(buff_A, fract(vec2(uv.x + 1.0*h, uv.y)) ) * 0.15;
			sum += texture(buff_A, fract(vec2(uv.x + 2.0*h, uv.y)) ) * 0.12;
			sum += texture(buff_A, fract(vec2(uv.x + 3.0*h, uv.y)) ) * 0.09;
			sum += texture(buff_A, fract(vec2(uv.x + 4.0*h, uv.y)) ) * 0.05;
		    
		    fragColor.xyz = sum.xyz/0.98; // normalize
			fragColor.a = 1.;
		}
		]]>
		</program>
	</language>
</jittershader>
