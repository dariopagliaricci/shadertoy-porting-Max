<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />
		

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />

		<include source="PTGI_common.glsl" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;
			

		uniform vec2 iResolution;
		uniform float iTime;
		

		
				bool trace(inout vec3 pos, in vec3 dir){
		    pos += dir*sdf(pos);
		    pos += dir*sdf(pos);
		    for(int i = 0; i < MaxStepsDirect; i++){
		        float dist = sdf(pos);
		        if(dist > MaxDist) break;
		        if(dist < MinDist){
		            pos -= (2.*MinDist-dist) * dir;
		            pos -= (2.*MinDist-sdf(pos)) * dir;
		            pos -= (2.*MinDist-sdf(pos)) * dir;
		            return true;
		        }
		        pos += dir*dist;
		    }
		    return false;
		}

		void main(){

			vec2 fragCoord = jit_in.texcoord * iResolution;
		    
		    Camera cam = getCam(iTime);
		    
		    vec2 uv = (fragCoord-iResolution.xy/2.0) / iResolution.y;
		    vec3 dir = uv2dir(cam, uv);
		    fragColor = vec4(0.);
		    vec3 pos = cam.pos;
		    if(trace(pos, dir)) fragColor = vec4(pos, 1.);
		}
		]]>
		</program>
	</language>
</jittershader>
