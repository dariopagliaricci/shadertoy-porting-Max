<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />

	<param name="buff_A" type="int" default="0" />
	<param name="buff_B" type="int" default="1" />
	

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />

		<bind param="buff_A" program="fp" />
		<bind param="buff_B" program="fp" />
		

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;
			

		uniform vec2 iResolution;
		uniform float iTime;
		
		uniform sampler2D buff_A;
		uniform sampler2D buff_B;
			
		// License CC0: Hex Marching
		#define RESOLUTION  iResolution
		#define TIME        iTime
		#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))

		const mat2 brot = ROT(2.399);
		//  simplyfied version of Dave Hoskins blur
		vec3 dblur(vec2 q,float rad) {
		  vec3 acc=vec3(0);
		  const float m = 0.002;
		  vec2 pixel=vec2(m*RESOLUTION.y/RESOLUTION.x,m);
		  vec2 angle=vec2(0,rad);
		  rad=1.;
		  const int iter = 30;
		  for (int j=0; j<iter; ++j) {  
		    rad += 1./rad;
		    angle*=brot;
		    vec4 col=texture(buff_B,q+pixel*(rad-1.)*angle);
		    acc+=col.xyz;
		  }
		  return acc*(1.0/float(iter));
		}

		void main() {


		  vec2 fragCoord = jit_in.texcoord * RESOLUTION;
		  	
		  vec2 q = fragCoord/RESOLUTION.xy;
		  vec2 p = -1.0+2.0*q;
		  vec4 pcol = texture(buff_A,q);
		  vec3 bcol = dblur(q, .75);
		  
		  vec3 col = pcol.xyz;
		  col += vec3(0.9, .8, 1.2)*mix(0.5, 0.66, length(p))*(0.05+bcol);
		  
		  fragColor = vec4(col, 1.0);
		}


		]]>
		</program>
	</language>
</jittershader>
