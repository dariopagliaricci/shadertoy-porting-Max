<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />
	<param name="iFrame" type="int" default="0" />
	<param name="iMouse" type="vec2" default="0.0 0.0" />

	<param name="buff_A" type="int" default="0" />
	<param name="buff_B" type="int" default="1" />
	

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iMouse" program="fp" />

		<bind param="buff_A" program="fp" />
		<bind param="buff_B" program="fp" />

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;

			uniform vec2 iResolution;
			uniform float iTime;
			uniform int iFrame;
			uniform vec2 iMouse;
			uniform sampler2D buff_A;
			uniform sampler2D buff_B;
			
		// Synaptic by nimitz (twitter: @stormoid)
		// https://www.shadertoy.com/view/MdG3Dd
		// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
		// Contact the author for other licensing options

		//Rendering

		/*
			This buffer renders each particles
			multiple times per frame to allow particles
			to move more than one pixel per frame while still
			leaving a solid trail.
		*/

		#define time iTime

		//Anywhere under 900 "should" work fine (might slow down though)
		const int numParticles = 140;
		const int stepsPerFrame = 7;

		float mag(vec3 p){return dot(p,p);}

		vec4 drawParticles(in vec3 ro, in vec3 rd)
		{
		    vec4 rez = vec4(0);
		    vec2 w = 1./iResolution.xy;
		    
		    for (int i = 0; i < numParticles; i++)
		    {
		        vec3 pos = texture(buff_A, vec2(i,100.0)*w).rgb;
		        vec3 vel = texture(buff_A, vec2(i,0.0)*w).rgb;
		        for(int j = 0; j < stepsPerFrame; j++)
		        {
		            float d = mag((ro + rd*dot(pos.xyz - ro, rd)) - pos.xyz);
		            d *= 1000.;
		            d = .14/(pow(d,1.1)+.03);
		            
		            rez.rgb += d*abs(sin(vec3(2.,3.4,1.2)*(time*.06 + float(i)*.003 + 2.) + vec3(0.8,0.,1.2))*0.7+0.3)*0.04;
		            //rez.rgb += d*abs(sin(vec3(2.,3.4,1.2)*(time*.06 + float(i)*.003 + 2.75) + vec3(0.8,0.,1.2))*0.7+0.3)*0.04;
		            pos.xyz += vel*0.002*0.2;
		        }
		    }
		    rez /= float(stepsPerFrame);
		    
		    return rez;
		}

		vec3 rotx(vec3 p, float a){
		    float s = sin(a), c = cos(a);
		    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);
		}

		vec3 roty(vec3 p, float a){
		    float s = sin(a), c = cos(a);
		    return vec3(c*p.x + s*p.z, p.y, -s*p.x + c*p.z);
		}

		vec3 rotz(vec3 p, float a){
		    float s = sin(a), c = cos(a);
		    return vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);
		}

		mat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}

		void main()
		{	
		    vec2 fragCoord = jit_in.texcoord * iResolution;

		    vec2 q = fragCoord.xy/iResolution.xy;
			vec2 p = fragCoord.xy/iResolution.xy-0.5;
			p.x*=iResolution.x/iResolution.y;
			vec2 mo = iMouse.xy / iResolution.xy-.5;
		    mo = (mo==vec2(-.5))?mo=vec2(-0.15,0.):mo;
			mo.x *= iResolution.x/iResolution.y;
		    mo*=6.14;
			
			vec3 ro = vec3(0.,0.,2.5);
		    vec3 rd = normalize(vec3(p,-.5));
		    
		    vec4 cola = drawParticles(ro, rd);
		    vec4 colb = texture(buff_B, q);
		    
		    //Feedback
		    vec4 col = cola + colb;
		    col *= 0.9975;
		    
		    if (iFrame < 5) col = vec4(0);
		    
			fragColor = col;
		}

		]]>
		</program>
	</language>
</jittershader>
