<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" default="1920.0 1080.0" />
    <param name="iTime" type="float" default="0" />

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
        <bind param="iTime" program="fp" />

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core

			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;
			
			uniform vec2 iResolution;
            uniform float iTime;

						// Copyright Inigo Quilez, 2014 - https://iquilezles.org/
			// I am the sole copyright owner of this Work.
			// You cannot host, display, distribute or share this Work in any form,
			// including physical and digital. You cannot use this Work in any
			// commercial or non-commercial product, website or project. You cannot
			// sell this Work and you cannot mint an NFTs of it.
			// I share this Work for educational purposes, and you can link to it,
			// through an URL, proper attribution and unmodified screenshot, as part
			// of your educational material. If these conditions are too restrictive
			// please contact me and we'll definitely work it out.

			const mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );

			float hash( vec2 p )
			{
				float h = dot(p,vec2(127.1,311.7));
			    return -1.0 + 2.0*fract(sin(h)*43758.5453123);
			}

			float noise( in vec2 p )
			{
			    vec2 i = floor( p );
			    vec2 f = fract( p );
				
				vec2 u = f*f*(3.0-2.0*f);

			    return mix( mix( hash( i + vec2(0.0,0.0) ), 
			                     hash( i + vec2(1.0,0.0) ), u.x),
			                mix( hash( i + vec2(0.0,1.0) ), 
			                     hash( i + vec2(1.0,1.0) ), u.x), u.y);
			}

			float fbm( vec2 p )
			{
			    float f = 0.0;
			    f += 0.5000*noise( p ); p = m*p*2.02;
			    f += 0.2500*noise( p ); p = m*p*2.03;
			    f += 0.1250*noise( p ); p = m*p*2.01;
			    f += 0.0625*noise( p );
			    return f/0.9375;
			}

			vec2 fbm2( in vec2 p )
			{
			    return vec2( fbm(p.xy), fbm(p.yx) );
			}

			vec3 map( vec2 p )
			{   
			    p *= 0.7;

			    float f = dot( fbm2( 1.0*(0.05*iTime + p + fbm2(-0.05*iTime+2.0*(p + fbm2(4.0*p)))) ), vec2(1.0,-1.0) );

			    float bl = smoothstep( -0.8, 0.8, f );

			    float ti = smoothstep( -1.0, 1.0, fbm(p) );

			    return mix( mix( vec3(0.45,0.23,0.32), 
			                     vec3(0.50,0.60,0.35), ti ), 
			                     vec3(0.00,0.00,0.02), bl );
			}

			void main()
			{
			    vec2 fragCoord = jit_in.texcoord;
			    vec2 p = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;
			    

			    float e = 0.0045;

			    vec3 colc = map( p               ); float gc = dot(colc,vec3(0.333));
			    vec3 cola = map( p + vec2(e,0.0) ); float ga = dot(cola,vec3(0.333));
			    vec3 colb = map( p + vec2(0.0,e) ); float gb = dot(colb,vec3(0.333));
			    
			    vec3 nor = normalize( vec3(ga-gc, e, gb-gc ) );

			    vec3 col = colc;
			    col += vec3(1.0,0.7,0.6)*8.0*abs(2.0*gc-ga-gb);
			    col *= 1.0+0.2*nor.y*nor.y;
			    col += 0.05*nor.y*nor.y*nor.y;
			    
			    
			    vec2 q = fragCoord.xy/iResolution.xy;
			    col *= pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.1);
			    
			    fragColor = vec4( col, 1.0 );
			}



		]]>
		</program>
	</language>
</jittershader>