<jittershader name="default">
	<description>Default Slab </description>

	<param name="iResolution" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />
	<param name="iFrame" type="int" default="0" />
	

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">

		<bind param="iResolution" program="fp" />
		<bind param="iTime" program="fp" />

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />

		<include source="ND_common.glsl" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 fragColor;

			uniform vec2 iResolution;
			uniform float iTime;
			uniform int iFrame;
			
			
		// globals
		float rng;
		float glow;

		float map(vec3 p)
		{
		    float dist = 100.;
		    
		    // travel
		    p.z -= iTime * .5;
		    vec3 q = p;
		    
		    // repeat
		    float grid = 4.;
		    float id = hash13(floor(p/grid-.5));
		    p = repeat(p,grid);
		    p += (hash31(id*100.)*2.-1.);
		    
		    // spice
		    float noise = fbm(p);
		    
		    // jazz
		    float t = iTime * .2 + rng * .01 + id * 196.;
		    
		    // kaleido
		    float a = 1.;
		    const float count = 5.;
		    for (float i = 0.; i < count; ++i)
		    {
		        // funk
		        float tempo = iTime*.7+i*2.+p.z*.5+q.z*.1;
		    
		        // move
		        float rythm = pow(sin(tempo)*.5+.5, 10.);
		        
		        // rotation
		        p.xz *= rot((rythm*.1+t)/a);
		        p.yx *= rot((rythm*.2+t)/a);
		        
		        // fold
		        float r = (rythm * .5 + .05 + noise*.1)/a;
		        p.xz = abs(p.xz)-r*a;
		        
		        // shape
		        dist = min(dist, length(p.xz));
		        
		        // falloff
		        a /= 1.2 + 0.7 * id;
		    }
		    
		    // shine
		    glow += .0005/dist;

		    return dist;
		}

		void main()
		{
		    vec3 color = vec3(0);
		    
		    // coordinates

		    vec2 fragCoord = jit_in.texcoord * iResolution;

		    vec2 p = (fragCoord-iResolution.xy/2.)/iResolution.y;
		    vec3 ray = normalize(vec3(p, -1.));
		    vec3 pos = vec3(0,0,0) + ray;

		    // globals
		    rng = hash13(vec3(fragCoord, iFrame));
		    glow = 0.;
		    
		    // raymarch
		    float total = 0.;
		    float maxDist = 20.;
		    for (float steps = 35.; steps > 0.; --steps)
		    {
		        float dist = map(pos);
		        if (dist < .0001 * total || total > maxDist) break;
		        total += dist;
		        pos += ray * dist;
		    }

		    // palette
		    vec3 tint = .5 + .5 * cos(vec3(1,2,3)*5.5 + length(pos) * .2 - .5);
		    
		    fragColor = vec4(tint * glow,1.0);
		}

		]]>
		</program>
	</language>
</jittershader>
