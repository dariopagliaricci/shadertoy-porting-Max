<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />

	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iMouse" type="vec3" default="0 0 0" />


	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />

		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iMouse" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(pos, 1.);
				jit_out.uv = uv;
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform vec3 iMouse;

// thanks to iq for the voxel algorithm
// https://www.shadertoy.com/view/4dfGzs

#define PI 3.141592
#define TAU 6.283185
#define SAMPLES 4
#define ANTIALIAS
#define MOTION_BLUR
#define DEPTH_OF_FIELD

#define MAX_BOUNCES 4
#define MAX_DIST 40.

float seed;

// hash functions by Nimitz: https://www.shadertoy.com/view/Xt3cDn

uint hash(uvec2 p) {
    p = 1103515245U*((p >> 1U)^(p.yx));
    uint h32 = 1103515245U*((p.x)^(p.y>>3U));
    return h32^(h32 >> 16);
}

float hash1(inout float seed) {
    uint n = hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    return float(n)*(1./float(0xffffffffU));
}

vec2 hash2(inout float seed) {
    uint n = hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    uvec2 rz = uvec2(n, n*48271U);
    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);
}

vec3 hash3(inout float seed) {
    uint n = hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    uvec3 rz = uvec3(n, n*16807U, n*48271U);
    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);
}

float hash31(vec3 p) {
    p = fract(p*vec3(234.342, 123.432, 432.234));
    p += dot(p, p+118.432);
    return fract(p.x*p.y*p.z);
}

// rotation function
mat2 rot(float a) {
    float c = cos(a), s = sin(a);
    return mat2(c, -s, s, c);
}

// random functions by reinder: https://www.shadertoy.com/view/XlGcWh

vec2 random2D(inout float seed) {
    vec2 h = hash2(seed) * vec2(1.,TAU);
    float phi = h.y;
    float r = sqrt(h.x);
	return r * vec2(sin(phi), cos(phi));
}

vec3 random3D(inout float seed) {
    vec3 h = hash3(seed) * vec3(2.,TAU,1.)-vec3(1,0,0);
    float phi = h.y;
    float r = pow(h.z, 1./3.);
	return r * vec3(sqrt(1.-h.x*h.x)*vec2(sin(phi), cos(phi)), h.x);
}

struct Ray {
    vec3 o, d; // origin and direction
};

struct Camera {
    vec3 o, d; // origin and direction
    float z, a; // zoom and aperture
};

// simple camera system
Ray getRay(vec2 uv, Camera c, float aspect) {
    float lensRad = c.a * .5;
    float focDist = length(c.o - c.d);
    float hh = tan(radians(c.z)*.5);
    float hw = aspect * hh;

    vec3 f = normalize(c.o - c.d);
    vec3 s = normalize(cross(vec3(0,1,0), f));
    vec3 u = cross(f, s);
    
    vec3 r = c.o - hw*focDist*s - hh*focDist*u - focDist*f;
    vec3 h = 2.*hw*focDist*s;
    vec3 v = 2.*hh*focDist*u;
    
    vec2 d = lensRad*random2D(seed);
    vec3 o = s*d.x + u*d.y;
    
    vec3 i = normalize(r + uv.x*h + uv.y*v - c.o - o);
    
    return Ray(c.o + o, i);
}

#define LAMB 0
#define METAL 1

struct Material {
    int type; // metal or lambertian
    vec3 col; // color of the object
    float k; // roughness
};

// touching terrain at point p
bool map(vec3 p) {
    return p.y*abs(1.*sin(.5*p.y)) < -4.-4.*sin(.35*p.x)*sin(.35*p.z) + 2.5*sin(.5*p.x)*sin(.5*p.z) || p.y < -7.;
}

// intersections function

float intersect(Ray r, out vec3 n, out Material mat) {
    vec3 p = floor(r.o);
    vec3 m = 1./r.d;
    
    vec3 s = sign(r.d);
    vec3 q = (p - r.o + .5+.5*s) * m;
    
    float t;
    for (int i=0; i<128; i++) {
        vec3 v = step(q.xyz, q.yzx) * step(q.xyz, q.zxy);
        q += v * m * s;
        p += v * s;
        n = v * -s;
        
        vec3 d = (p - r.o + .5-.5*s) / r.d;
        t = max(d.x, max(d.y, d.z));
        
        if (map(p) || t > MAX_DIST) break;
    }
    
    float v = hash31(p);
    if (v < .5) {
        mat = Material(LAMB, vec3(1,.8,.6), 0.);
    } else if (v > .5) {
        mat = Material(METAL, vec3(1,.3,.3), 0.);
    } else {
        mat = Material(METAL, vec3(.4,.6,1), .5);
    }
    if (p.y < -7.) {
        mat = Material(METAL, vec3(.4,.5,.8), .05);
    }
    
    return t;
}

void main()
{
    
    vec2 fragCoord = jit_in.uv * viewPort.xy;

    vec2 mouse = iMouse.xy / viewPort.xy;
    
    vec3 tot = vec3(0);
    for (int i = 0; i < SAMPLES; i++) {
    
        // antialiasing code by Reinder: https://www.shadertoy.com/view/llVcDz

        seed = float(hash(floatBitsToUint(fragCoord)))/float(0xffffffffU)+float(i);
        
        #ifdef ANTIALIAS
        vec2 o = hash2(seed) - .5;
        #else
        vec2 o = vec2(0);
        #endif
        
        vec2 uv = (fragCoord + o) / viewPort.xy;
        
        #ifdef MOTION_BLUR
        float time = iTime + .03*(hash1(seed)-.5);
        #else
        float time = iTime;
        #endif
        time += 10.*mouse.x;

        // setup camera
        
        #ifdef DEPTH_OF_FIELD
        Camera c = Camera(vec3(-.5,6.+2.*cos(time),-8), vec3(0,0,0), 90., .5);
        #else
        Camera c = Camera(vec3(-.5,6.+2.*cos(time),-8), vec3(0,0,0), 90., .0);
        #endif
        
        c.o.xz *= rot(.25*sin(time));

        Ray r = getRay(uv, c, viewPort.x/viewPort.y);
        r.o.x += 5.*cos(time);
        r.o.z += 7.*time;

        vec3 n;
        Material mat;
    
        vec3 col = vec3(1);
        
        // pathtrace
        
        for (int j = 0; j < MAX_BOUNCES; j++) {
            float t = intersect(r, n ,mat);
            if (t < MAX_DIST) {
                vec3 p = r.o + r.d * t;
                col *= mat.col;
                r.o = p;
            
                if (mat.type == LAMB) { // diffuse
                    r.d = normalize(n + normalize(random3D(seed)));
                } else if (mat.type == METAL) { // reflection
                    r.d = normalize(reflect(r.d, n) + mat.k*random3D(seed));
                }
                
                // cast shadow
                
                vec3 lig = normalize(vec3(4,8,4));
                Ray s = Ray(p + n*.0001, normalize(lig + .01*random3D(seed)));
                Material mm;
                if (intersect(s, n, mm) < MAX_DIST) {
                    col *= .1+mix(mat.col, vec3(.1,.2,.4), .5);
                }
            } else { // sky
                vec3 sky = mix(vec3(1), vec3(.5,.7,1), .5+.5*r.d.y);
                col *= sky;
            
                break;
            }
        }
        
        tot += col;
    }
    tot /= float(SAMPLES);
    
    // output
    
    outColor = vec4(tot,1.0);
}


// void main(void) {
// 	outColor = vec4(1, 0, 0, 1);
// }
]]>
</program>
</language>
</jittershader>
