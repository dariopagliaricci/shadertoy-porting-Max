<jittershader name="default">
	<description>Default Slab </description>
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iMouse" type="vec3" default="0 0 0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iMouse" program="fp" />
		<bind param="iChannel0" program="fp" />


		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform vec3 iMouse;
uniform sampler2D iChannel0;

// wireframe code from FabriceNeyret2: https://www.shadertoy.com/view/XfS3DK

#define A(v) mat2(cos((v*3.1416) + vec4(0, -1.5708, 1.5708, 0)))          // rotate
#define s(a, b) c = max(c, .006/abs(L( u, K(a, v, h), K(b, v, h) )+.02)); // segment

// line
float L(vec2 p, vec3 A, vec3 B)
{
    vec2 a = A.xy, 
         b = B.xy - a;
         p -= a;
    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);
    return length(p - b*h) + .01*mix(A.z, B.z, h);
}

// cam
vec3 K(vec3 p, mat2 v, mat2 h)
{
    p.zy *= v; // pitch
    p.zx *= h; // yaw
    if (texelFetch(iChannel0, ivec2(80, 2), 0).x < 1.) // P key
        p *= 4. / (p.z+4.); // perspective view
    return p;
}

void main()
{
    vec2 U = jit_in.uv * viewPort.xy;
    vec2 R = viewPort.xy,
         u = (U+U-R)/R.y*2.5,
         m = (iMouse.xy*2.-R)/R.y;
    
    float t = iTime/60.,
          a = 1.618; // use -.618 for icosa
    
    if (iMouse.z < 1.) // not clicking
        m = vec2(sin(t*6.2832)*2., sin(t*6.2832*2.)); // fig-8 movement
    
    mat2 v = A(m.y), // pitch
         h = A(m.x); // yaw
    
    vec3 c = vec3(0);
    
    // stellated dodeca
    s( vec3(-1,  a,  0), vec3( 0, -1, -a) )
    s( vec3(-1,  a,  0), vec3( 0, -1,  a) )
    s( vec3(-1,  a,  0), vec3( a,  0, -1) )
    s( vec3(-1,  a,  0), vec3( a,  0,  1) )
    s( vec3( 1,  a,  0), vec3( 1, -a,  0) )
    s( vec3( 1,  a,  0), vec3( 0, -1, -a) )
    s( vec3( 1,  a,  0), vec3( 0, -1,  a) )
    s( vec3( 1,  a,  0), vec3(-a,  0, -1) )
    s( vec3( 1,  a,  0), vec3(-a,  0,  1) )
    s( vec3(-1, -a,  0), vec3(-1,  a,  0) )
    s( vec3(-1, -a,  0), vec3( 0,  1, -a) )
    s( vec3(-1, -a,  0), vec3( 0,  1,  a) )
    s( vec3(-1, -a,  0), vec3( a,  0, -1) )
    s( vec3(-1, -a,  0), vec3( a,  0,  1) )
    s( vec3( 1, -a,  0), vec3( 0,  1, -a) )
    s( vec3( 1, -a,  0), vec3( 0,  1,  a) )
    s( vec3( 1, -a,  0), vec3(-a,  0, -1) )
    s( vec3( 1, -a,  0), vec3(-a,  0,  1) )
    s( vec3( 0,  1, -a), vec3( 0,  1,  a) )
    s( vec3( 0,  1, -a), vec3( a,  0,  1) )
    s( vec3( 0,  1, -a), vec3(-a,  0,  1) )
    s( vec3( 0, -1, -a), vec3( 0, -1,  a) )
    s( vec3( 0, -1, -a), vec3( a,  0,  1) )
    s( vec3( 0, -1, -a), vec3(-a,  0,  1) )
    s( vec3(-a,  0, -1), vec3( a,  0, -1) )
    s( vec3(-a,  0,  1), vec3( a,  0,  1) )
    s( vec3(-a,  0, -1), vec3( 0,  1,  a) )
    s( vec3(-a,  0, -1), vec3( 0, -1,  a) )
    s( vec3( a,  0, -1), vec3( 0,  1,  a) )
    s( vec3( a,  0, -1), vec3( 0, -1,  a) )
    
    outColor = vec4(min(vec3(1), c), 1);
}
]]>
</program>
</language>
</jittershader>
