<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />

	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iChannel0" type="int" default="0" />
	<param name="iMouse" type="vec3" default="0 0 0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />

		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iChannel0" program="fp" />
		<bind param="iMouse" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(pos, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform sampler2D iChannel0;
uniform vec3 iMouse;


#define SAMPLES 64 // renders per frame

// ray indices
#define RED 0
#define GREEN 1
#define BLUE 2

float seed; // randoms seed

// hash functions by me
float hash1() {return fract(sin(seed+=.1)*4561.7564);}

vec2 hash2() {return fract(sin(seed+=.1)*vec2(8472.5636,9854.4213));}

vec3 hash3() {return fract(sin(seed+=.1)*vec3(7653.1285,6912.8512,5914.7134));}

// random normalized vector
vec3 uniformVector() {
    vec3 v = hash3()*2.-1.;
    return normalize(v);
}

// generate a value that depend on the ray index
float rayValues(int n, vec3 v) {
    return n==RED ? v.x : n==GREEN ? v.y : v.z;
}

// sphere intersection function
// thanks to iq: https://iquilezles.org/articles/intersectors/
float sphIntersect(vec3 ro, vec3 rd, vec3 ce, float ra, vec3 mat, int type,
                   float tmax, inout vec3 outn, inout vec3 outmat, inout int outtype) {
    vec3 oc = ro - ce;
    float b = dot(oc, rd);
    float c = dot(oc, oc) - ra*ra;
    float h = b*b - c;
    if (h<0.) return tmax;
    
    h = sqrt(h);
    float t1 = -b - h;
    float t2 = -b + h;
    float t = t1<.0001 ? t2 : t1;
    if (t>.0001 && t<tmax) {
        outn = (oc + rd*t)/ra;
        outmat = mat;
        outtype = type;
        return t;
    }
    return tmax;
}

// box intersection function
// thanks to iq: https://iquilezles.org/articles/intersectors/
float boxIntersect(vec3 ro, vec3 rd, vec3 ce, vec3 ra, vec3 mat, int type,
                   float tmax, inout vec3 outn, inout vec3 outmat, inout int outtype) {
    vec3 oc = ro - ce;

    vec3 m = 1./rd;
    vec3 n = -m*oc;
    vec3 k = abs(m)*ra;
	
    vec3 t1 = n - k;
    vec3 t2 = n + k;

	float tN = max(max(t1.x, t1.y), t1.z);
	float tF = min(min(t2.x, t2.y), t2.z);
	
	if(tN>tF || tF<0.) return tmax;
    
    float t = tN<.0001 ? tF : tN;
    if (t>.0001 && t<tmax) {
		outn = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);
        outmat = mat;
        outtype = type;
	    return t;
    }
    return tmax;
}

// materials indices
#define LAMBERTIAN 0 // diffuse
#define DIELECTRIC 1 // transparent
#define EMISSIVE 2 // light

// n is the normal
// mat is the color of the object
// type is the type of material: lambertian, dielectric or emissive

float intersect(vec3 ro, vec3 rd, int ray, out vec3 n, out vec3 mat, out int type) {
    float t = 1e10;

    // inside: atmospheric volume
    t = sphIntersect(ro, rd, vec3(0,0,.1), .8-.1*hash1()*rayValues(ray, vec3(3,1,1)), vec3(1), LAMBERTIAN, t, n, mat, type);
    // outside: transparent sphere
    t = sphIntersect(ro, rd, vec3(0,0,.1), .8, vec3(1,.85,.7), DIELECTRIC, t, n, mat, type);
    
    // inside: atmospheric volume
    t = sphIntersect(ro, rd, vec3(0,0,-1.3), .5-.1*hash1()*rayValues(ray, vec3(2,1,1)), vec3(1), LAMBERTIAN, t, n, mat, type);
    // outside: transparent sphere
    t = sphIntersect(ro, rd, vec3(0,0,-1.3), .5, vec3(1,.85,.7), DIELECTRIC, t, n, mat, type);

    // floor
    t = boxIntersect(ro, rd, vec3(0,-.8,0), vec3(2,0,2), vec3(.3,.4,.5), LAMBERTIAN, t, n, mat, type);
    
    // light
    t = sphIntersect(ro, rd, vec3(0,1,-1.3), .3, vec3(16), EMISSIVE, t, n, mat, type);
    
    return t;
}

// diffuse BRDF
vec3 cosineDirection(vec3 n) {
  	vec2 r = hash2();
    
	vec3 u = normalize(cross(n, vec3(0,1,1)));
	vec3 v = cross(u, n);
	
	float ra = sqrt(r.y);
	float rx = ra*cos(2.*3.141592*r.x); 
	float ry = ra*sin(2.*3.141592*r.x);
	float rz = sqrt(1.-r.y);
	return normalize(rx*u + ry*v + rz*n);
}

// rendering function
vec3 render(vec3 ro, vec3 rd, int ray) {
    vec3 col = vec3(1);
    
    for (int i=0; i<24; i++) { // 24 ray bounces
        vec3 n, mat; int type;
        float t = intersect(ro, rd, ray, n, mat, type);
        if (t>=1e10) {
            if (i==0) return vec3(.5+.5*rd.y)*.01; // background
            return vec3(0);
        } else {
            vec3 p = ro + rd*t;
            ro = p;
            
            col *= mat; // multiply the color by the material albedo
            
            if (type==LAMBERTIAN) { // diffuse object
                rd = cosineDirection(n);
            } else if (type==DIELECTRIC) { // transparent object
                float fre = dot(rd, n); // fresnel
                float s = sign(fre);
                vec3 m = -n*s;// normal inside and outside
                float ior = 1.3; // refraction index
                float v = (.5-.5*s)/ior+ior*(.5+.5*s);
                // refracted ray + a bit of randomness for a better effect
                rd = normalize(refract(rd, m, v) + .5*uniformVector());
            } else if (type==EMISSIVE) {
                return col;
            }
        }
    }
    return vec3(0); // return black
}

// camera function
mat3 setCamera(vec3 ro, vec3 ta) {
	vec3 w = normalize(ta - ro);
	vec3 u = normalize(cross(w, vec3(0,1,0)));
	vec3 v = cross(u, w);
    return mat3(u, v, w);
}

void main()
{
    
	vec2 fragCoord = jit_in.uv * viewPort.xy;

    vec3 tot = vec3(0);
    for (int i=0; i<SAMPLES; i++) {
    seed = float(i)+iTime+dot(sin(fragCoord),vec2(443.712,983.234));
        
    vec2 of = hash2()-.2;
    vec2 p = (fragCoord+of - .5*viewPort.xy) / viewPort.y;
    vec2 m = (iMouse.xy - .5*viewPort.xy) / viewPort.y;
    
    float an = m.x*3.141592-1.8; // camera rotation
    vec3 ro = vec3(-4.*sin(an), m.y*3.+1., -4.*cos(an)); // ray origin
    vec3 ta = vec3(0); // target
    mat3 ca = setCamera(ro, ta); // camera matrix
    vec3 rd = ca * normalize(vec3(p,1.5)); // ray direction

    // 3 renders: red, green and blue
    vec3 col = vec3(render(ro, rd, RED).r,
                    render(ro, rd, GREEN).g,
                    render(ro, rd, BLUE).b);
    tot += col;
    }
    tot /= float(SAMPLES);
    
    // accumulate
    // vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);
    // if (iMouse.z>0.) data*=0.;
    // data += vec4(tot,1);

    // output
    // outColor = data;
    outColor = vec4(tot, 1);
}
]]>
</program>
</language>
</jittershader>
