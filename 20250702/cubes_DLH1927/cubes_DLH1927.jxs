<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
    vec2 uv;
} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;

// ----- All state must be local! -----

float triangle(vec2 z, vec2 c, float a)
{
    float d1 = z.y-c.y+0.5*a/sqrt(3.0);
    float d2 = (z.y-c.y)+(z.x-c.x)*sqrt(3.0)-a/sqrt(3.0);
    d2 *= -0.5*sqrt(3.0);
    float d3 = (z.y-c.y)-(z.x-c.x)*sqrt(3.0)-a/sqrt(3.0);
    d3 *= -0.5*sqrt(3.0);
    return min(min(d1, d2), d3);
}

float cube(vec2 z, float a, float s)
{
    float d = 0.0;
    d += step(abs(z.x), s)*step(-a*sqrt(3.0)/6.0, z.y)*step(z.y, 0.0);
    d += step(abs(z.x), s)*step(a*sqrt(3.0)/6.0, z.y)*step(z.y, a*sqrt(3.0)/3.0);
    d += step(abs(z.x-a/4.0), s)*step(-a*sqrt(3.0)/12.0, z.y)*step(z.y, a*sqrt(3.0)/12.0);
    d += step(abs(z.x+a/4.0), s)*step(-a*sqrt(3.0)/12.0, z.y)*step(z.y, a*sqrt(3.0)/12.0);
    d += step(abs(z.y*sqrt(3.0)+z.x)/2.0, s)*step(0.0, z.y)*step(z.y, a*sqrt(3.0)/12.0);
    d += step(abs(z.y*sqrt(3.0)+z.x)/2.0, s)*step(-a*sqrt(3.0)/6.0, z.y)*step(z.y, -a*sqrt(3.0)/12.0);
    d += step(abs(z.y*sqrt(3.0)+z.x+a/2.0)/2.0, s)*step(-a*sqrt(3.0)/6.0, z.y)*step(z.y, -a*sqrt(3.0)/12.0);
    d += step(abs(z.y*sqrt(3.0)+z.x-a/2.0)/2.0, s)*step(a*sqrt(3.0)/12.0, z.y)*step(z.y, a*sqrt(3.0)/6.0);
    d += step(abs(z.y*sqrt(3.0)-z.x)/2.0, s)*step(0.0, z.y)*step(z.y, a*sqrt(3.0)/12.0);
    d += step(abs(z.y*sqrt(3.0)-z.x)/2.0, s)*step(-a*sqrt(3.0)/6.0, z.y)*step(z.y, -a*sqrt(3.0)/12.0);
    d += step(abs(z.y*sqrt(3.0)-z.x+a/2.0)/2.0, s)*step(-a*sqrt(3.0)/6.0, z.y)*step(z.y, -a*sqrt(3.0)/12.0);
    d += step(abs(z.y*sqrt(3.0)-z.x-a/2.0)/2.0, s)*step(a*sqrt(3.0)/12.0, z.y)*step(z.y, a*sqrt(3.0)/6.0);
    return d;
}

// Map now returns vec3: xy is mapped z, z is scale
vec3 map(vec2 z, int n, float a)
{
    float scale = 1.0;
    for (int i = 0; i < n; i++)
    {
        vec2 w = z;
        vec2 t1 = vec2(a/4.0, -a*sqrt(3.0)/12.0);
        vec2 t2 = vec2(-a/4.0, -a*sqrt(3.0)/12.0);
        vec2 t3 = vec2(0.0, a*sqrt(3.0)/6.0);
        if(triangle(w, t1, a/2.0) > 0.0)  {w -= t1; w *= 2.0; scale *= 2.0;}
        else if(triangle(w, t2, a/2.0) > 0.0)  {w -= t2; w *= 2.0; scale *= 2.0;}
        else if(triangle(w, t3, a/2.0) > 0.0)  {w -= t3; w *= 2.0; scale *= 2.0;}
        z = w;
    }
    return vec3(z, scale);
}

void main()
{
    // Calculate pixel coords in scene space
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    vec2 z = fragCoord/viewPort.y-vec2(0.5*viewPort.x/viewPort.y, 0.35);

    float a = 1.0;
    int iter = int(mod(floor(iTime), 7.0)); // safe modulo

    vec3 mapped = map(z, iter, a);
    float scale = mapped.z;
    vec2 mapped_z = mapped.xy;

    vec3 bg = (sin(vec3(0.7, 0.8, 0.9)*iTime)*0.2+0.8)
        * (step(abs(z.x), 0.002)*step(0.0, z.y)
        + step(abs(z.y*sqrt(3.0)+z.x)/2.0, 0.002)*step(0.0, z.x)
        + step(abs(z.y*sqrt(3.0)-z.x)/2.0, 0.002)*step(z.x, 0.0)
        + 0.2);

    vec3 color = (sin(vec3(0.7, 0.8, 0.9)*iTime)*0.2+0.8)
        * (cube(mapped_z, a, 0.002*scale) + 0.2);

    color = mix(bg, color, 1.0 - step(triangle(z, vec2(0.0), a), 0.0));

    outColor = vec4(color, 1.0);
}
]]>
</program>
</language>
</jittershader>
