<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />


		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;


vec3 diamond(vec2 center, float size, vec2 fragCoord)
{
    vec2 offs = (fragCoord.xy - center) / size;
    vec2 dist = abs(offs);
    float R = -0.5 * offs.x - 0.866 * offs.y + 0.3;
    float G = -0.5 * offs.x + 0.866 * offs.y + 0.3;
    float B =  0.9 * offs.x + 0.6 * offs.y + 0.7;
    return vec3(R, G, B) * (1.0 - smoothstep(0.45, 0.5, dist.x + dist.y));
}

void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    vec3 bgColor = vec3(0.2, 0.1, 0.6);
    
    vec3 c = vec3(0.0);
    for (float i = 0.0; i < 16.0; i += 1.0) {
        float size = viewPort.y / (5.4 + 2.0 * cos(i*23.3));
        float x = viewPort.x * 0.06 * (i + 1.02 * cos(i*24.3));
        float y = viewPort.y * (0.3 + 0.1 * sin(i*2.2) + 0.0002 * iTime * size);
        c += diamond(vec2(x, y), size, fragCoord.xy);    
    }
        
    outColor.rgb = bgColor + c;
}
]]>
</program>
</language>
</jittershader>
