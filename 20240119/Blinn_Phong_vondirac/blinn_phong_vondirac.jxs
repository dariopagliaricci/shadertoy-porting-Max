<jittershader name="default">
	<description>Default Slab </description>
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />

	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = MVP*vec4(pos, 1.);
				jit_out.uv = uv;
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;


#define PI 3.1415926535897932384626433832795
#define t iTime * 0.5

vec3 shade(float r, vec2 center, vec2 pos, vec3 l[2])
{
    float z = sqrt(r * r - pos.x * pos.x - pos.y * pos.y);
    vec3 n = normalize(vec3(pos.x, pos.y, z)); 		// Surface normal

    vec3 c_diff = vec3(0.9, 0.0, 0.7);				// Diffuse color    
    vec3 c_spec = vec3(0.0, 1.0, 1.0);				// Specular color

    float m = 11.0; 								// Surface Smoothness
    float El = 0.9; 								// Irradiance of light source
    vec3 Kd = c_diff.xyz / PI; 						// Diffuse term
    vec3 Ks = c_spec.xyz * ((m + 8.0) / (8.0 * PI));// Specular term

    vec3 Lo = vec3(0.0);
    for (int i = 0; i < 2; i++)
    {
        vec3 h = normalize(l[i] + n); // Half vector

        float cosTi = max(dot(n, l[i]), 0.0);
        float cosTh = max(dot(n, h), 0.0);
        Lo += (Kd.xyz + Ks.xyz * pow(cosTh, m)) * El * cosTi; // Outgoing radiance
    }  

    return Lo; 
    
}


void main()
{
	
	vec2 fragCoord = jit_in.uv * viewPort.xy;

	//	Sphere Definition
	vec2 center = viewPort.xy / 2.0;
	float r = viewPort.y / 3.0;
	vec2 pos = fragCoord.xy - center;

	//	Light vector
	vec3 l[2];
    l[0] = normalize(vec3(sin(t), sin(t), cos(t)));
    l[1] = normalize(vec3(-sin(t), cos(t), sin(t)));

    // Outgoing radiance
	vec3 Lo = shade(r, center, pos, l);

	outColor = vec4(Lo, 1.0);
}

]]>
</program>
</language>
</jittershader>
