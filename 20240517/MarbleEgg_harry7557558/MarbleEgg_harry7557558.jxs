<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT"/>
	<param name="iTime" type="float" default="0.0" />
	<param name="iFrame" type="int" default="0" />
	<param name="iMouse" type="vec3" default="0 0 0" />
	<param name="iChannel0" type="int" default="0" />
    <param name="iChannel1" type="int" default="1" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iMouse" program="fp" />
		<bind param="iChannel0" program="fp" />
        <bind param="iChannel1" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;
			out jit_PerVertex {
				vec2 uv;
			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;
			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform int iFrame;
uniform vec3 iMouse;
uniform samplerCube iChannel0;
uniform samplerCube iChannel1;
			
	
	
// Fork of "isp-glassball-11-mix" by harry7557558. https://shadertoy.com/view/NscXRj
// 2022-07-18 00:12:26


#define PI 3.1415926
#define ZERO min(iTime, 0.)


// random number generator
uint rand_seed = 0u;
uint randu() { return rand_seed = rand_seed * 1664525u + 1013904223u; }
float randf() { return float(randu()) * (1./4294967296.); }


// intersection function
bool intersectEllipsoid(vec3 r, vec3 ro, vec3 rd, inout float t, inout vec3 n) {
    float a = dot(rd/r,rd/r);
    float b = -dot(rd/r,ro/r);
    float c = dot(ro/r,ro/r)-1.0;
    float delta = b*b-a*c;
    if (delta < 0.0) return false;
    delta = sqrt(delta);
    float t1 = (b-delta)/a, t2 = (b+delta)/a;
    if (t1>t2) { float t=t1; t1=t2; t2=t;}
    if (t1>t || t2<0.) return false;
    t = t1>0. ? t1 : t2;
    n = normalize((ro+rd*t)/(r*r));
    return true;
}


// scattering / importance sampling functions

// Lambert
vec3 sampleCosWeighted(vec3 n) {
    vec3 u = normalize(cross(n, vec3(1.2345, 2.3456, -3.4561)));
    vec3 v = cross(u, n);
    float rn = randf();
    float an = 2.0*PI*randf();
    vec2 rh = sqrt(rn) * vec2(cos(an), sin(an));
    float rz = sqrt(1. - rn);
    return rh.x * u + rh.y * v + rz * n;
}

// refractive
vec3 sampleFresnelDielectric(vec3 rd, vec3 n, float n1, float n2) {
    float eta = n1 / n2;
    float ci = -dot(n, rd);
    if (ci < 0.0) ci = -ci, n = -n;
    float ct = 1.0 - eta * eta * (1.0 - ci * ci);
    if (ct < 0.0) return rd + 2.0*ci*n;
    ct = sqrt(ct);
    float Rs = (n1 * ci - n2 * ct) / (n1 * ci + n2 * ct);
    float Rp = (n1 * ct - n2 * ci) / (n1 * ct + n2 * ci);
    float R = 0.5 * (Rs * Rs + Rp * Rp);
    return randf() > R ?
        rd * eta + n * (eta * ci - ct)  // refraction
        : rd + 2.0*ci*n;  // reflection
}

// phase functions
vec3 sampleUniformSphere() {
    float u = 2.0*PI*randf();
    float v = 2.0*randf()-1.0;
    return vec3(vec2(cos(u), sin(u))*sqrt(1.0-v*v), v);
}
vec3 sampleHenyeyGreenstein(vec3 wi, float g) {
    if (g == 0.0) return sampleUniformSphere();
    if (g >= 1.0) return wi;
    if (g <= -1.0) return -wi;
    float us = randf();
    float vs = 2.0*PI*randf();
    float z = (1.0+g*g-pow((1.0-g*g)/(2.0*g*(us+(1.0-g)/(2.0*g))),2.0))/(2.0*g);
    vec2 xy = vec2(cos(vs), sin(vs)) * sqrt(1.0-z*z);
    vec3 u = normalize(cross(wi, vec3(1.2345, 2.3456, -3.4561)));
    vec3 v = cross(u, wi);
    vec3 wo = normalize(xy.x*u + xy.y*v + z*wi);
    return wo;
}


// Cook-Torrance BRDF - https://www.shadertoy.com/view/sddXWj

float sampleGgxImportance(in vec3 wi, in float alpha, out vec3 wo) {
    float su = 2.0*PI*randf();
    float sv = randf();
    //sv = acos(sqrt((1.0-sv)/((alpha*alpha-1.)*sv+1.)));
    sv = atan(alpha*sqrt(sv/(1.0-sv)));
    vec3 h = vec3(sin(sv)*vec2(cos(su),sin(su)), cos(sv));
    wo = -(wi-2.0*dot(wi,h)*h);
    return wo.z<0. ? 0. : 4.0*dot(wi, h);
}

vec3 sampleCookTorrance(
    vec3 wi, vec3 n,
    float alpha,  // roughness
    float f0,  // ratio of reflection along the normal
    float lambertian,  // ratio of lambertian coefficient
    vec3 albedo,
    inout vec3 m_col
    ) {

    if (randf() < lambertian) {
        vec3 wo = sampleCosWeighted(n);
        m_col *= albedo;
        return wo;
    }

    vec3 u = normalize(cross(n, vec3(1.2345, 2.3456, -3.4561)));
    vec3 v = cross(u, n);
    wi = vec3(dot(wi, u), dot(wi, v), dot(wi, n));
    vec3 wo, m;  // out and half vector

    // GGX divided by PDF
    float D = sampleGgxImportance(wi, alpha, wo);
    m = normalize(wi+wo);

    // Geometry
    float tan2_theta_i = (1.0-wi.z*wi.z)/(wi.z*wi.z);
    float tan2_theta_o = (1.0-wo.z*wo.z)/(wo.z*wo.z);
    float lambda_i = 0.5*(sqrt(1.0+alpha*alpha*tan2_theta_i)-1.0);
    float lambda_o = 0.5*(sqrt(1.0+alpha*alpha*tan2_theta_o)-1.0);
    float G = 1.0/(1.0+lambda_i+lambda_o);

    // Fresnel
    float F = f0 + (1.0-f0)*pow(1.0-dot(wi, m), 5.0);

    // Put all together
    float Fr = D*G*F / (4.0*wi.z*wo.z+1e-4);
    float Fr_cos = Fr * wo.z;  // wo is the direction of light in path tracing
    m_col *= Fr_cos * albedo;
    return wo.x * u + wo.y * v + wo.z * n;
}


// define materials
const int mat_none = -1;
const int mat_background = 0;
const int mat_ground = 1;
const int mat_refractive = 2;


// subsurface scattering - https://shadertoy.com/view/NscXRj

vec4 mapMarbleTexture(vec3 p) {
    p -= vec3(0, 0, 1);
    for (float i=-2.; i<=6.; i++) {
        if (i==1.||i==2.) continue;
        float k = exp2(i);
        p += 0.5*cos(k*p.zxy-i)/k;
    }
    float k = 1.0-0.9*pow(0.5+0.5*sin(2.*dot(p,vec3(10,10,8))),40.0);
    return vec4(k,k,k,1);
}
void calcAbsorb(in vec3 p, out vec3 emi, out vec3 tabs, out vec3 sabs, out float k, out float g) {
    // green-blue emission
    emi = 0.15*mix(vec3(0.0,1.0,0.2), vec3(0.0,0.2,1.0), 1.0/(1.0+exp(-p.y)));
    // volume absorption, zero
    tabs = vec3(0.0);
    // scattering absorption, black/white
    sabs = mapMarbleTexture(p).xyz;
    // scattering opacity
    k = 40.0;
    // backward scattering 0.5
    g = -0.5;
}

void calcScatter(in vec3 ro, inout vec3 rd,
        inout float mt, inout vec3 m_col, out vec3 m_emi, out int material, inout vec3 min_n) {
    float p = 1.0, hit_p = randf();
    float dt = 0.01;
    m_emi = vec3(0.0);
    for (float t = 1e-4; t < mt-dt; t += dt) {
        vec3 emi, tabs, sabs; float k, g;
        calcAbsorb(ro + rd * (t+0.5*dt), emi, tabs, sabs, k, g);
        float dp = exp(-k*dt);
        if (p * dp < hit_p) {
            dt *= log(p/hit_p)/k;
            mt = t + dt;
            rd = sampleHenyeyGreenstein(rd, g);
            m_col *= sabs * exp(-tabs*dt);
            material = mat_none;
            min_n = vec3(0.0);
            return;
        }
        p *= dp;
        m_col *= exp(-tabs*dt);
        m_emi += m_col * emi * dt;
    }
    material = mat_refractive;
}


// path tracing

vec3 mainRender(vec3 ro, vec3 rd) {

    vec3 m_col = vec3(1.0), t_col = vec3(0.0), col;
    bool is_inside = false;

    for (int iter = int(ZERO); iter < 128; iter++) {
        ro += 1e-4f*rd;

        vec3 n, min_n;
        float t, min_t = 1e12;
        vec3 min_ro = ro, min_rd = rd;
        vec3 min_emi = vec3(0.0);
        int material = mat_background;

        // plane
        t = -ro.z / rd.z;
        if (t > 0.0) {
            min_t = t, min_n = vec3(0, 0, 1);
            min_ro = ro + rd * t, min_rd = rd;
            col = 0.5*vec3(0.9, 0.95, 0.98) / (0.1*dot(min_ro.xy,min_ro.xy)+1.0);
            material = mat_ground;
        }

        // marble
        t = min_t;
        if (intersectEllipsoid(vec3(0.8,1.1,0.8), ro-vec3(0,0,0.8), rd, t, n)) {
            min_t = t, min_n = n;
            if (is_inside) {
                col = vec3(1.0);
                min_rd = rd;
                calcScatter(ro, min_rd, min_t, col, min_emi, material, min_n);
                min_ro = ro + rd * min_t;
            }
            else {
                min_ro = ro + rd * t, min_rd = rd;
                col = vec3(1.0);
                material = mat_refractive;
            }
        }

        // update ray
        if (material == mat_background) {
            if (iter==0) return vec3(0.0);
            col = 2.0 * texture(iChannel1, rd.yzx).xyz;
            return m_col * col + t_col;
        }
        ro = min_ro, rd = min_rd;
        min_n = dot(rd, min_n) < 0. ? min_n : -min_n;  // ray hits into the surface
        if (material == mat_ground) {  // cook-torrance
            rd = sampleCookTorrance(-rd, min_n, 0.05, 0.8, 0.1, 2.0*col, col);
            t_col += m_col * vec3(0.2)*col*max(dot(rd,min_n),0.0);  // make it glow a little
        }
        else if (material == mat_refractive) {  // steel ball
            vec2 eta = is_inside ? vec2(1.5, 1.0) : vec2(1.0, 1.5);
            rd = sampleFresnelDielectric(rd, min_n, eta.x, eta.y);
        }
        m_col = m_col * col;
        t_col += min_emi;
        if (dot(rd, min_n) < 0.0) {
            is_inside = !is_inside;
        }
    }
    return m_col + t_col;
}


void main() {

    vec2 fragCoord = jit_in.uv * viewPort.xy;

    // set random seed
    vec3 p3 = fract(fragCoord.xyx*1.1031);
    p3 += dot(p3, p3.zxy + 31.32);
    float h = fract((p3.x + p3.y) * p3.z);
    rand_seed = uint(1048576.*h)+uint(iFrame);

    // camera
    float rx = iMouse.z==0.?0.25:1.8*(iMouse.y/viewPort.y)-0.1;
    float rz = iMouse.z==0.?0.5:-iMouse.x/viewPort.x*4.0*3.14;
    vec3 w = vec3(cos(rx)*vec2(cos(rz),sin(rz)), sin(rx));
    vec3 u = vec3(-sin(rz),cos(rz),0);
    vec3 v = cross(w,u);
    vec3 ro = 10.0*w + vec3(0, 0, 0.7);
    vec2 uv = 2.0*(fragCoord.xy+vec2(randf(),randf())-0.5)/viewPort.xy - vec2(1.0);
    vec3 rd = mat3(u,v,-w)*vec3(uv*viewPort.xy, 3.0*length(viewPort.xy));
    rd = normalize(rd);

    // accumulate pixel color
    vec3 col = mainRender(ro, rd);
    // vec4 rgbn = texelFetch(iChannel0, ivec2(fragCoord), 0);
    vec4 rgbn = texture(iChannel0, vec3(fragCoord, 0.0));
    if (iMouse.z>0.) rgbn.w = 0.0;
    outColor = vec4((rgbn.xyz*rgbn.w + col)/(rgbn.w+1.0), rgbn.w+1.0);
}

]]>
</program>
</language>
</jittershader>
