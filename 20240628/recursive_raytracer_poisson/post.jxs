<jittershader name="default">
	<description>Default Slab </description>
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iChannel0" type="int" default="0" />


	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iChannel0" program="fp" />


		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform sampler2D iChannel0;

// depth of field function, thanks to iq
vec4 dof(sampler2D sam, vec2 p) {
    const float focus = 3.5;
    vec4 col = vec4(0);
    
    for(int i=-5; i<=5; i++) {
    for(int j=-5; j<=5; j++) {
        vec2 of = vec2(i,j);
        vec4 tmp = texture(iChannel0, p+of*.002); 
        float depth = tmp.w;
        vec3 color = tmp.xyz;
        float coc = 8.*abs(depth-focus)/depth;
        if(dot(of,of) < coc*coc) {
            float w = 1./(coc*coc); 
            col += vec4(color*w,w);
        }
    }
    }
    return col/col.a;
}

void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    vec2 p = fragCoord/viewPort.xy;
    
    vec3 col = dof(iChannel0, p).rgb;
    
    col = pow(col, vec3(.4545)); // gamma correction
    col = vec3(1)*dot(col,vec3(1))/3.; // rgb to greyscale
    col = col*2.-.5; // contrast
    col = clamp(col, 0., 1.);
    col = pow(col,vec3(.95,1.,.9)); // color curve
    
    col = clamp(col,0.,1.);
    // vignette
    col *= clamp(pow(64. * p.x*p.y*(1.-p.x)*(1.-p.y), .1), 0., 1.);    
    
    outColor = vec4(col,1.0);
}
]]>
</program>
</language>
</jittershader>
