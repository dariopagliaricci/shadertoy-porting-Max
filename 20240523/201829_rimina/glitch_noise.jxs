<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iChannel0" program="fp" />


		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform sampler2D iChannel0;
			
//The glitch method is modified from three.js post processing examples
//Original version by alteredq
//https://github.com/mrdoob/three.js/blob/dev/examples/js/postprocessing/GlitchPass.js

#define PI 3.14159265

//Hash method from https://www.shadertoy.com/view/4djSRW
//#define HASHSCALE1 443.8975
#define HASHSCALE1 .1031
float hash12(vec2 p){
	vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
}

float randf(){
    float time = iTime*0.1;
    return mod(4.0,sin(time*time)+1.0)*0.75;
}

void main(){

	vec2 fragCoord = jit_in.uv * viewPort.xy;
    vec2 uv = fragCoord.xy / viewPort.xy;

    int on = 1;//should we apply the glitch ?
    float amount = randf()*0.005;
    float angle = (PI*randf())/(2.0*PI)-PI;
    float seed = randf();
    float seed_x = 0.5*randf()-0.5;
    float seed_y = (0.3*randf()/0.6)-0.3;
    float distortion_x = randf()*viewPort.x;
    float distortion_y = randf()*viewPort.y;
    float col_s = 0.3;


    if(on != 0){

        vec2 p = uv;
        float xs = floor(fragCoord.x / 0.5);
        float ys = floor(fragCoord.y / 0.5);
        //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch
        vec4 normal = texture(iChannel0, p*seed*seed);
        if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {
            if(seed_x >0.0){
                p.y = 1. - (p.y + distortion_y);
            }
            else {
                p.y = distortion_y;
            }
        }
        if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {
            if(seed_y>0.){
                p.x=distortion_x;
            }
            else {
                p.x = 1. - (p.x + distortion_x);
            }
        }
        p.x+=normal.x*seed_x*(seed/5.);
        p.y+=normal.y*seed_y*(seed/5.);
        //base from RGB shift shader
        //vec2 offset = amount * vec2( cos(angle), sin(angle));
        //vec4 cr = texture(iChannel0, p + offset);
        //vec4 cga = texture(iChannel0, p);
        //vec4 cb = texture(iChannel0, p - offset);
        outColor = texture(iChannel0, p);//vec4(cr.r, cga.g, cb.b, cga.a);
        //add noise
        vec4 snow = 200.*amount*vec4(hash12(vec2(xs * seed,ys * seed*50.))*0.2);
        outColor = outColor+ snow;
    }
    else {
        outColor = texture(iChannel0, uv);
    }
    

     //Vigenting
    float vigentOffset = 0.005;
    float darkness = 0.8;
	float dist = distance(uv, vec2( 0.5 ));
	outColor.rgb *= smoothstep(0.8, vigentOffset * 0.799, dist *( darkness + vigentOffset ));
    
    outColor.rgb = pow(outColor.rgb, 1.0/vec3(2.2));
}

		]]>
		</program>
	</language>
</jittershader>
