<jittershader name="default">
	<description>Default Slab </description>
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iMouse" type="vec3" default="0.0 0.0 0.0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iMouse" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;
	
			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = MVP*vec4(pos, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform vec3 iMouse;

const int DEPTH = 15;
const int SAMPLE = 120; //higher sample number, better convergence (less noise)
const float epsilon = 1e-4;
const float PI = 3.1415926;

const vec3 init_camera_pos = vec3(0,0,4);
const vec3 init_camera_dir = vec3(0,0,-1);
const vec3 init_light_dir = vec3(6.);
const float screen_dist = 4.;

struct Hit {
  bool miss;
  vec3 p;
  vec3 normal;
  float dist;
  vec3 color;
  int type; // 0 as default, 1 as lambertian, 2 as reflective, 3 as refractive
};

struct Sphere {
  vec3 c;
  float r;
  vec3 color;
  int type;
};

const Hit miss = Hit(true, vec3(0.),vec3(0.), 1000., vec3(0.), 0);

vec2 rotate2d(vec2 st, vec2 o, float a) {
  float c = cos(a);
  float s = sin(a);
  mat2 t = mat2(c,-s,s,c);
  return t * (st - o) + o;
}

float fray_sphere_sect(vec3 ro, vec3 rd, Sphere sp) {
  vec3 oc = ro - sp.c;
  float a = dot(rd, rd);
  float b = 2.0 * dot(oc, rd);
  float c = dot(oc, oc) - sp.r * sp.r;
  float disc = b*b-4.*a*c;
  if (disc > 0.) {
    float t = (-b - sqrt(disc)) / (2. * a);
    if (t > 0.) {
      return t;
    } else {
      t = (-b + sqrt(disc)) / (2. * a);
      if (t > 0.) {
        return t;
      } else {
        return 10000.;
      }
    }
  } else {
    return 10000.;
  }
}

Hit ray_sphere_sect(vec3 ro, vec3 rd, Sphere sp) {
  float t = fray_sphere_sect(ro,rd,sp);
  if (t < 10000.) {
    vec3 hp = ro + t * rd;
    vec3 n = normalize(hp - sp.c);
    return Hit(false, hp, n, t, sp.color, sp.type);
  } else {
    return miss;
  }
}

Hit ray_sphere4_sect(vec3 ro, vec3 rd, Sphere sp1, Sphere sp2, Sphere sp3, Sphere sp4) {
  Hit result = miss;
  vec3 oc;
  int mini = -1;
  float mint = 10000.0;

  float t = fray_sphere_sect(ro,rd,sp1);
  if (t<mint) {
    mint=t;
    mini=0;
  }
  t = fray_sphere_sect(ro,rd,sp2);
  if (t<mint) {
    mint=t;
    mini=1;
  }
  t = fray_sphere_sect(ro,rd,sp3);
  if (t<mint) {
    mint=t;
    mini=2;
  }
  t = fray_sphere_sect(ro,rd,sp4);
  if (t<mint) {
    mint=t;
    mini=3;
  }
  if (mini==0){
    return ray_sphere_sect(ro,rd,sp1);
  } else if (mini==1) {
    return ray_sphere_sect(ro,rd,sp2);
  } else if (mini==2) {
    return ray_sphere_sect(ro,rd,sp3);
  } else if (mini==3) {
    return ray_sphere_sect(ro,rd,sp4);
  } else {
    return miss;
  }
}

float random1(float n){
  return fract(sin(n) * 43758.5453123);
}

vec3 random3(vec3 c) {
	float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
	vec3 r;
	r.z = fract(512.0*j);
	j *= .125;
	r.x = fract(512.0*j);
	j *= .125;
	r.y = fract(512.0*j);
	return r-0.5;
}

vec3 randomCosineWeightedHemispherePoint(vec3 rand, vec3 n) {
  float r = rand.x * 0.5 + 0.5; // [-1..1) -> [0..1)
  float angle = (rand.y + 1.0) * PI; // [-1..1] -> [0..2*PI)
  float sr = sqrt(r);
  vec2 p = vec2(sr * cos(angle), sr * sin(angle));
  /*
   * Unproject disk point up onto hemisphere:
   * 1.0 == sqrt(x*x + y*y + z*z) -> z = sqrt(1.0 - x*x - y*y)
   */
  vec3 ph = vec3(p.xy, sqrt(1.0 - p*p));
  /*
   * Compute some arbitrary tangent space for orienting
   * our hemisphere 'ph' around the normal. We use the camera's up vector
   * to have some fix reference vector over the whole screen.
   */
  vec3 tangent = normalize(rand);
  vec3 bitangent = cross(tangent, n);
  tangent = cross(bitangent, n);
  
  /* Make our hemisphere orient around the normal. */
  return tangent * ph.x + bitangent * ph.y + n * ph.z;
}

vec3 randomCustomWeightedHemispherePoint(vec3 rand, vec3 n) {
  float r = rand.x * 0.5 + 0.5; // [-1..1) -> [0..1)
  float angle = (rand.y + 1.0) * PI; // [-1..1] -> [0..2*PI)
  float sr = pow(r, 6.);
  vec2 p = vec2(sr * cos(angle), sr * sin(angle));
  /*
   * Unproject disk point up onto hemisphere:
   * 1.0 == sqrt(x*x + y*y + z*z) -> z = sqrt(1.0 - x*x - y*y)
   */
  vec3 ph = vec3(p.xy, sqrt(1.0 - p*p));
  /*
   * Compute some arbitrary tangent space for orienting
   * our hemisphere 'ph' around the normal. We use the camera's up vector
   * to have some fix reference vector over the whole screen.
   */
  vec3 tangent = normalize(rand);
  vec3 bitangent = cross(tangent, n);
  tangent = cross(bitangent, n);
  
  /* Make our hemisphere orient around the normal. */
  return tangent * ph.x + bitangent * ph.y + n * ph.z;
}

vec3 refr(vec3 ray, vec3 normal, float ri) {
  float dt = dot(ray, normal);
  float ni_over_nt;
  vec3 n;
  if (dt > 0.) {
    n = -normal;
    ni_over_nt = ri;
  } else {
    n = normal;
    ni_over_nt = 1./ri;
  }

  float discriminant = 1. - ni_over_nt*ni_over_nt*(1. - dt*dt);
  if (discriminant > 0.) {
    return ri*(ray - n*dt)-n*sqrt(discriminant);
  } else {
    return reflect(ray, normal);
  }
}

void ray_sphere4_sect_void(vec3 ro, vec3 rd, Sphere sp1, Sphere sp2, Sphere sp3, Sphere sp4, out vec3 color) {
  vec3 ocolor = vec3(1);
  Hit result;
  for (int i = 0; i < DEPTH; i++) {
    result = ray_sphere4_sect(ro, rd, sp1, sp2, sp3, sp4);
    if (!result.miss) {
      ro = result.p + 0.01 * result.normal;
      // lambertian
      if (result.type == 1) {
        rd = randomCosineWeightedHemispherePoint(random3(result.p), result.normal);
        ocolor *= result.color;
      // reflective
      } else if (result.type == 2) {
        rd = reflect(rd, result.normal);
        ocolor *= result.color;
      // refractive
      } else if (result.type == 3) {
        rd = randomCustomWeightedHemispherePoint(random3(result.p),refr(rd, result.normal, 1.2));
      }
    } else {
      break;
    }
  }

  color = ocolor;
}

void trace_void(vec3 ro, vec3 rd, out vec3 color) {
  Sphere sp1 = Sphere(vec3(0,0,0), 0.5, vec3(1.), 3);
  Sphere sp2 = Sphere(vec3(-0.55,0,-1), 0.5, vec3(0.5,0.5,1.), 1);
  Sphere sp3 = Sphere(vec3(0.55,0,-1), 0.5, vec3(0.5,1,0.5), 2);
  Sphere sp4 = Sphere(vec3(0,-1000.51,-1), 1000., vec3(1,0.5,0.5), 1);
  ray_sphere4_sect_void(ro, rd, sp1, sp2, sp3, sp4, color);
}

void main() {
  
  vec2 fragCoord = jit_in.uv * viewPort.xy;

  vec2 st = fragCoord.xy / viewPort.xy;
  st -= 0.5;
  st.x *= viewPort.x / viewPort.y;
  st.y = -st.y;

  st.x *= 1.5;
  st.y *= 1.5;

  vec3 disp = vec3(iMouse.xy / viewPort.xy, 0.);
  disp -= 0.5;
  vec3 camera_pos = init_camera_pos;
  vec3 camera_dir = init_camera_dir;
  camera_dir.xz = rotate2d(camera_dir.xz, init_camera_pos.xz, -disp.x);
  camera_dir.yz = rotate2d(camera_dir.yz, init_camera_pos.xz, -disp.y);

  vec3 screen_orig = vec3(0,0,0);
  camera_pos = screen_orig - screen_dist * camera_dir;

  vec3 v = normalize(camera_dir);
  vec3 up = vec3(0.,1.,0.);
  vec3 r = normalize(cross(v, up));
  vec3 u = normalize(cross(v, r));

  mat4 basis = mat4(
      r.x,r.y,r.z,0.,
      u.x,u.y,u.z,0.,
      v.x,v.y,v.z,0.,
      0.,0.,0.,1.
  );

  mat4 translate = mat4(
      1.,0.,0.,0.,
      0.,1.,0.,0.,
      0.,0.,1.,0.,
      screen_orig.x,screen_orig.y,screen_orig.z,1.
  );
  mat4 view = translate * basis;
  vec4 str = vec4(st, 0., 1.);
  str = view * str;

  vec3 result_color = vec3(0);

  
  for (int i = 0; i < SAMPLE; i++) {
    vec3 rd = normalize(str.xyz + 0.01 * random3(vec3(float(i))) - camera_pos);
    vec3 ro = camera_pos;
    vec3 color;

    trace_void(ro, rd, color);
	result_color += color;
  }
  result_color /= float(SAMPLE);
  
  outColor = vec4(result_color,1);
}
]]>
</program>
</language>
</jittershader>
