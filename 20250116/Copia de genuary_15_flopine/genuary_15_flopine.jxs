<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform sampler2D iChannel0;

// Code by Flopine

// Thanks to wsmind, leon, XT95, lsdlive, lamogui, 
// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter 
// BigWings, FabriceNeyret and Blackle for teaching me

// Thanks LJ for giving me the spark :3

// Thanks to the Cookie Collective, which build a cozy and safe environment for me 
// and other to sprout :)  
// https://twitter.com/CookieDemoparty

// Genuary #15: Design a rug


#define noi(p) textureLod(iChannel0, p, 0.).x
#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.02,fwidth(val-thre)))

#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))
#define PI acos(-1.)


// https://iquilezles.org/articles/distfunctions2d/
float sdVesica(vec2 p, float w, float h)
{
    float d = 0.5*(w*w-h*h)/h;
    p = abs(p);
    vec3 c = (w*p.y < d*(p.x-w)) ? vec3(0.0,w,0.0) : vec3(-d,0.0,d+h);
    return length(p-c.yx) - c.z;
}

float box2d (vec2 u, vec2 c)
{
    vec2 q = abs(u)-c;
    return min(0., max(q.x, q.y))+length(max(q, 0.));
}

vec4 griduv (vec2 u)
{
    vec2 ua = fract(u)-.5, ub = fract(u-.5)-.5, 
    guv = dot(ua,ua)<dot(ub,ub) ? ua:ub, gid = u-guv;
    return vec4(guv, gid);
}

float pattern1 (vec2 u)
{
    float s = (u.x < -u.y) ? 1. : -1.;
    u += 25*s;
    return AAstep(0.01, length(u)-.35);
}

float pattern2 (vec2 u)
{
    float per = 0.25;
    u.x = mod(u.x, per)-per*.5;
    return AAstep(0.01, abs(u.x)-.05);
}

float pattern3 (vec2 u)
{ return AAstep(0.01, sdVesica(u.yx, 0.35, 0.2)); }

float pattern4 (vec2 u)
{
    u *= rot(PI/4.);
    float d = AAstep(0.01, abs(box2d(u, vec2(0.3))));
    return d * AAstep(0.01, box2d(u, vec2(0.23)));
}

void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    vec2 uv = (fragCoord-viewPort.xy*.5)/viewPort.y;
    uv.y += iTime*.025; 
    vec2 uu = fragCoord/viewPort.xy;
    uu.y += iTime*.025;
    
    float weave =  smoothstep(.85,.99, texture(iChannel0, uu*viewPort.xy/100.).x);
    uv *= 2.;
    uv += (weave*2. - 1.)*0.005;
    
    vec4 grid = griduv(uv);   
    float n = noi(grid.zw*.24),
    d;
    
    if(n < 1./5.)
    {
        grid.xy *= (n < 0.9/5.) ? rot(PI) : rot(-PI/2.);
        d = pattern1(grid.xy);
    }
    else if (n >= 1./5. && n < 2./5.)
    {
        d = pattern2(grid.xy);
    }
    else if (n >= 2./5. && n < 3./5.)
    {
        grid.xy *= (n < 2.5/5.) ? rot(PI/4.) : rot(-PI/4.);
        d = pattern3(grid.xy);
    }
    else if (n >= 3./5. && n < 3.5/5.)
    {
        d = 0.;
    }
    else
    {
        d = pattern4(grid.xy); 
    }
       
    n = noi(grid.zw*.11);
    vec3 c;
    if (n < 1./4.) c = vec3(1., .7, 0.);
    else if (n >= 1./4. && n < 2./4.) c = vec3(1., 0., 0.);
    else if (n >= 2./4. && n < 3./4.) c = vec3(0., 0.1, .8); 
    else c = vec3(0.);
    
    float matter = smoothstep(.85,.99, texture(iChannel0, uu*viewPort.xy/500.).x);
    vec3 col = clamp(d + c, 0., 1.);
    col = mix(col, vec3(0.5), matter);
    col = mix(col, vec3(1.), matter);
    
    outColor = vec4(sqrt(col),1.0);
}
]]>
</program>
</language>
</jittershader>
