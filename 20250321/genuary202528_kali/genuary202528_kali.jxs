<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iFrame" type="int" default="0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;
uniform int iFrame;
uniform samplerCube iChannel0;

#define f mod(float(iFrame), 100.)

vec2 uv;
float det = .001;

mat2 rot(float a) {
    float s = sin(a), c = cos(a);
    return mat2(c, s, -s, c);
}

vec3 hash(vec2 p) {
    p *= 1000.;
    vec3 p3 = fract(p.xyx * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz + 33.33);
    return fract((p3.xxy + p3.yzz) * p3.zyx);
}

float ot;
float ot2;

float formula(vec2 p) {
    ot = ot2 = 1000.;
    float l = 0., expsmo = 0.;
    vec2 c = vec2(4., 5.);

    for (int i = 0; i < 10; i++) {
        p = abs(p + c) - abs(p - c) - p;
        p /= clamp(p.x * p.y, .3, 1.);
        p = p * -1.25 + c;
        l = length(p.y) + step(.3, fract(p.x * .3 + iTime * .1 + float(i) * .25));
        ot = min(ot, l);
        ot2 = min(ot2, abs(p.x) + step(.3, fract(p.y * .3 + iTime * .1 + float(i) * .25)));
    }
    return ot;
}

float pis;

float de(vec3 p) {
    p.xy *= rot(radians(45.));
    p.xy = mod(p.xy, 20.) - 10.;
    vec3 pr = p;
    pr.xy = abs(pr.xy) - 3.;
    float sph = max(-p.z - 3.5, length(pr.xy) - 1.5);
    pis = -p.z + 1.;
    formula(p.xy * .02);
    pis -= exp(-ot2) * .5;
    return min(pis, sph) * .3;
}

vec3 normal(vec3 p) {
    vec2 e = vec2(0., det);
    return normalize(vec3(
        de(p + e.yxx) - de(p),
        de(p + e.xyx) - de(p),
        de(p + e.xxy) - de(p)
    ));
}

vec3 pathtrace(vec3 from, vec3 dir, float pass) {
    vec3 p = from, col = vec3(0.);
    float d = 5., td = 0.;
    float at = 1.;
    float h = hash(uv + f * .15).x - .5;

    for (int b = 0; b < 5; b++) {
        for (int i = 0; i < 50; i++) {
            p += d * dir * (1. + h * .2);
            d = de(p);
            if (d < det || p.z < -15.) break;
        }

        if (d < det) {
            col += vec3(1., .2, .1) * step(ot, .15) *1.5* step(pis, det);
            col += vec3(.8, 1., .3) * step(ot2, .15) * .5 * step(pis, det);
            p -= det * 2.;
            vec3 n = normal(p);
            vec3 h = normalize(hash(uv + f * .1 + p.x + p.y + pass) - .3);
            h *= dot(h, n) > 0. ? 1. : -1.;
            if (step(.5, fract(p.z + 1.1)) > .5) dir = normalize(h + n * .5);
            else dir = mix(h, reflect(dir, n), .8);
            d = det;
        }

        at *= .8;
        if (p.z < -10.) break;
    }

    dir.yz *= rot(-.5);
    col += smoothstep(.3, 0., length(dir.xy)) * 7. * at * vec3(1., 0.7, 0.3);
    col.rg *= rot(uv.y * .2);
    return col * .5;
}

void main() {
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    uv = fragCoord / viewPort.xy;
    vec2 p = uv - .5;

    if (abs(p.y) > .35) {
        outColor = vec4(0.);
        return;
    }

    p += (hash(uv + f * .1).xy - .5) / viewPort.xy;
    p.x *= viewPort.x / viewPort.y;

    vec3 from = vec3(3., float(iFrame) * .01, -15.);
    vec3 dir = normalize(vec3(p, 3.));
    dir.yz *= rot(.8);

    vec3 col = vec3(0.);
    col += pathtrace(from, dir, .3);
    col += pathtrace(from, dir, .2);
    col += pathtrace(from, dir, .1);
    col /= 3.;

    vec3 direction = normalize(vec3(uv * 2.0 - 1.0, 1.0)); // Map 2D UV to 3D direction
	col = mix(col, texture(iChannel0, direction).rgb, .7);
    // col = mix(col, texture(iChannel0, uv).rgb, .7);
    outColor = vec4(col, 1.0);
}
]]>
</program>
</language>
</jittershader>
