<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
    <param name="sample" type="float" default="0.0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />

		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="viewPort" program="fp" />
		<bind param="eye" program="fp" />
        <bind param="sample" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;
			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(pos, 1.);
				jit_out.uv = uv;
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core
	
in jit_PerVertex {
	vec2 uv;
} jit_in;

layout (location = 0) out vec4 outColor;

// The minimunm distance a ray must travel before we consider an intersection.
// This is to prevent a ray from intersecting a surface it just bounced off of.
const float c_minimumRayHitTime = 0.1f;

// after a hit, it moves the ray this far along the normal away from a surface.
// Helps prevent incorrect intersections when rays bounce off of objects.
const float c_rayPosNormalNudge = 0.01f;
 
// the farthest we look for ray hits
const float c_superFar = 10000.0f;

// number of ray bounces allowed
const int c_numBounces = 8;

// how many renders per frame - to get around the vsync limitation.
const int c_numRendersPerFrame = 1;

const float c_pi = 3.14159265359f;
const float c_twopi = 2.0f * c_pi;

uniform vec2 viewPort;
uniform vec3 eye;
uniform float sample;


struct hitInfo{
	float dist;
	vec3 normal;
    vec3 albedo;
    vec3 emissive;
};

struct searchInfo {
    float rngState;
    // vec3 finalColor;
    // vec3 through;
};


// uint wang_hash(inout uint seed)
// {
//     seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
//     seed *= uint(9);
//     seed = seed ^ (seed >> 4);
//     seed *= uint(0x27d4eb2d);
//     seed = seed ^ (seed >> 15);
//     return seed;
// }

// float RandomFloat01(inout uint state)
// {
//     return float(wang_hash(state)) / 4294967296.0;
// }

// vec3 RandomUnitVector(inout uint state)
// {
//     float z = RandomFloat01(state) * 2.0f - 1.0f;
//     float a = RandomFloat01(state) * c_twopi;
//     float r = sqrt(1.0f - z * z);
//     float x = r * cos(a);
//     float y = r * sin(a);
//     return vec3(x, y, z);
// }

uint base_hash(uvec2 p) {
    p = 1103515245U*((p >> 1U)^(p.yx));
    uint h32 = 1103515245U*((p.x)^(p.y>>3U));
    return h32^(h32 >> 16);
}

float g_seed = 0.;

float hash1(inout searchInfo search) {
    uint n = base_hash(floatBitsToUint(vec2(search.rngState+=.1,search.rngState+=.1)));
    return float(n)/float(0xffffffffU);
}

vec2 hash2(inout searchInfo search) {
    uint n = base_hash(floatBitsToUint(vec2(search.rngState+=.1,search.rngState+=.1)));
    uvec2 rz = uvec2(n, n*48271U);
    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);
}

vec3 hash3(inout searchInfo search) {
    uint n = base_hash(floatBitsToUint(vec2(search.rngState+=.1,search.rngState+=.1)));
    uvec3 rz = uvec3(n, n*16807U, n*48271U);
    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);
}

vec3 random_in_unit_sphere(inout searchInfo search) {
    vec3 h = hash3(search) * vec3(2.,6.28318530718,1.)-vec3(1,0,0);
    float phi = h.y;
    float r = pow(h.z, 1./3.);
    return r * vec3(sqrt(1.-h.x*h.x)*vec2(sin(phi),cos(phi)),h.x);
}



float ScalarTriple(vec3 u, vec3 v, vec3 w)
{
    return dot(cross(u, v), w);
}

bool TestQuadTrace(in vec3 rayPos, in vec3 rayDir, inout hitInfo info, in vec3 a, in vec3 b, in vec3 c, in vec3 d)
{
    // calculate normal and flip vertices order if needed
    vec3 normal = normalize(cross(c-a, c-b));
    if (dot(normal, rayDir) > 0.0f)
    {
        normal *= -1.0f;
        
        vec3 temp = d;
        d = a;
        a = temp;
        
        temp = b;
        b = c;
        c = temp;
    }
    
    vec3 p = rayPos;
    vec3 q = rayPos + rayDir;
    vec3 pq = q - p;
    vec3 pa = a - p;
    vec3 pb = b - p;
    vec3 pc = c - p;
    
    // determine which triangle to test against by testing against diagonal first
    vec3 m = cross(pc, pq);
    float v = dot(pa, m);
    vec3 intersectPos;
    if (v >= 0.0f)
    {
        // test against triangle a,b,c
        float u = -dot(pb, m);
        if (u < 0.0f) return false;
        float w = ScalarTriple(pq, pb, pa);
        if (w < 0.0f) return false;
        float denom = 1.0f / (u+v+w);
        u*=denom;
        v*=denom;
        w*=denom;
        intersectPos = u*a+v*b+w*c;
    }
    else
    {
        vec3 pd = d - p;
        float u = dot(pd, m);
        if (u < 0.0f) return false;
        float w = ScalarTriple(pq, pa, pd);
        if (w < 0.0f) return false;
        v = -v;
        float denom = 1.0f / (u+v+w);
        u*=denom;
        v*=denom;
        w*=denom;
        intersectPos = u*a+v*d+w*c;
    }
    
    float dist;
    if (abs(rayDir.x) > 0.1f)
    {
        dist = (intersectPos.x - rayPos.x) / rayDir.x;
    }
    else if (abs(rayDir.y) > 0.1f)
    {
        dist = (intersectPos.y - rayPos.y) / rayDir.y;
    }
    else
    {
        dist = (intersectPos.z - rayPos.z) / rayDir.z;
    }
    
    if (dist > c_minimumRayHitTime && dist < info.dist)
    {
        info.dist = dist;        
        info.normal = normal;        
        return true;
    }    
    
    return false;
}

bool TestSphereTrace(in vec3 rayPos, in vec3 rayDir, inout hitInfo info, in vec4 sphere)
{
    //get the vector from the center of this sphere to where the ray begins.
    vec3 m = rayPos - sphere.xyz;

    //get the dot product of the above vector and the ray's vector
    float b = dot(m, rayDir);

    float c = dot(m, m) - sphere.w * sphere.w;

    //exit if r's origin outside s (c > 0) and r pointing away from s (b > 0)
    if(c > 0.0 && b > 0.0)
        return false;

    //calculate discriminant
    float discr = b * b - c;

    //a negative discriminant corresponds to ray missing sphere
    if(discr < 0.0)
        return false;
    
    //ray now found to intersect sphere, compute smallest t value of intersection
    bool fromInside = false;
    float dist = -b - sqrt(discr);
    if (dist < 0.0f)
    {
        fromInside = true;
        dist = -b + sqrt(discr);
    }
    
    if (dist > c_minimumRayHitTime && dist < info.dist)
    {
        info.dist = dist;        
        info.normal = normalize((rayPos+rayDir*dist) - sphere.xyz) * (fromInside ? -1.0f : 1.0f);
        return true;
    }
    
    return false;
}

void TestSceneTrace(in vec3 rayPos, in vec3 rayDir, inout hitInfo info)
{    
    {
        vec3 A = vec3(-15.0f, -15.0f, 22.0f);
        vec3 B = vec3( 15.0f, -15.0f, 22.0f);
        vec3 C = vec3( 15.0f,  15.0f, 22.0f);
        vec3 D = vec3(-15.0f,  15.0f, 22.0f);
        if (TestQuadTrace(rayPos, rayDir, info, A, B, C, D))
        {
            info.albedo = vec3(0.7f, 0.7f, 0.7f);
            info.emissive = vec3(0.0f, 0.0f, 0.0f);
        }
    }    
     
    if (TestSphereTrace(rayPos, rayDir, info, vec4(-10.0f, 0.0f, 20.0f, 1.0f)))
    {
        info.albedo = vec3(1.0f, 0.1f, 0.1f);
        info.emissive = vec3(0.0f, 0.0f, 0.0f);        
    } 
     
    if (TestSphereTrace(rayPos, rayDir, info, vec4(0.0f, 0.0f, 20.0f, 1.0f)))
    {
        info.albedo = vec3(0.1f, 1.0f, 0.1f);
        info.emissive = vec3(0.0f, 0.0f, 0.0f);        
    }    
     
    if (TestSphereTrace(rayPos, rayDir, info, vec4(10.0f, 0.0f, 20.0f, 1.0f)))
    {
        info.albedo = vec3(0.1f, 0.1f, 1.0f);
        info.emissive = vec3(0.0f, 0.0f, 0.0f);
    }           
     
     
    if (TestSphereTrace(rayPos, rayDir, info, vec4(10.0f, 10.0f, 20.0f, 5.0f)))
    {
        info.albedo = vec3(0.0f, 0.0f, 0.0f);
        info.emissive = vec3(1.0f, 0.9f, 0.7f) * 100.0f;
    }         
}
 
vec3 GetColorForRay(in vec3 startRayPos, in vec3 startRayDir, inout searchInfo search)
{
    // initialize
    vec3 ret = vec3(0.0f, 0.0f, 0.0f);
    vec3 throughput = vec3(1.0f, 1.0f, 1.0f);
    vec3 rayPos = startRayPos;
    vec3 rayDir = startRayDir;
     
    for (int bounceIndex = 0; bounceIndex <= c_numBounces; ++bounceIndex)
    {
        // shoot a ray out into the world
        hitInfo info;
        info.dist = c_superFar;
        TestSceneTrace(rayPos, rayDir, info);
         
        // if the ray missed, we are done
        if (info.dist == c_superFar)
            break;
         
        // update the ray position
        rayPos = (rayPos + rayDir * info.dist) + info.normal * c_rayPosNormalNudge;
         
        // calculate new ray direction, in a cosine weighted hemisphere oriented at normal
        rayDir = normalize(info.normal + random_in_unit_sphere(search));        
         
        // add in emissive lighting
        ret += info.emissive * throughput;
         
        // update the colorMultiplier
        throughput *= info.albedo;      
    }
  
    // return pixel color
    return ret;
}

void initializeRngState(out searchInfo search){
    search.rngState = float(base_hash(floatBitsToUint(jit_in.uv)))/float(0xffffffffU)+sample;
}


void main(void) {

    searchInfo search;

    vec2 screenPos = jit_in.uv*2-1;
    float aspectRatio = viewPort.x / viewPort.y;
    screenPos.x *= aspectRatio; //corrrect x axis -1.777 to 1,777

    initializeRngState(search);
    
    // The ray starts at the camera position (the origin)
    vec3 rayPosition = eye;
	
	vec3 pixPos = vec3(screenPos, 4);
	vec3 rayDir = normalize(pixPos - rayPosition);

	vec3 color = GetColorForRay(rayPosition, rayDir, search);

	outColor = vec4(color, 1);
}
]]>
</program>
</language>
</jittershader>
