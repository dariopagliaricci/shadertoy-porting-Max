<jittershader name="default">
	<description>Default Slab </description>
	
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />


	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />


	
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(pos, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform float iTime;

/*originals https://www.shadertoy.com/view/lslyRn# https://www.shadertoy.com/view/4tyfWy https://glslsandbox.com/e#102062.0*/
#define iterations 19
#define formuparam 0.53

#define volsteps 20
#define stepsize 0.1

#define zoom   0.800
#define tile   0.850
#define speed  0.000 

#define brightness 0.0015
#define darkmatter 0.300
#define distfading 0.730
#define saturation 0.850

   #define brightnessStar 0.0015
   #define volstepsBack 20
   #define volstepsFront 2


vec3 erot(vec3 p,vec3 ax,float t){
    return mix(dot(ax,p)*ax,p,cos(t))+cross(ax,p)*sin(t);
 }
float box3(vec3 p,vec3 b){
  vec3 q = abs(p)-b;
  return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));
}
vec2 sdf(vec3 p){

  vec2 h;
  h.x = 100.;
  vec4 pp = vec4(p,1.);
  pp*=.5;
  
  for(float i=0.;i<6.;i++){
    
      pp *=1.3;
       pp.xyz = erot(pp.xyz,normalize(vec3(sin(iTime*.1+i*pp.a),.1+cos(pp.a),.2)),i+iTime*.1);
     h.x = min((length(pp.xy)-.01)/pp.a,h.x);
    h.x = min((length(pp.xz)-.01)/pp.a,h.x);
    h.x = min((length(pp.yz)-.01)/pp.a,h.x);
      h.x = min(h.x,abs(box3(pp.xyz,vec3(1.75)/pp.a)/pp.a));
  }
  h.y = 1.;
  return h;
}
float hash31( vec3 p ) {
    float h = dot(p,vec3(17, 1527, 113));   
    return fract(sin(h)*43758.5453123);
}
#define q(s) s*sdf(p+s).x
void mainVR( out vec4 outColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )
{
    //get coords and direction
    vec3 dir=rd;
    vec3 from=ro;
    
    //volumetric rendering
    float s=0.1,fade=1.;
    vec3 v=vec3(0.);
    for (int r=0; r<volsteps; r++) {
        vec3 p=from+s*dir*.5;
        float a1= iTime*0.005;
        p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold
        float pa,a=pa=0.;
        for (int i=0; i<iterations; i++) { 
            p=abs(p)/dot(p,p)-formuparam; 
          p.xy*=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));// the magic formula
            a+=abs(length(p)-pa); // absolute sum of average change
            pa=length(p);
        }
        float dm=max(0.,darkmatter-a*a*.001); //dark matter
        a*=a*a; // add contrast
        if (r>6) fade*=1.3-dm; // dark matter, don't render near
        //v+=vec3(dm,dm*.5,0.);
        v+=fade;
        v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance
        fade*=distfading; // distance fading
        s+=stepsize;
    }
    v=mix(vec3(length(v)),v,saturation); //color adjust
    outColor = vec4(v*.03,1.); 
}
float happy_rich_healthy_star(vec2 uv, float anim)
{
    uv = abs(uv);
    vec2 pos = min(uv.xy/uv.yx, anim);
    float p = (2.0 - pos.x - pos.y);
    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      
}
 
void main()
{
    
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    //get coords and direction
    vec2 uv=fragCoord.xy/viewPort.xy-.5;
    uv.y*=viewPort.y/viewPort.x;
    vec3 dir=vec3(uv*zoom,1.);
    float time=iTime*speed+.25;

    
    vec3 rd = dir;
    vec2 uv2 = (fragCoord-.5*viewPort.xy)/viewPort.y;
uv2*=1.5;
    
  vec3 ro2 = vec3(0.,0.,-7.);
  
  vec3 rt = vec3(0,0.,0);
 
  
  vec3 rd2 = normalize(vec3(uv2,1.-.8*sqrt(length(uv2))));
  vec3 rp = ro2;
  
  float dd = 0.;
  vec3 acc = vec3(0.);
  for(float i=0.;i<128.;i++){
    
      vec2 d = sdf(rp);
      acc +=vec3(.5,sin(length(rp*2.))*.5+.5,cos(length(rp*2.))*.5+.5)*exp(-abs(d.x))/(160.+clamp(asin(cos(length(rp)-iTime*4.-hash31(floor(rp*2.)/2.))),-1.,1.)*130.);
      d.x = max(.001,abs(d.x));
      dd+=d.x ;
      if(dd>60.) break;
      rp+=rd2*d.x;
    
  }
    
    vec3 from=vec3(1.,.5,0.5)*acc;

    
    mainVR(outColor, fragCoord, from, dir);
    outColor+=vec4(acc,1.);
     uv2 *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale
    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 
    outColor *= vec4(happy_rich_healthy_star(uv, anim) * vec3(0.55,0.5,0.55)*0.1, 1.0); 
}

]]>
</program>
</language>
</jittershader>
