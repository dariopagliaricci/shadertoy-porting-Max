<jittershader name="default">
	<description>Default Slab </description>
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;
			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			void main(void) {
				gl_Position = MVP*vec4(pos, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;

} jit_in;
layout (location = 0) out vec4 O;

uniform vec2 viewPort;
uniform float iTime;

// Trailing the Twinkling Tunnelwisp (CC0)

// Volumetric tunnel shader (distance field raymarching).
// Gyroid-based, twisting tunnel with animated "wisp" lighting.
// Supports customizable color palettes and water-like reflections.

// Based on the original by BeRo & Paul Karlik.  
// Palette, wisp animation, and customization extensions by ChatGPT (2024).

//Modified with ChatGPT (2025).
// CC0/Public Domain. 

float g(vec4 p, float s) {
    return abs(dot(sin(p *= s), cos(p.zxwy)) - 1.) / s;
}

void main() {
	// Centered, aspect-corrected coordinates:
	vec2 C = (jit_in.uv * 2.0 - 1.0);
	C.x *= viewPort.x / viewPort.y;
    float i = 0.0, d = 0.0, z = 0.0, s = 0.0, T = iTime;
    vec4 o = vec4(0), q, p, U = vec4(2, 1, 0, 3);

    for (
        ; ++i < 79.;
        z += d + 5E-4,
        // q = vec4(normalize(vec3((C + C - r) / r.y, 2)) * z, .2),
        q = vec4(normalize(vec3(C, 2.0)) * z, 0.2),
        q.z += T / 3E1,
        s = q.y + .1,
        q.y = abs(s),
        p = q,
        p.y -= .11,
        p.xy *= mat2(cos(11. * U.zywz - 2. * p.z)),
        p.y -= .2,
        d = abs(g(p, 8.) - g(p, 24.)) / 4.,
        //Palette Color
        //p = 1.3 + 1.2 * cos(vec4(2.1, 4.5, 1.7, 0.0) + 5.5 * q.z)
        //p = 1.0 + 1.2 * cos(vec4(2.6, 5.0, 3.2, 0.0) + 5.1 * q.z)
        p = 1.4 + 1.8 * cos(vec4(1.8, 3.1, 4.5, 0.0) + 7.0 * q.z)
        //p = 1.2 + 0.8 * cos(vec4(0.7, 2.8, 4.7, 0.0) + 3.4 * q.z)
        //p = 1.18 + cos(vec4(3.1, 5.2, 4.4, 0.0) + 3.6 * q.z)
        //p = 1.25 + cos(vec4(1.4, 2.1, 0.5, 0.0) + 3.2 * q.z)
    )
        // Glow accumulation (unchanged)
        o += (s > 0. ? 1. : .1) * p.w * p / max(s > 0. ? d : d * d * d, 5E-4);

    // --- Animated, color-shifting, moving tunnelwisp ---
    vec2 wispPos = 1.5 * vec2(cos(T * 0.7), sin(T * 0.9));
    float wispDist = length(q.xy - wispPos);
    vec3 wispColor = vec3(1.0, 0.8 + 0.2 * sin(T), 0.7 + 0.3 * cos(T * 1.3));
    o.xyz += (2.0 + sin(T * 2.0)) * 800.0 * wispColor / (wispDist + 0.4);

    // Tone mapping
    vec4 outcol = tanh(o / 1E5);
    outcol.rgb = max(outcol.rgb, vec3(1E-5));
    O = clamp(outcol, 0.0, 1.0);
}


]]>
</program>
</language>
</jittershader>
