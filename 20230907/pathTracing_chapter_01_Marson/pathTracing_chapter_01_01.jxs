<jittershader name="default">
	<description>Default Slab </description>
	
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	
	<language name="glsl" version="1.5">
		
		<bind param="MVP" program="vp" />

		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="viewPort" program="fp" />
		<bind param="eye" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos; // position is pos
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv; //texcoord is uv
			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = MVP*vec4(pos, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core

//Written tutorial from Alan Wolfe
//https://www.shadertoy.com/view/tsBBWW

in jit_PerVertex {
	vec2 uv;
} jit_in;

layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform vec3 eye;

void main(void) {

	vec2 screenPos = jit_in.uv*2-1;
	float ratio = viewPort.x / viewPort.y;
	screenPos.x *= ratio;

	// The ray starts at the camera position (the origin)
	// vec3 ro = vec3(0, 0, 0);
	vec3 ro = eye; // eye is vec3(0, 0, 0) coming from tghe outside jit.gl.camera param @position 0, 0, -6 (blue test)

	// calculate coordinates of the ray target on the imaginary pixel plane.
    // -1.777 to +1.777 on x axis, -1 to 1 on y axis. 4 unit away on the z axis
	vec3 pixPos = vec3(screenPos, 4);// number is z position towards the viewer - right hand coordinates - 

	 // calculate a normalized vector for the ray direction.
    // it's pointing from the ray origin to the ray target.
	vec3 rd = normalize(pixPos - ro);

	outColor = vec4(rd, 1);
}
		]]>
		</program>
	</language>
</jittershader>
