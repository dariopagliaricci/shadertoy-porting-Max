<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iTime" type="float" default="0.0" />
	<param name="iFrame" type="int" default="0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iTime" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 Q;

uniform vec2 viewPort;
uniform float iTime;
uniform int iFrame;
uniform samplerCube iChannel0;

vec2 R;
#define T iTime
#define I iFrame
#define Main void main()
// #define A(U) texture(iChannel0,(U)/R)
#define A(U) texture(iChannel0, vec3(U, sqrt(1.0 - dot(U, U))))
#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))
vec2 norm (vec2 v){
    if (length(v) == 0.) return vec2(0);
    else return normalize(v);
}
vec4 hash(vec4 p) {
                const vec4 k = vec4(0.1031, 0.11369, 0.13787, 0.16379); 
                p = fract(p * k);                                       
                p += dot(p, p.wxyz + k);                                
                p = fract((p.xxyz + p.yzww) * p.zyxw);                  
                return fract(sin(p) * 43758.5453);                      
            }
float ln (vec3 u, vec3 a, vec3 b) {
    return length(u-a-(b-a)*clamp(dot(u-a,b-a)/dot(b-a,b-a),0.,1.));
}

vec2 scene (vec3 u) {
                u.y +=.7;
                float d = 1e9;
                float a = 0.;
                for (float i = 0.; i < 10.; i++) {
                    float d1 = ln(u,vec3(0),vec3(0,-.4*exp2(-.5*(i-1.)),0))-.05*exp2(-.5*i);
                    if (d1 < d) {
                        a = i;
                        d = d1;
                    }
                    u.xy *= ei(-.4*sqrt(i));
                    u.xz = abs(u.xz);
                    u.xz *= ei(.4);
                    u.xy *= ei(-.2*sqrt(i));
                    //u.yx *= ei(.3*sqrt(i));
                    u.y -= .4*exp2(-.5*i);
                }
                return vec2(d,a);
            }

            vec3 grad(vec3 p) {
   
       return normalize(vec3(
           scene(p+vec3(1e-3,0,0)).x-scene(p-vec3(1e-3,0,0)).x,
           scene(p+vec3(0,1e-3,0)).x-scene(p-vec3(0,1e-3,0)).x,
           scene(p+vec3(0,0,1e-3)).x-scene(p-vec3(0,0,1e-3)).x));
   }  
   
   Main {
   	vec2 U = jit_in.uv * viewPort.xy;
    Q = vec4(0);
    R = viewPort.xy;
    vec4 h = hash(vec4(iTime,iFrame,U));
    vec2 r = .15*R.y*sqrt(h.z)*vec2(cos(2.*3.14159*h.x),sin(2.*3.14159*h.x));
    vec3 p = vec3(-r/R.y,-1);
    vec3 d = normalize(vec3(2.*(U+(.7+.3*sin(iTime))*r-.5*R)/R.y,1));
    p.xz *= ei(.2);
    d.xz *= ei(.2);
    for (float i = 0.;i < 100.; i++) {
        p += d*scene(p).x;
        
    }
    
    Q = A(U)*.9;
    Q.xyz += max(-dot(grad(p),vec3(sqrt(1./3.))),0.);
    if (scene(p).y>8.) Q.x += 1.;
    
  }
]]>
</program>
</language>
</jittershader>
