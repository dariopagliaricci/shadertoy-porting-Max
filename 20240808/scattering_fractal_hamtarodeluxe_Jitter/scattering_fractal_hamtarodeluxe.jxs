<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iFrame" type="int" default="0" />
	<param name="iMouse" type="vec3" default="0 0 0" />
	<param name="iChannel0" type="int" default="0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iFrame" program="fp" />
		<bind param="iMouse" program="fp" />
		<bind param="iChannel0" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform int iFrame;
uniform vec3 iMouse;
uniform samplerCube iChannel0;

#define PI 3.14159265359

//random
float hash( float n )
{
	return fract(sin(n)*43758.5453);
}

vec2 vogel(int i, int samples, float rot) 
{
        float theta = 2.4 * float(i)+rot;
        float r = sqrt(float(i) + 0.5) / sqrt(float(samples));
        vec2 u = r * vec2(cos(theta), sin(theta));
        vec2 pos = u;
        return pos;
}

//random
float hash21( uvec2 x )
{
    uvec2 q = 1103515245U * ( (x>>1U) ^ (x.yx   ) );
    uint  n = 1103515245U * ( (q.x  ) ^ (q.y>>3U) );
    float f = float(n) * (1.0/float(0xffffffffU));
    
    return f;
}

//math
float gauss(float x, float c)
{
	return exp(-pow(x,2.)/pow(2.*c,2.));

}

vec3 gamma(vec3 x, float gamma)
{
	return vec3(pow(x.x,gamma),pow(x.y,gamma),pow(x.z,gamma));
}

float saturate( float x) { return clamp(x,0.,1.);}

vec3 saturate (vec3 x) { return vec3 (saturate(x.x),saturate(x.y),saturate(x.z));}
            
float smallestPositive(float x,float y)
{
	if(x<0.&&y>=0.) return y;
    if(y<0.&&x>=0.) return x;
    else return min(x,y);
}

vec3 cartToSph(vec3 pos)
{
	float r = length(pos);
	return vec3(r,acos(pos.y/r),atan(pos.z,pos.x));//wikipedia physics convention
}

vec3 sphToCart(vec3 sc) //vec3 (radius, polar, azimuth)
{	
	float x = sc.x * sin(sc.y) * cos(sc.z);
	float z = sc.x * sin(sc.y) * sin(sc.z);
	float y = sc.x * cos(sc.y);
	return vec3(x,y,z);
}

vec3 RGBToXYZ(vec3 rgb) {
   	vec3 xyz;
    xyz[0] = 0.412453f * rgb[0] + 0.357580f * rgb[1] + 0.180423f * rgb[2];
    xyz[1] = 0.212671f * rgb[0] + 0.715160f * rgb[1] + 0.072169f * rgb[2];
    xyz[2] = 0.019334f * rgb[0] + 0.119193f * rgb[1] + 0.950227f * rgb[2];

	return xyz;
}

mat2x2 rot(float angle)
{
    float ca = cos(angle);
    float sa = sin(angle);
    return mat2x2(ca, -sa,
				  sa, ca);
}

#define AA 16
#define MOUSECONTROL 1

#define RWSTEPS 8
#define FAR 5.
#define MARCHBIAS 0.001
#define MAXSTEPS 40
#define BIAS MARCHBIAS*1.2

#define DENSITY 150.
#define EXTINCTION vec3(0.25, 0.7, 1.)
#define LIGHTSTR 50.
vec3 EXTINCTIONs[]  = vec3[]( vec3(0.3, 0.7, 1.),
                              vec3(1., 0.6, 0.5),
                              vec3(0.6, 1.3, 1.3));
    
vec3 ALBEDOs[]  = vec3[]( vec3(.9, 0.97, .89),
                          vec3(1., 1., 0.87),
                          vec3(0.99, 0.9, 0.98)
                          );

vec3 EMISSIVEs[]  = vec3[]( vec3(0.01, 0.01, 0.02),
                            vec3(0.021, 0.02, 0.01),
                            vec3(0.02, 0.01, 0.02));
    
struct Hit 
{
	float t; 
    bool hasHit;
    vec3 position;
};

struct Scene
{
    vec3 lightPosition;
    vec3 lightIntensity;
 	vec3 sigmaS;
    vec3 sigmaA;
    vec3 emissive;
    uvec2 random;
    int bounces;
    float time;
};

// Float generator
float nextFloat(inout uvec2 random)
{
	random.x += 1u; 
    return clamp(hash21(random),0.0000,1.);
}

// SDF

#define SDF \
float t = scene.time*0.5;\
vec3 a = 0.1*vec3(0., t, t + PI);\
int k = 0;\
for( k=0;k<km;k++){\
    p.xyz = abs(p.zxy);\
    p.xyz = p.xyz*vec3(2.,2.,2.)-vec3(0.6,0.6,0.6);\
    p.xy *= rot(a.z);\
    p.zx *= rot(a.y);\
}\
return (length(p)-1.0)/pow(2.,float(k));\

float sdf(vec3 p, Scene scene)
{
    int km = 7;
    SDF
}

float sdfLow(vec3 p, Scene scene)
{
    int km = 3;
    SDF
}

vec3 estimateNormal(vec3 pos, Scene scene)
{
 	vec3 normal = vec3(0.);
    float d = 0.0001;
    normal.x = sdf(pos + vec3(d,0.,0.), scene) - sdf(pos - vec3(d,0.,0.), scene);
    normal.y = sdf(pos + vec3(0.,d,0.), scene) - sdf(pos - vec3(0.,d,0.), scene);
    normal.z = sdf(pos + vec3(0.,0.,d), scene) - sdf(pos - vec3(0.,0.,d), scene);
	return normalize(normal);
}

Hit intersectSdf(vec3 ro, vec3 rd, Scene scene, float startSign, int steps)
{
    Hit hit;
    hit.hasHit = false;
	float s = startSign;
    vec3 p;
    float t;
    float closestD = MARCHBIAS * 1.5;
    for(int i = 0; i < steps; i++)
    {
    	p = ro + t*rd;
     	float d = sdf(p, scene);
        if (s*d < closestD)
        {
            closestD = d;
            hit.hasHit = true;
            hit.t = t;
            hit.position = p;
        }
    	if(s*d < MARCHBIAS)
        {
        	break;
        }
        if(s*d >= FAR) break;
        t+=s*d;
    }
    return hit;
}

// Monte carlo

vec3 sampleSurfaceBSDF(vec3 normal, inout uvec2 random, out float pdf)
{
	vec2 h = vec2(nextFloat(random), nextFloat(random));
	
    vec2 d = vec2(sqrt(h.x),2.*PI*h.y);
    d = vec2(d.x*sin(d.y),d.x*cos(d.y));
    
    vec3 ray = vec3(d.x,sqrt(max(0.,1.-d.x*d.x-d.y*d.y)),d.y);
    float ct = dot(ray,vec3(0.,1.,0.));

   	vec3 up = normal;
    vec3 right =  normalize(vec3(-up.y,0.1,up.x));
    vec3 fw = normalize(cross(right, up));
    right = normalize(cross(fw,up));
    ray = mat3x3(right,up,fw)*ray;
       
   	pdf = ct/PI;
    return ray;
}

vec3 sampleMediumBSDF(inout uvec2 random)
{
    vec2 h = vec2(nextFloat(random),nextFloat(random));
    float polar = acos(2.*h.x-1.);
    float azimuth = 2.*PI*h.y;
    vec3 ray = sphToCart(vec3(1.,polar,azimuth)); 
    return ray;
}

float sampleMediumScattering(inout uvec2 random, vec3 S)
{
    int ch = int(floor(3.*nextFloat(random)));  
	float t = -log(1.-nextFloat(random))/(S[ch]);
        
    return t;   
}

vec3 sampleMediumBSDF(inout uvec2 random, out float pdf)
{            
	vec2 h = vec2(nextFloat(random), nextFloat(random));   
    float polar = acos(h.x*2.-1.);  
    float azimuth = 2.*PI*h.y;
    vec3 ray = sphToCart(vec3(1., polar, azimuth));	
   	pdf = 1./(4.*PI);
    return ray;
}

//BSDF
vec3 evaluateSurfaceBSDF(vec3 normal, vec3 wo, vec3 wi)
{
	return vec3(1.)/PI;
}

// Integrator
vec3 traceSdf(vec3 ro, vec3 rd, inout Scene scene)
{
    int bounces = 0;
    vec3 tp = vec3(1.);
    vec3 col = vec3(0.);
    bool inVolume = false;
    vec3 pos = ro;
    vec3 ray = rd;
    vec3 sigmaT = scene.sigmaS + scene.sigmaA;
    Hit hit;

    hit = intersectSdf(pos, ray, scene, 1.0f, MAXSTEPS);

    if(!hit.hasHit) return vec3(0.00051);
            
    vec3 normal = estimateNormal(hit.position, scene);
    float pdf;
    
    // Update tp with surface interaction
    vec3 wi = sampleSurfaceBSDF(-normal, scene.random,pdf);// uniform hemisphere
    vec3 wo = -ray;
    vec3 bsdf = evaluateSurfaceBSDF(-normal, wo,wi); // 1/PI
    tp *= (bsdf/pdf)*saturate(dot(wi,-normal));
    pos = hit.position-BIAS*normal;
    ray = wi;
    
    bounces++;
    bool first = true;
    while (bounces < RWSTEPS)
    {

        // Sample scattering event
        float t = sampleMediumScattering(scene.random, sigmaT);
        inVolume = sdfLow(pos + ray*t, scene) < 0.00f;
        
        if(inVolume)
        {
            // Update tp with scattering event
            pos = pos + ray*t;
            vec3 pdff = inVolume ? sigmaT*exp(-sigmaT*t) : exp(-sigmaT*t);
            float pdf = (pdff.x+ pdff.y+ pdff.z)/3.; 
            vec3 tr = exp(-sigmaT*t);
            tp *= inVolume ?(scene.sigmaS)*tr*(1./pdf) : tr*(1./pdf);
            
            // Sample medium BSDF
            vec3 wi = sampleMediumBSDF(scene.random, pdf); 
            vec3 wo = -ray;
            vec3 mediumBsdf = vec3(1./(4.*PI));
            float mediumPdf = pdf;
            tp *= mediumBsdf/mediumPdf;
            ray = wi;
        }
        else // Exiting volume
        {
            hit = intersectSdf(pos, ray, scene, -1.0f, MAXSTEPS);

            t = hit.t;
            pos = pos + ray*t;
            hit.position = pos;
            
            vec3 pdff = exp(-sigmaT*t);
            float pdf = (pdff.x+ pdff.y+ pdff.z)/3.; 
            vec3 tr = exp(-sigmaT*t);
            tp *= tr*(1./pdf);

            vec3 normal = estimateNormal(hit.position, scene);
            
            // Do direct lighting
            vec3 wo = -ray;
            vec3 lp = scene.lightPosition;
            vec3 lightRay = lp-pos;
            float l = length(lightRay);
            vec3 wi = lightRay/l;
            vec3 bsdf = evaluateSurfaceBSDF(normal, wo, wi);           	
            Hit occlusion = intersectSdf(pos+normal * BIAS, wi, scene, 1.0f, MAXSTEPS);
            vec3 lightIntensity = vec3(0.);
            if(!occlusion.hasHit || occlusion.t>l)
                lightIntensity = scene.lightIntensity/(l*l);
    
            col += tp*bsdf*lightIntensity*saturate(dot(normal,wi)) + tp * scene.emissive;

            break;
        }

        bounces++;
                   
    }

    return col;
}

void camera(vec2 pixel_coords, vec3 pos, vec3 rg, vec3 up, vec3 fw, float focal, vec2 rand, out vec3 ro, out vec3 rd)
{
	vec2 pixelCoordsN = vec2(pixel_coords)/viewPort.xy;
	vec2 dc = (pixelCoordsN*2.-1.);
	dc.y *= float(viewPort.y)/float(viewPort.x);
	ro = pos;
	float fo = 1.;
	ro += (fw * fo + up * dc.y + rg * dc.x);    
	rd = normalize(ro - pos);
    rand = 0.175 * (rand);
    ro = (ro + rand.x*rg + rand.y*up);
    vec3 onFocalPlane = pos + rd * (focal / dot(rd,fw));
    rd = normalize(onFocalPlane - ro);
}

void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    vec2 uv = fragCoord/viewPort.xy;
    int frame =iFrame;
    bool first = iFrame == 0;
    #if MOUSECONTROL
        frame = int(iMouse.x)*1000;
        first = first || (iMouse.z > 0.);
    #else
        first = first || (frame % 400 == 0);
    #endif
    
    int sceneI = ((frame/400) + 51) % 1000;
    
    Scene scene;
    scene.time = 100.*float(sceneI)+0.005*float(frame%400);
    
    vec3 camPos = vec3(cos(0.01*scene.time)*3.,sin(0.01*scene.time),sin(0.01*scene.time)*3.);
    camPos = camPos * (0.95 + 0.15f * sin(scene.time));
   
    vec3 lookAt = vec3(+0.1,0.05,-0.1);
    vec3 fw = normalize(lookAt-camPos);
	vec3 rg = normalize(vec3(-fw.z,sin(0.0008*scene.time+PI*0.5),fw.x))*0.25;
	vec3 up = normalize(cross(rg,fw))*0.25;
    
    int index = sceneI%3;
    vec3 albedo = ALBEDOs[index];
    float density = DENSITY * (1.0 + 0.8 *hash(float(sceneI)*666.66));
    vec3 extinction = EXTINCTIONs[index];
	scene.sigmaS = albedo*extinction;
    scene.sigmaA = extinction-scene.sigmaS;
    scene.sigmaS *= density;
    scene.sigmaA *= density;
    scene.lightPosition = vec3(camPos) + 4.*rg + 1.5*fw - 0.5*up;
    scene.lightIntensity = LIGHTSTR*vec3(1.,1.,1.);
    scene.emissive = EMISSIVEs[index];
    // Init. random
    uint seed = uint(fragCoord.x + viewPort.x*fragCoord.y )+ uint(iFrame%1000)*uint(viewPort.x*viewPort.y);
    scene.random =  uvec2(0,seed);   
    
    vec3 col = vec3(0.);   


    float d = 0.;
    float focal = 10.;
    if(!first)
        // focal = texelFetch(iChannel0, ivec2(0,0),0).w;
        // focal = texelFetch(iChannel0, ivec2(0,0),0).w;
        focal = texture(iChannel0, vec3(1.0, 0.0, 0.0)).w;  // Sample from cube map with a direction vector
    float rot = nextFloat(scene.random)*2.*PI;
    vec2 os = (vec2(nextFloat(scene.random),nextFloat(scene.random))-0.5)*0.2;
    vec2 rand;
    for(int i = 0; i < AA && (iFrame != -1); i++)
    {
        rand = vogel(i, AA, rot) + os;
        vec3 rd, ro;        
        camera(fragCoord, camPos, rg, up, fw, focal, rand, ro, rd);
        col += traceSdf(ro, rd, scene);
        d += step(length((uv*2.-1.)-rand),0.015) ;
    }
    
    col /= float(AA);  
    
    col = min(col.rgb, vec3(1.));
    
    // vec3 pCol = texelFetch(iChannel0,ivec2(fragCoord),0).rgb;
    vec3 pCol = texture(iChannel0, normalize(vec3(fragCoord, 0.0))).rgb;
    if (ivec2(fragCoord).x == 0 && ivec2(fragCoord).y == 0)
    {
        float t = 1.;
        camPos += 0.3*(rg * os.x + up * os.y);
        for (int i = 0; i < 20; i++)
        {
            float d = sdf(camPos + t * fw, scene);
            if (d< MARCHBIAS)
                break;
            t += d;
        }
        focal = clamp(0.1, 10., mix(focal, t+0.01, 0.2f));
    }
    
    float taa = 0.2f;
    
    #if MOUSECONTROL
        taa = 0.02f;
    if (first)
        taa = 1.0f;
    #endif
    
    outColor = vec4(mix(pCol, col.rgb, taa), focal);
}


]]>
</program>
</language>
</jittershader>
