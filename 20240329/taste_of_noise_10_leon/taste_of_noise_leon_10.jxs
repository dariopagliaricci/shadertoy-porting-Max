<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
    <param name="iChannel0" type="int" default="0" />
	<param name="iTime" type="float" default="0.0" />
    <param name="iMouse" type="vec3" default="0 0 0" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
        <bind param="iChannel0" program="fp" />
		<bind param="iTime" program="fp" />
        <bind param="iMouse" program="fp" />


		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
	#version 330 core
	
	in jit_PerVertex {
		vec2 uv;

	} jit_in;
	layout (location = 0) out vec4 outColor;
	
	uniform vec2 viewPort;
    uniform sampler2D iChannel0;
	uniform float iTime;
    uniform vec3 iMouse;
	

// Dave Hoskins
// https://www.shadertoy.com/view/4djSRW
float hash13(vec3 p3)
{
    p3  = fract(p3 * .1031);
    p3 += dot(p3, p3.zyx + 31.32);
    return fract((p3.x + p3.y) * p3.z);
}
vec3 hash33(vec3 p3)
{
    p3 = fract(p3 * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy + p3.yxx)*p3.zyx);
}

// Inigo Quilez
// https://iquilezles.org/articles/distfunctions
float sdBox( vec3 p, vec3 b ) {
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

// rotation matrix
mat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }

#define repeat(p,r) (mod(p,r)-r/2.)

//--------------------------------------------------------------------

// taste of noise 10 by leon denise 2021/10/15
// result of experimentation with organic patterns
// using code from Inigo Quilez, David Hoskins and NuSan
// thanks to Fabrice Neyret for code reviews
// licensed under hippie love conspiracy

// global variable
float material;
float rng;

// sdf
float map (vec3 p)
{
    // time
    float t = floor(iTime/10.)*178.;
    
    // keep original pos
    vec3 pp = p;
    
    // rotation parameter
    vec3 angle = vec3(-.1,-.2,.3)-t*.1;
    
    // kif
    const float count = 8.0;
    float a = 1.0;
    float scene = 1000.;
    float shape = 1000.;
    for (float index = 0.0; index < count; ++index)
    {        
        
        // fold
        p.xz = abs(p.xz)-0.3*a;
        
        // rotate
        p.yx *= rot(angle.z/a);
        p.xz *= rot(angle.y/a);
        p.yz *= rot(angle.x/a);
        
        // sdf object
        shape = sdBox(p, vec3(0.05,0.2,0.01)*a*2.);
        
        // material
        material = shape < scene ? index : material;
        
        // add
        scene = min(scene, shape);
        
        // falloff
        a /= 1.3;
    }
    
    // crop
    scene = max(scene, -sdBox(pp,vec3(0.1,0.2,.5)));
        
    return scene;
}

vec3 color (vec3 pos, vec3 ray, vec3 normal)
{    
    // lighting
    vec3 rf = reflect(ray, normal);
    float ld = dot(rf, vec3(0,1,0))*0.5+0.5;
    vec3 light = vec3(1.000,1.000,1.000) * sqrt(ld)-.5;
    ld = dot(rf, vec3(0,1,0))*0.5+0.5;
    light += vec3(1.000,1.000,1.000) * pow(ld, 5.)*.5;

    // Inigo Quilez color palette (https://iquilezles.org/articles/palettes)
    vec3 tint = .5+.5*cos(vec3(1,2,3)*material*.2);

    // compositing
    return tint + light;
}


// return color from pixel coordinate
void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;

    // reset color
    outColor = vec4(0,0,0,1);
    material = 0.0;
    
    // white noise
    vec3 seed = vec3(fragCoord.xy, iTime);
    rng = hash13(seed);
    
    // pixel coordinates
    vec2 uv = (fragCoord.xy - viewPort.xy * 0.5) / viewPort.y;
    
    // blur edges
    vec3 dof = hash33(seed+78.);
    uv += vec2(cos(dof.x*6.28),sin(dof.x*6.28))*.2*pow(length(uv), 3.)*dof.y;
    
    // camera coordinates
    vec3 eye = vec3(0,0,0);
    vec3 at = vec3(0,0,1);
    vec2 mouse = (iMouse.xy/viewPort.xy-.5);
    mouse *= step(0.1,length(mouse.xy+.5));
    at.yz *= rot(-mouse.y);
    at.xz *= rot(mouse.x);
    vec3 z = normalize(at-eye);
    vec3 x = normalize(cross(z, vec3(0,1,0)));
    vec3 y = (cross(x, z));
    vec3 ray = normalize(vec3(z * .5 + uv.x * x + uv.y * y));
    vec3 pos = eye;
    
    float bounces = 0.0;
    
    // raymarch
    const float steps = 30.0;
    float index;
    for (index = steps; index > 0.0; --index)
    {
        // volume estimation
        float dist = map(pos);
        if (dist < 0.001)
        {
            float shade = index/steps;
            
            // bounces
            if (bounces++ > 1.) break;

            // compute normal by NuSan (https://www.shadertoy.com/view/3sBGzV)
            vec2 off=vec2(0.001,0);
            vec3 normal = normalize(map(pos)-vec3(map(pos-off.xyy), map(pos-off.yxy), map(pos-off.yyx)));

            // coloring
            outColor.rgb += color(pos, ray, normal) * shade * 0.5;

            // bounces
            float roughness = 0.2;
            if (material < 0.) roughness = 1.;
            ray = reflect(ray, normal);
            ray = normalize(ray+normalize(hash33(pos*1000.)*2.-1.)*roughness);
            dist = 0.1;
        }
        
        // dithering
        dist *= 0.9 + .1 * rng;
        
        // raymarch
        pos += ray * dist;
    }
    
    // temporal buffer
    // if (iMouse.z < 0.5)
    // {
    //     vec3 frame = texture(iChannel0, fragCoord.xy/viewPort.xy).rgb;
    //     outColor.rgb = max(outColor.rgb, frame - 0.005);
    // }
}


]]>
</program>
</language>
</jittershader>
