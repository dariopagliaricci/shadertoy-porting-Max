<jittershader name="default">
	<description>Default Slab </description>

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="iFrame" type="int" default="0" />
    <param name="iMouse" type="vec3" default="0 0 0" />
	<param name="iChannel0" type="int" default="0" />
	<param name="iChannel1" type="int" default="1" />

	<language name="glsl" version="1.5">

		<bind param="MVP" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />

		<bind param="viewPort" program="fp" />
		<bind param="iFrame" program="fp" />
        <bind param="iMouse" program="fp" />
		<bind param="iChannel0" program="fp" />
		<bind param="iChannel1" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;

			out jit_PerVertex {
				vec2 uv;

			} jit_out;
			uniform mat4 MVP;

			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.uv = uv;

			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
vec2 uv;

} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 viewPort;
uniform int iFrame;
uniform vec3 iMouse;
uniform samplerCube iChannel0;
uniform sampler2D iChannel1;

//render distance (mostly doesn't affect performance)
#define maxDist 100000. 
//samples per pixel per frame
#define SPF 16
#define pi 3.14159265359
//scene
#define scenen 0

// maybe I'll get rid of global variables in the future
vec3 center;
vec3 ray;
float rdist;
vec3 normal;
vec3 color;
int material;
float ior;
bool inside;

// visual studios rand()
int   seed = 1;
void  srand(int s ) { seed = s; }
int   rand(void) { seed=seed*0x343fd+0x269ec3; return (seed>>16)&32767; }
float frand(void) { return float(rand())/32767.0; }
// hash to initialize the random seed (copied from Hugo Elias)
int hash( int n ) { n=(n<<13)^n; return n*(n*n*15731+789221)+1376312589; }
// http://amietia.com/lambertnotangent.html
vec3 cosineDirection( in vec3 nor)
{
    float u = frand()*2.0-1.0;
    float a = frand()*2.0*pi;
    return normalize(nor+vec3(sqrt(1.0-u*u)*vec2(cos(a),sin(a)), u) );
}

// pick random point within circle of specified radius
vec2 randCircle(float rad) {
    float d = frand()*2.0*pi;
    float m = sqrt(frand())*rad;
    return m*vec2(cos(d), sin(d));
}

// euler rotation system pretty much grabbed off of stack overflow
vec3 rotate(vec3 inpoint, float pitch, float roll, float yaw) {
    // create rotation matrix
    
    float cosa = cos(yaw);
    float sina = sin(yaw);

    float cosb = cos(pitch);
    float sinb = sin(pitch);

    float cosc = cos(roll);
    float sinc = sin(roll);
    
    vec3 Ax = vec3(cosa*cosb, cosa*sinb*sinc - sina*cosc, cosa*sinb*cosc + sina*sinc);
    vec3 Ay = vec3(sina*cosb, sina*sinb*sinc + cosa*cosc, sina*sinb*cosc - cosa*sinc);
    vec3 Az = vec3(-sinb, cosb*sinc, cosb*cosc);

    // rotate
    return vec3(dot(Ax, inpoint),
                dot(Ay, inpoint),
                dot(Az, inpoint));
}

// schlick's approx (for dielectric materials)
float calcFresnel(float n0, float n1) {
    float r = (n0-n1)/(n0+n1);
    r = r*r;
    float a = dot(ray, normal);
    return r+(1.-r)*pow((1.+a), 5.);
}

// simple gradient for a sky texture:
// light grayish blue to deeper blue,
// doesn't continute below horizon
vec3 sky(float y) {
    y = min(max(y, 0.0), 1.0);
    return vec3(mix(0.66015625, 0.21953125, y), 
                mix(0.75390625, 0.475,      y), 
                mix(0.75390625, 0.72265625, y));
}

// prettier sky:
// tries to mimic nishita sky model
// at around 45 degree sun angle.
// continues below horizon
vec3 sky2(float y) {
    y = (y + 1.0) / 2.0;
    vec3 oc = vec3(0);
    if (y < 0.32 && y >= 0.0) {
        y = y / 0.32;
        oc.x = mix(32.0/255.0, 126.0/255.0, y);
        oc.y = mix(22.0/255.0, 126.0/255.0, y);
        oc.z = mix(15.0/255.0, 103.0/255.0, y);
    } else if (y < 0.5) {
        y = (y - 0.32) / 0.18;
        oc.x = mix(126.0/255.0, 255.0/255.0, y);
        oc.y = mix(126.0/255.0, 218.0/255.0, y);
        oc.z = mix(103.0/255.0, 173.0/255.0, y);
    } else if (y < 0.57) {
        y = (y - 0.5) / 0.07;
        oc.x = mix(255.0/255.0, 238.0/255.0, y);
        oc.y = mix(218.0/255.0, 250.0/255.0, y);
        oc.z = mix(173.0/255.0, 255.0/255.0, y);
    } else {
        y = (y - 0.57) / 0.43;
        oc.x = mix(238.0/255.0, 148.0/255.0, y);
        oc.y = mix(250.0/255.0, 184.0/255.0, y);
        oc.z = mix(255.0/255.0, 209.0/255.0, y);
    }
    return oc;
}

// if a color channel is maxed out
// it starts bleeding into other color channels
// (like real life cameras)
vec3 filmBleed(vec3 inc, float bleedThreshold, float bleedAmount) {
    vec3 addon = max(inc - vec3(bleedThreshold), vec3(0))*vec3(bleedAmount);
    return inc + vec3(addon.y+addon.z, addon.x+addon.z, addon.x+addon.y);
}

// sphere of size ra centered at point ce
// from the inigo quilez page on ray/object intersections
// needs to be more concise
void iSphere(vec3 ce, float ra, vec3 sColor, int m) {
    vec3 temp1 = center - ce;
    float temp0x = dot( temp1, ray );
    float temp0y = dot( temp1, temp1 ) - ra*ra;
    float temp0z = temp0x*temp0x - temp0y;
    if(temp0z >= 0.0) {
        temp0z = sqrt(temp0z);
        bool hit = false;
        float d;
        if (dot(temp1, temp1) < ra*ra) {
            d = -temp0x+temp0z;
            if (d < rdist && d > 0.0) 
                hit = inside = true;
        } else {
            d = -temp0x-temp0z;
            if (d < rdist && d > 0.0) {
                hit = true; inside = false;
            }
        }
        if (hit) {
            rdist = d;
            vec3 intersect = center+ray*rdist;
            normal = normalize(intersect-ce);
            if (inside) normal *= -1.0;
        
            color = sColor;
            material = m;
            
            // glass
            if (m == 2) {
                float f = calcFresnel(inside?1.333:1.0, inside?1.0:1.333);
                if (frand() < f) {
                    material = 3;
                    color = vec3(1);
                }
            } else if (m == 4) { // glossy
                material = 0;
                float f = calcFresnel(1.0, 1.15);
                if (frand() < f) {
                    material = 3;
                    color = vec3(1);
                }
            }
        }
    } 
}

// scene to be rendered
void scene() {
    if (scenen == 0) {
        iSphere(vec3(-5.14*3.0, 5.14, 10.0), 5.0, vec3(0.99, 0.99, 0.99), 3); // only specular
        iSphere(vec3(-5.14, 5.14, 20.0), 5.0, 1.5*vec3(200, 100, 50), 1); // light source
        iSphere(vec3(5.14, 5.14, 5.0), 5.0, vec3(0.99, 0.99, 0.99), 2); // glass (ior 1.333)
        iSphere(vec3(5.14*3.0, 5.14, 25.0), 5.0, vec3(0.99, 0.99, 0.99), 4); // glossy

        // ground
        iSphere(vec3(0, -1000000, 30), 1000000.0, vec3(0.7, 0.7, 0.7), 4);

        // light
        iSphere(vec3(-10, 50, 20), 25.0, 2.0*vec3(200, 200, 175), 1);
    } else {
        iSphere(vec3(-12.0, 3.05, -49.18), 8.0, vec3(0.9, 0.25, 0.25), 4);
        iSphere(vec3(-1.67, -0.55, -66.5802), 4.277, vec3(0.99, 0.99, 0.99), 2);
        iSphere(vec3(-9.75, -2.2, -77.38), 2.649, 400.0*vec3(1.0, 0.4, 0.1), 1);
        iSphere(vec3(18.58, 8.6, -94.41), 13.451, vec3(0.5, 0.2, 0.1), 0);
        iSphere(vec3(3.88, -1.1, -94.41), 3.725, vec3(0.99, 0.99, 0.99), 3);
        iSphere(vec3(0.68, 3.2, -105.3), 8.0, vec3(0.99, 0.99, 0.99), 2);
        iSphere(vec3(-22.32, 0.5, -172.6), 5.357, vec3(0.3, 0.8, 0.4), 4);
        
        iSphere(vec3(0, -1000005, 30), 1000000.0, vec3(0.9, 0.9, 0.9), 0);
    }
}

// trace the scene
vec3 raytrace(vec2 uv, float DoF, float aperture) {
    uv += vec2(frand(), frand())/viewPort.yy;
    
    vec3 s = vec3(1.0/256.0);
    
    // depth of field
    vec2 coff = randCircle(aperture);
    //vec2 coff = vec2(0);
    center = vec3(0.0+coff.x, 4.0+coff.y, -30.0);
    vec2 m;
    if (iMouse.xy == vec2(0)) {
        m = vec2(0);
    } else {
        m = vec2((iMouse.x-viewPort.x/2.0)/-viewPort.y, (iMouse.y-viewPort.y/2.0)/viewPort.y);
    }
    if (scenen == 0) {
        ray = rotate(normalize(vec3(uv, 2)), -coff.x/DoF+m.x, coff.y/DoF+m.y, 0.0);
    } else {
        ray = rotate(normalize(vec3(uv, 2)), coff.x/DoF+m.x+pi, coff.y/DoF+m.y, 0.0);
    }
    
    // light bounces
    for (int i=0; i<8; i++) {
        rdist = maxDist;
        scene();
        if (rdist<maxDist) {
            s *= color;
            if (material == 2) {
                center += rdist*ray-normal/10.0;
            } else {
                center += rdist*ray+normal/10.0; 
            }
            if (material == 0) {
                ray = cosineDirection(normal);
            } else if (material == 1) {
                break;
            } else if (material == 2) {
                float eta = 1.0/1.333;
                if (inside) {eta = 1.333;}
                ray = normalize(refract(ray, normal, eta));
            } else if (material == 3) {
                ray = normalize(reflect(ray, normal));
            }
        } else {
            if (scenen == 0) {
                s = vec3(0); // black sky (light only comes from light sources)
            } else {
                s *= 256.0*sky2(ray.y);
            }
            break;
        }
    } 
    
    return filmBleed(s, 1.0, 1.0);
}

void main()
{
    vec2 fragCoord = jit_in.uv * viewPort.xy;
    // initialize random seed
    ivec2 q = ivec2(fragCoord);
    srand( hash(q.x+hash(q.y+hash(1117*iFrame))));
    
    vec3 col = vec3(0);
    vec2 uv = fragCoord/viewPort.xy;
    vec2 px = (fragCoord-viewPort.xy/2.0)/viewPort.y;
    
    // do SPF samples per pixel per frame
    for (int i = 0; i < SPF; i++) {
        if (scenen == 0) {
            col += raytrace(px, 42.87, 2.0);
        } else {
            col += raytrace(px, 64.727989, 2.0);
        }
    }
    
    // vec4 data = texture(iChannel0, uv);
    vec4 data = texture(iChannel0, vec3(uv, 0.0));
    if (texelFetch(iChannel1,ivec2(32,0),0).x==1.0 || iMouse.z > 0.0) data = vec4(0.0);
    data += vec4(col/float(SPF), 1.0); // accumulate
    outColor = data;
}
]]>
</program>
</language>
</jittershader>
